<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>DaFoster</title>
 <link href="http://dafoster.net/atom.xml" rel="self"/>
 <link href="http://dafoster.net"/>
 <updated>2013-03-01T19:57:21-08:00</updated>
 <id>http://dafoster.net</id>
 <author>
   <name>David Foster</name>
   
 </author>

 
 <entry>
   <title>Notes on Racket (PLT-Scheme)</title>
   <link href="http://dafoster.net/articles/2013/03/01/notes-on-racket/"/>
   <updated>2013-03-01T00:00:00-08:00</updated>
   <id>http://dafoster.net/articles/2013/03/01/notes-on-racket</id>
   <content type="html">&lt;p&gt;Generally &lt;a href=&quot;http://racket-lang.org&quot;&gt;Racket&lt;/a&gt; appears to be a very usable dialect of Lisp/Scheme.&lt;/p&gt;

&lt;p&gt;Racket is particularly well suited for those who want to develop their own programming language (including those not based on S-expressions), given that the creators of Racket are programming language researchers. For example, a number of Racket subsets have been created to assist students who are learning Racket/Scheme via the &lt;a href=&quot;http://htdp.org&quot;&gt;How to Design Programs&lt;/a&gt; book.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; The Arc language by Paul Graham is also implemented in the Racket environment.&lt;/p&gt;

&lt;p&gt;Racket&amp;rsquo;s developers wanted to make sure it was a &lt;em&gt;practical&lt;/em&gt; language. To that end, there is a bundled IDE (DrRacket) with syntax highlighting, parentheses matching, and integrated debugging. There is also a package management system (PLaneT).&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; And built-in libraries for working with several real-world systems, such as GUIs, networking, databases, JSON/XML, etc. A cross-platform executable can easily be built. And everything is well documented.&lt;/p&gt;

&lt;p&gt;Graphics and GUI programs are supported better than the average language. For example pictures are rendered natively in the Racket REPL, including their use within expressions. And the built-in Racket GUI library is fairly decent.&lt;/p&gt;

&lt;p&gt;The combination of a decent built-in GUI library along with the ability to compile cross-platform executables makes Racket useful for writing cross-platform GUI applications.&lt;/p&gt;

&lt;h2&gt;Racket&amp;rsquo;s GUI library (RacketGUI)&lt;/h2&gt;

&lt;p&gt;The original version of Racket&amp;rsquo;s GUI library was implemented on top of wxWidgets.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; Thus some of wxWidget&amp;rsquo;s poor design decisions leak through:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A visual component is called a &amp;ldquo;window&amp;rdquo;, not a control.&lt;/li&gt;
&lt;li&gt;Visual components must be associated with their parent container at creation time.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;However, some fixes were made too:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There is no notion of a wxWidgets &amp;ldquo;sizer&amp;rdquo; as distinct from a &amp;ldquo;container window&amp;rdquo;.

&lt;ul&gt;
&lt;li&gt;This simplifies the mental model considerably, since it is no longer necessary to keep track of both a &amp;ldquo;window&amp;rdquo; hierarchy and a sizer hierarchy.&lt;/li&gt;
&lt;li&gt;Instead, a wxWidgets &amp;ldquo;sizer&amp;rdquo; is represented as a lightweight RacketGUI &amp;ldquo;pane&amp;rdquo;, which can be nested naturally inside containers along with other components.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The event handling loop is managed in the background automatically.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Sadly, RacketGUI lacks some advanced controls I often want:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;trees&lt;/li&gt;
&lt;li&gt;tables containing controls in cells

&lt;ul&gt;
&lt;li&gt;However the &lt;code&gt;list-box%&lt;/code&gt; control supports cells that only contain text.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tree-tables&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is not surprising since these controls are hard to implement and are not well-supported by the original underlying wxWidgets library:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The wxWidgets tree interface (wxTreeCtrl) is annoying for dynamically generated trees.&lt;/li&gt;
&lt;li&gt;Tables (wxListCtrl) only support text and image cells, not controls as cells.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;&lt;em&gt;Related Articles&lt;/em&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/articles/2013/01/29/unique-features-of-various-programming-languages/&quot;&gt;Unique Features of Various Programming Languages&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Describes several other programming languages and their unique features.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/articles/2013/02/25/notes-on-prolog/&quot;&gt;Notes on Prolog&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Describes Prolog, a highly declarative language. Useful for verification of proofs.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;http://htdp.org&quot;&gt;HtDP&lt;/a&gt; book uses the dialects &amp;ldquo;Beginning Student&amp;rdquo;, &amp;ldquo;Intermediate Student&amp;rdquo;, and &amp;ldquo;Advanced Student&amp;rdquo;. These sublanguages restrict the use of certain language features (such as using functions as objects) and can provide better error messages (which avoid mentioning advanced features not supported by the sublanguage).&lt;a href=&quot;#fnref:1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;It is possible to import modules directly from the PLaneT repository, which will automatically download and install the module if it isn&amp;rsquo;t already present. Neat!&lt;a href=&quot;#fnref:2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:3&quot;&gt;
&lt;p&gt;Racket&amp;rsquo;s GUI layer has apparently been redone a couple of times. Originally it was based on wxWidgets. Later it was rewritten to about 200,000 lines of C++ glue to Xt, Win32, and Carbon. Then in Racket 5.1 it was replaced with about 80,000 lines of Racket glue to Gtk, Win32, Cocoa, Cairo, and Pango. That&amp;rsquo;s a 60% reduction in code! More details on the &lt;a href=&quot;http://blog.racket-lang.org/2010/12/racket-version-5.html&quot;&gt;Racket blog&lt;/a&gt;.&lt;a href=&quot;#fnref:3&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Notes on Prolog</title>
   <link href="http://dafoster.net/articles/2013/02/25/notes-on-prolog/"/>
   <updated>2013-02-25T00:00:00-08:00</updated>
   <id>http://dafoster.net/articles/2013/02/25/notes-on-prolog</id>
   <content type="html">&lt;h2&gt;What is Prolog?&lt;/h2&gt;

&lt;p&gt;Prolog is a declarative programming language that, given a list of axioms and a list of implication rules, can deduce the truth (or falsehood) of a logical statement.&lt;/p&gt;

&lt;p&gt;For example, given the following knowledge base (AKA &lt;em&gt;database&lt;/em&gt;):&lt;/p&gt;

&lt;pre&gt;
% Axiom: Mary likes Ted.
likes(mary,ted).
% Axiom: Jane likes Ted.
likes(jane,ted).
% Rule: X is jealous of Y if they both like Z (and are not the same person).
jealous(X,Y) :- likes(X,Z), likes(Y,Z), X \= Y.
&lt;/pre&gt;


&lt;p&gt;I can ask the question &lt;code&gt;jealous(mary,jane)&lt;/code&gt; and get the affirmation &lt;code&gt;true&lt;/code&gt;.
Or I can ask the question &lt;code&gt;jealous(mary,mary)&lt;/code&gt; and get the denial &lt;code&gt;false&lt;/code&gt;.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;I can also ask a more complicated question containing variables and Prolog will derive the possible values (and relations) the variables must have in order to make the question posed to be true.&lt;/p&gt;

&lt;p&gt;For example, asking the question &lt;code&gt;jealous(X,Y)&lt;/code&gt; will give the results:&lt;/p&gt;

&lt;pre&gt;
X = mary,
Y = jane ;
X = jane,
Y = mary
&lt;/pre&gt;


&lt;p&gt;As another (more interesting) example, consider the knowledge base:&lt;/p&gt;

&lt;pre&gt;
% Rule: A line is horizontal if its points have the same Y coordinate.
horizontal(line( point(_,Y), point(_,Y) )).
% Rule: A line is vertical if its points have the same X coordinate.
vertical(line( point(X,_), point(X,_) )).
&lt;/pre&gt;


&lt;p&gt;And the questions:&lt;/p&gt;

&lt;pre&gt;
(1) horizontal(line( point(0,0), point(X,Y) )).  ==&gt;  Y = 0.
(2) horizontal(line( point(0,0), P2 )).          ==&gt;  P2 = point(_G327, 0).
&lt;/pre&gt;


&lt;p&gt;The second question is particularly interesting because it gave back a fairly complicated answer: &lt;code&gt;P2&lt;/code&gt; must be a &lt;code&gt;point&lt;/code&gt;, its X coordinate can be anything, but its Y coordinate must be zero. I think it&amp;rsquo;s particularly cool that Prolog can deduce that P2 must be a point. &lt;!-- LPN §2.1 --&gt;&lt;/p&gt;

&lt;p&gt;As a final example of a simple problem solvable by Prolog, consider the &lt;a href=&quot;http://www.learnprolognow.org/lpnpage.php?pagetype=html&amp;amp;pageid=lpn-htmlse7&quot;&gt;crossword puzzle&lt;/a&gt; in Exercise 2.4 of &amp;ldquo;Learn Prolog Now!&amp;rdquo;. You can write a Prolog program to solve crossword puzzles!&lt;/p&gt;

&lt;h2&gt;When is Prolog useful?&lt;/h2&gt;

&lt;p&gt;Prolog&amp;rsquo;s deduction capabilities makes it useful for answering questions and making deductions within systems whose concepts can be expressed in a formal hierarchy. &lt;!-- LPN §2.1 --&gt;&lt;/p&gt;

&lt;p&gt;In academia, for example, Prolog has been used to investigate natural language formalizations and expert systems in artificial intelligence. &lt;!-- LPN §2.1 --&gt;&lt;/p&gt;

&lt;h3&gt;Case Study: Java bytecode verifier&lt;/h3&gt;

&lt;p&gt;As a more practical example, Prolog has also been used to define the semantics of the Java bytecode verifier&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; for Java 6.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; Prior versions of Java had a verifier whose semantics were defined by a textual specification only (namely the Java Virtual Machine Specification).&lt;/p&gt;

&lt;p&gt;There are a few advantages to having the verifier defined in terms of Prolog:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The specification becomes formal (and thereby unambiguous and more likely to be error-free).&lt;/li&gt;
&lt;li&gt;The execution model for performing the verification becomes well-defined (since it would use Prolog&amp;rsquo;s) and fast (since Prolog&amp;rsquo;s core unification algorithm is fast&lt;!-- LPN §2.1 --&gt;).&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Writing Programs&lt;/h2&gt;

&lt;h3&gt;Functions as Rules&lt;/h3&gt;

&lt;p&gt;So how do you actually write something resembling a &lt;em&gt;program&lt;/em&gt; in Prolog? Until now we&amp;rsquo;ve been talking about axioms, rules, and questions. But in most languages a program consists of a series of expressions that are evaluated.&lt;/p&gt;

&lt;p&gt;For example in Python, you might write:&lt;/p&gt;

&lt;pre&gt;
def add(x, y):
    return x + y

print add(5, 3)    # prints 8
&lt;/pre&gt;


&lt;p&gt;In Prolog, you can do something similar by defining a rule where one of the variables in the rule (typically the last one) is its &amp;ldquo;output&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;
add(X, Y, Result) :- Result is X + Y.
&lt;/pre&gt;


&lt;p&gt;To actually evaluate this &amp;ldquo;function&amp;rdquo; with 5 and 3 you would ask the question &lt;code&gt;add(5, 3, Result)&lt;/code&gt; which would yield &lt;code&gt;Result = 8&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, don&amp;rsquo;t get trapped into the idea that such as rule always needs to be evaluated in one direction. In Prolog you have the additional power to ask what the &amp;ldquo;inputs&amp;rdquo; of the function has to be to yield an already-known &amp;ldquo;output&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;For example, you could ask the question &lt;code&gt;add(X, 3, 8)&lt;/code&gt; to deduce that &amp;ldquo;input&amp;rdquo; X must be 5.&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; You could even try asking &lt;code&gt;add(X, Y, 8)&lt;/code&gt; to find all values of X and Y that yield 8 as a result (although there are an infinite number of such combinations in this example).&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;This power to flip functions on their head is a unique quality of Prolog. (And it blows my mind.)&lt;/p&gt;

&lt;p&gt;Ultimately a rule specifies a set of relationships between its arguments. Thus arguments can be &amp;ldquo;inputs&amp;rdquo;, &amp;ldquo;outputs&amp;rdquo;, or even temporary variables (like accumulators).&lt;/p&gt;

&lt;h3&gt;Processing Recursive Data Structures&lt;/h3&gt;

&lt;p&gt;Processing recursive data structures such as lists and trees is mind bending&amp;hellip; For examples see:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.learnprolognow.org/lpnpage.php?pagetype=html&amp;amp;pageid=lpn-htmlse24&quot;&gt;LPN §6.1 &amp;ldquo;Append&amp;rdquo;&lt;/a&gt; and&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.learnprolognow.org/lpnpage.php?pagetype=html&amp;amp;pageid=lpn-htmlse25&quot;&gt;LPN §6.2 &amp;ldquo;Reversing a List&amp;rdquo;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Interactive Use (as a REPL)&lt;/h2&gt;

&lt;p&gt;It is possible to run Prolog in an interactive fashion by using the &lt;code&gt;assert&lt;/code&gt; special rule at runtime to define new statements (i.e. axioms and rules). And &lt;code&gt;listing&lt;/code&gt; will display the set of statements that have been defined. Finally &lt;code&gt;retract&lt;/code&gt; and &lt;code&gt;retractall&lt;/code&gt; can be used to undefine statements.&lt;/p&gt;

&lt;p&gt;These special rules, however, are not restricted to use in the interpreter &amp;ndash; they can also be used at runtime by rules in programs. For example memoization&lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;#fn:6&quot; rel=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; is a good use for dynamic calls to &lt;code&gt;assert&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Question Evaluation &lt;small&gt;(Unification, Backtracking)&lt;/small&gt;&lt;/h2&gt;

&lt;p&gt;When evaluating a question, Prolog takes the question expression and matches it against the axioms and rules in the input knowledge base. The algorithm used for matching is called &lt;em&gt;unification&lt;/em&gt;. While performing unification, Prolog makes guesses about what values should be assigned to each variable in the question expression. If it encounters a contradiction, it &lt;em&gt;backtracks&lt;/em&gt; to one of its previous guesses and revises the guess. This process is described graphically in &lt;a href=&quot;http://www.learnprolognow.org/lpnpage.php?pagetype=html&amp;amp;pageid=lpn-htmlse6&quot;&gt;LPN §2.2 &amp;ldquo;Proof Search&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Although Prolog is a declarative language, the precise behavior of evaluating queries depends on the order that rules and clauses are defined. In particular the performance of the same program can vary significantly depending on ordering. As another gotcha, if you define rules in a left-recursive fashion (as opposed to a right-recursive one), Prolog will go into an infinite loop when evaluating the rule.&lt;/p&gt;

&lt;p&gt;It is possible to debug (and step through) the evaluation of a question expression using the &lt;strong&gt;trace&lt;/strong&gt; command, which is described in &lt;a href=&quot;http://www.learnprolognow.org/lpnpage.php?pagetype=html&amp;amp;pageid=lpn-htmlse8&quot;&gt;LPN §2.4 &amp;ldquo;Practical Session&amp;rdquo;&lt;/a&gt;. This is useful for investigating performance issues.&lt;/p&gt;

&lt;h3&gt;Cuts&lt;/h3&gt;

&lt;p&gt;It is possible to optimize the execution of a Prolog rule by adding a &lt;strong&gt;cut&lt;/strong&gt; as a clause. This is written as a bang (&lt;code&gt;!&lt;/code&gt;). Unfortunately to use cuts effectively (and correctly), you have to understand the exact execution model used by Prolog. It is quite easy to unwittingly insert a cut that actually changes the semantics of the original rule. &lt;!-- LPN §10.1, §10.2 --&gt;&lt;/p&gt;

&lt;p&gt;There are even hacks you can do with cuts such as implementing &amp;ldquo;negation as failure&amp;rdquo; (&lt;code&gt;\+&lt;/code&gt;). But again you have to be very careful since cuts can change your knowledge base&amp;rsquo;s semantics. &lt;!-- LPN §10.3 --&gt;&lt;/p&gt;

&lt;h2&gt;Side Effects &amp;amp; I/O&lt;/h2&gt;

&lt;p&gt;Some built-in clauses trigger side effects when they are examined by the unification algorithm. Programs take advantage of such &amp;ldquo;impure predicates&amp;rdquo; to do I/O and other types of side-effecting work.&lt;/p&gt;

&lt;p&gt;For example asking the question &lt;code&gt;print('Hello')&lt;/code&gt; will print &lt;code&gt;Hello&lt;/code&gt; to the screen.&lt;sup id=&quot;fnref:7&quot;&gt;&lt;a href=&quot;#fn:7&quot; rel=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;To write to a file you might define:&lt;/p&gt;

&lt;pre&gt;
printfile(Filename, Text) :-
    open(Filename, write, Stream),
    write(Stream, Text), nl(Stream),
    close(Stream).
&lt;/pre&gt;


&lt;p&gt;And then pose the question &lt;code&gt;printfile('hogwarts.txt', 'Hogwarts')&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;During evaluation, the &lt;code&gt;printfile&lt;/code&gt; is rewritten to &lt;code&gt;open(...) AND write(...) AND nl(...) AND close(...)&lt;/code&gt;. Each of those subclauses is then each evaluated to &lt;code&gt;true&lt;/code&gt; (performing the associated side effect) and the overall clause becomes just &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;&lt;em&gt;References&lt;/em&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;LPN: &lt;a href=&quot;http://www.learnprolognow.org/lpnpage.php?pageid=online&quot;&gt;Learn Prolog Now!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;&lt;em&gt;Related Articles&lt;/em&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/articles/2013/01/29/unique-features-of-various-programming-languages/&quot;&gt;Unique Features of Various Programming Languages&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Describes several other programming languages and their unique features.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;When posing a question in the Prolog interpreter, you must include a trailing period at the end of the question.&lt;a href=&quot;#fnref:1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;The job of the Java bytecode verifier is to examine a compiled Java program and check whether it is well-structured and therefore (reasonably) safe for the Java virtual machine to execute. For example the verifier would reject a Java program containing a command to jump to an instruction location outside of the current method.&lt;a href=&quot;#fnref:2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:3&quot;&gt;
&lt;p&gt;See the &lt;a href=&quot;http://docs.oracle.com/javase/specs/jvms/se7/html/index.html&quot;&gt;Java Virtual Machine Specification&lt;/a&gt;. Particularly &amp;ldquo;Preface to the Java SE 7 Edition&amp;rdquo; and §4.10 &amp;ldquo;Verification of class Files&amp;rdquo;.&lt;a href=&quot;#fnref:3&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:4&quot;&gt;
&lt;p&gt;Unfortunately the &lt;code&gt;is&lt;/code&gt; clause in this example cannot be run &amp;ldquo;backwards&amp;rdquo;, so this particular question will fail. (I am not sure why this particular restriction on &lt;code&gt;is&lt;/code&gt; exists.)&lt;a href=&quot;#fnref:4&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:5&quot;&gt;
&lt;p&gt;A Prolog &lt;em&gt;program&lt;/em&gt; that wanted to collect all combinations of inputs in this fashion (as opposed to a user at the interpreter) would probably use a combination of the &lt;code&gt;findall&lt;/code&gt;, &lt;code&gt;bagof&lt;/code&gt;, and &lt;code&gt;setof&lt;/code&gt; special rules. See &lt;a href=&quot;http://www.learnprolognow.org/lpnpage.php?pagetype=html&amp;amp;pageid=lpn-htmlse49&quot;&gt;LPN §11.2 &amp;ldquo;Collecting Solutions&amp;rdquo;&lt;/a&gt; for more information.&lt;a href=&quot;#fnref:5&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:6&quot;&gt;
&lt;p&gt;Memoization is where a function that computes a value caches the result of the computation so that repeated invocations with the same input can immediately return the saved result. This can speed of performance in certain applications. See &lt;a href=&quot;http://www.learnprolognow.org/lpnpage.php?pagetype=html&amp;amp;pageid=lpn-htmlse48&quot;&gt;LPM §11.1 &amp;ldquo;Database Manipulation&amp;rdquo;&lt;/a&gt; for an example.&lt;a href=&quot;#fnref:6&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:7&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;'Hello'&lt;/code&gt; (with single quotes) is a variable, not a string. The string &lt;code&gt;&quot;Hello&quot;&lt;/code&gt; (with double quotes) is equivalent to a list of codepoints (&lt;code&gt;[72, 101, 108, 108, 111]&lt;/code&gt;).&lt;a href=&quot;#fnref:7&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Visual Guide to Programming Language Properties</title>
   <link href="http://dafoster.net/articles/2013/02/20/visual-guide-to-programming-language-properties/"/>
   <updated>2013-02-20T00:00:00-08:00</updated>
   <id>http://dafoster.net/articles/2013/02/20/visual-guide-to-programming-language-properties</id>
   <content type="html">&lt;p&gt;Here&amp;rsquo;s an interactive chart showing high-level properties of various programming languages.&lt;br/&gt;
You can filter the chart to only show the properties that your favorite language supports.&lt;/p&gt;

&lt;p&gt;Interesting observations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Some &lt;span class=&quot;property&quot;&gt;properties&lt;/span&gt; enable (but do not always imply) other &lt;span class=&quot;property&quot;&gt;properties&lt;/span&gt;, as shown by arrows.&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;property&quot;&gt;Properties&lt;/span&gt; result in both &lt;span class=&quot;benefit&quot;&gt;benefits&lt;/span&gt; and &lt;span class=&quot;detriment&quot;&gt;detriments&lt;/span&gt; to a language, as shown by arrows.&lt;/li&gt;
&lt;li&gt;Sometimes it is necessary for &lt;em&gt;multiple&lt;/em&gt; &lt;span class=&quot;property&quot;&gt;properties&lt;/span&gt; to be present for a particular &lt;span class=&quot;benefit&quot;&gt;benefit&lt;/span&gt; to
manifest, as shown by arrows interrupted by a vertical bar.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Type System&lt;/h2&gt;

&lt;ul class=&quot;nav nav-tabs&quot;&gt;
  &lt;li class=&quot;active&quot;&gt;
    &lt;a href=&quot;#type_system-ALL&quot; class=&quot;tab-header tab-header-ALL&quot; data-toggle=&quot;tab&quot;&gt;All&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;&quot;&gt;
    &lt;a href=&quot;#type_system-CPP&quot; class=&quot;tab-header tab-header-CPP&quot; data-toggle=&quot;tab&quot;&gt;C++&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;&quot;&gt;
    &lt;a href=&quot;#type_system-OBJC&quot; class=&quot;tab-header tab-header-OBJC&quot; data-toggle=&quot;tab&quot;&gt;Objective-C&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;&quot;&gt;
    &lt;a href=&quot;#type_system-JAVA&quot; class=&quot;tab-header tab-header-JAVA&quot; data-toggle=&quot;tab&quot;&gt;Java&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;&quot;&gt;
    &lt;a href=&quot;#type_system-HASKELL&quot; class=&quot;tab-header tab-header-HASKELL&quot; data-toggle=&quot;tab&quot;&gt;Haskell&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;&quot;&gt;
    &lt;a href=&quot;#type_system-PYTHON&quot; class=&quot;tab-header tab-header-PYTHON&quot; data-toggle=&quot;tab&quot;&gt;Python&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;&quot;&gt;
    &lt;a href=&quot;#type_system-RUBY&quot; class=&quot;tab-header tab-header-RUBY&quot; data-toggle=&quot;tab&quot;&gt;Ruby&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;&quot;&gt;
    &lt;a href=&quot;#type_system-LISP&quot; class=&quot;tab-header tab-header-LISP&quot; data-toggle=&quot;tab&quot;&gt;Lisp&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;tab-content&quot;&gt;
  &lt;img class=&quot;tab-pane active&quot; id=&quot;type_system-ALL&quot; src=&quot;/assets/2013/2013-02-20-visual-guide-to-programming-language-properties/type_system.ALL.gif&quot; /&gt;
  &lt;img class=&quot;tab-pane &quot; id=&quot;type_system-CPP&quot; src=&quot;/assets/2013/2013-02-20-visual-guide-to-programming-language-properties/type_system.CPP.gif&quot; /&gt;
  &lt;img class=&quot;tab-pane &quot; id=&quot;type_system-OBJC&quot; src=&quot;/assets/2013/2013-02-20-visual-guide-to-programming-language-properties/type_system.OBJC.gif&quot; /&gt;
  &lt;img class=&quot;tab-pane &quot; id=&quot;type_system-JAVA&quot; src=&quot;/assets/2013/2013-02-20-visual-guide-to-programming-language-properties/type_system.JAVA.gif&quot; /&gt;
  &lt;img class=&quot;tab-pane &quot; id=&quot;type_system-HASKELL&quot; src=&quot;/assets/2013/2013-02-20-visual-guide-to-programming-language-properties/type_system.HASKELL.gif&quot; /&gt;
  &lt;img class=&quot;tab-pane &quot; id=&quot;type_system-PYTHON&quot; src=&quot;/assets/2013/2013-02-20-visual-guide-to-programming-language-properties/type_system.PYTHON.gif&quot; /&gt;
  &lt;img class=&quot;tab-pane &quot; id=&quot;type_system-RUBY&quot; src=&quot;/assets/2013/2013-02-20-visual-guide-to-programming-language-properties/type_system.RUBY.gif&quot; /&gt;
  &lt;img class=&quot;tab-pane &quot; id=&quot;type_system-LISP&quot; src=&quot;/assets/2013/2013-02-20-visual-guide-to-programming-language-properties/type_system.LISP.gif&quot; /&gt;
&lt;/div&gt;




&lt;br/&gt;


&lt;p&gt;† &amp;ldquo;Programming with collections&amp;rdquo; is discussed in &lt;a href=&quot;/articles/2013/02/02/learnings-from-sicp/#lisp-vs-pascal-design-philosophies&quot;&gt;Lisp vs. Pascal Design Philosophies&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Resource Management&lt;/h2&gt;

&lt;ul class=&quot;nav nav-tabs&quot;&gt;
  &lt;li class=&quot;active&quot;&gt;
    &lt;a href=&quot;#resource_management-ALL&quot; class=&quot;tab-header tab-header-ALL&quot; data-toggle=&quot;tab&quot;&gt;All&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;&quot;&gt;
    &lt;a href=&quot;#resource_management-CPP&quot; class=&quot;tab-header tab-header-CPP&quot; data-toggle=&quot;tab&quot;&gt;C++&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;&quot;&gt;
    &lt;a href=&quot;#resource_management-OBJC&quot; class=&quot;tab-header tab-header-OBJC&quot; data-toggle=&quot;tab&quot;&gt;Objective-C&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;&quot;&gt;
    &lt;a href=&quot;#resource_management-JAVA&quot; class=&quot;tab-header tab-header-JAVA&quot; data-toggle=&quot;tab&quot;&gt;Java&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;&quot;&gt;
    &lt;a href=&quot;#resource_management-HASKELL&quot; class=&quot;tab-header tab-header-HASKELL&quot; data-toggle=&quot;tab&quot;&gt;Haskell&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;&quot;&gt;
    &lt;a href=&quot;#resource_management-PYTHON&quot; class=&quot;tab-header tab-header-PYTHON&quot; data-toggle=&quot;tab&quot;&gt;Python&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;&quot;&gt;
    &lt;a href=&quot;#resource_management-RUBY&quot; class=&quot;tab-header tab-header-RUBY&quot; data-toggle=&quot;tab&quot;&gt;Ruby&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;&quot;&gt;
    &lt;a href=&quot;#resource_management-LISP&quot; class=&quot;tab-header tab-header-LISP&quot; data-toggle=&quot;tab&quot;&gt;Lisp&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;tab-content&quot;&gt;
  &lt;img class=&quot;tab-pane active&quot; id=&quot;resource_management-ALL&quot; src=&quot;/assets/2013/2013-02-20-visual-guide-to-programming-language-properties/resource_management.ALL.gif&quot; /&gt;
  &lt;img class=&quot;tab-pane &quot; id=&quot;resource_management-CPP&quot; src=&quot;/assets/2013/2013-02-20-visual-guide-to-programming-language-properties/resource_management.CPP.gif&quot; /&gt;
  &lt;img class=&quot;tab-pane &quot; id=&quot;resource_management-OBJC&quot; src=&quot;/assets/2013/2013-02-20-visual-guide-to-programming-language-properties/resource_management.OBJC.gif&quot; /&gt;
  &lt;img class=&quot;tab-pane &quot; id=&quot;resource_management-JAVA&quot; src=&quot;/assets/2013/2013-02-20-visual-guide-to-programming-language-properties/resource_management.JAVA.gif&quot; /&gt;
  &lt;img class=&quot;tab-pane &quot; id=&quot;resource_management-HASKELL&quot; src=&quot;/assets/2013/2013-02-20-visual-guide-to-programming-language-properties/resource_management.HASKELL.gif&quot; /&gt;
  &lt;img class=&quot;tab-pane &quot; id=&quot;resource_management-PYTHON&quot; src=&quot;/assets/2013/2013-02-20-visual-guide-to-programming-language-properties/resource_management.PYTHON.gif&quot; /&gt;
  &lt;img class=&quot;tab-pane &quot; id=&quot;resource_management-RUBY&quot; src=&quot;/assets/2013/2013-02-20-visual-guide-to-programming-language-properties/resource_management.RUBY.gif&quot; /&gt;
  &lt;img class=&quot;tab-pane &quot; id=&quot;resource_management-LISP&quot; src=&quot;/assets/2013/2013-02-20-visual-guide-to-programming-language-properties/resource_management.LISP.gif&quot; /&gt;
&lt;/div&gt;




&lt;br/&gt;


&lt;p&gt;§ See also the idea of &lt;strong&gt;monadic regions&lt;/strong&gt; for block-scoped resource management.&lt;/p&gt;

&lt;p&gt;¶ Objective-C is the only known language that supports automatic reference counting.&lt;/p&gt;

&lt;h2&gt;Domain Specific Language Support&lt;/h2&gt;

&lt;ul class=&quot;nav nav-tabs&quot;&gt;
  &lt;li class=&quot;active&quot;&gt;
    &lt;a href=&quot;#dsl_support-ALL&quot; class=&quot;tab-header tab-header-ALL&quot; data-toggle=&quot;tab&quot;&gt;All&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;&quot;&gt;
    &lt;a href=&quot;#dsl_support-CPP&quot; class=&quot;tab-header tab-header-CPP&quot; data-toggle=&quot;tab&quot;&gt;C++&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;&quot;&gt;
    &lt;a href=&quot;#dsl_support-OBJC&quot; class=&quot;tab-header tab-header-OBJC&quot; data-toggle=&quot;tab&quot;&gt;Objective-C&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;&quot;&gt;
    &lt;a href=&quot;#dsl_support-JAVA&quot; class=&quot;tab-header tab-header-JAVA&quot; data-toggle=&quot;tab&quot;&gt;Java&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;&quot;&gt;
    &lt;a href=&quot;#dsl_support-HASKELL&quot; class=&quot;tab-header tab-header-HASKELL&quot; data-toggle=&quot;tab&quot;&gt;Haskell&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;&quot;&gt;
    &lt;a href=&quot;#dsl_support-PYTHON&quot; class=&quot;tab-header tab-header-PYTHON&quot; data-toggle=&quot;tab&quot;&gt;Python&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;&quot;&gt;
    &lt;a href=&quot;#dsl_support-RUBY&quot; class=&quot;tab-header tab-header-RUBY&quot; data-toggle=&quot;tab&quot;&gt;Ruby&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;&quot;&gt;
    &lt;a href=&quot;#dsl_support-LISP&quot; class=&quot;tab-header tab-header-LISP&quot; data-toggle=&quot;tab&quot;&gt;Lisp&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;tab-content&quot;&gt;
  &lt;img class=&quot;tab-pane active&quot; id=&quot;dsl_support-ALL&quot; src=&quot;/assets/2013/2013-02-20-visual-guide-to-programming-language-properties/dsl_support.ALL.gif&quot; /&gt;
  &lt;img class=&quot;tab-pane &quot; id=&quot;dsl_support-CPP&quot; src=&quot;/assets/2013/2013-02-20-visual-guide-to-programming-language-properties/dsl_support.CPP.gif&quot; /&gt;
  &lt;img class=&quot;tab-pane &quot; id=&quot;dsl_support-OBJC&quot; src=&quot;/assets/2013/2013-02-20-visual-guide-to-programming-language-properties/dsl_support.OBJC.gif&quot; /&gt;
  &lt;img class=&quot;tab-pane &quot; id=&quot;dsl_support-JAVA&quot; src=&quot;/assets/2013/2013-02-20-visual-guide-to-programming-language-properties/dsl_support.JAVA.gif&quot; /&gt;
  &lt;img class=&quot;tab-pane &quot; id=&quot;dsl_support-HASKELL&quot; src=&quot;/assets/2013/2013-02-20-visual-guide-to-programming-language-properties/dsl_support.HASKELL.gif&quot; /&gt;
  &lt;img class=&quot;tab-pane &quot; id=&quot;dsl_support-PYTHON&quot; src=&quot;/assets/2013/2013-02-20-visual-guide-to-programming-language-properties/dsl_support.PYTHON.gif&quot; /&gt;
  &lt;img class=&quot;tab-pane &quot; id=&quot;dsl_support-RUBY&quot; src=&quot;/assets/2013/2013-02-20-visual-guide-to-programming-language-properties/dsl_support.RUBY.gif&quot; /&gt;
  &lt;img class=&quot;tab-pane &quot; id=&quot;dsl_support-LISP&quot; src=&quot;/assets/2013/2013-02-20-visual-guide-to-programming-language-properties/dsl_support.LISP.gif&quot; /&gt;
&lt;/div&gt;




&lt;br/&gt;


&lt;p&gt;‡ Beyond the Lisp family, Prolog is the only other language I know of that is homoiconic.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;Its syntax is reasonably easy to read, unlike Lisp.&lt;/p&gt;

&lt;h2&gt;Tools&lt;/h2&gt;

&lt;ul class=&quot;nav nav-tabs&quot;&gt;
  &lt;li class=&quot;active&quot;&gt;
    &lt;a href=&quot;#tools-ALL&quot; class=&quot;tab-header tab-header-ALL&quot; data-toggle=&quot;tab&quot;&gt;All&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;&quot;&gt;
    &lt;a href=&quot;#tools-CPP&quot; class=&quot;tab-header tab-header-CPP&quot; data-toggle=&quot;tab&quot;&gt;C++&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;&quot;&gt;
    &lt;a href=&quot;#tools-OBJC&quot; class=&quot;tab-header tab-header-OBJC&quot; data-toggle=&quot;tab&quot;&gt;Objective-C&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;&quot;&gt;
    &lt;a href=&quot;#tools-JAVA&quot; class=&quot;tab-header tab-header-JAVA&quot; data-toggle=&quot;tab&quot;&gt;Java&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;&quot;&gt;
    &lt;a href=&quot;#tools-HASKELL&quot; class=&quot;tab-header tab-header-HASKELL&quot; data-toggle=&quot;tab&quot;&gt;Haskell&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;&quot;&gt;
    &lt;a href=&quot;#tools-PYTHON&quot; class=&quot;tab-header tab-header-PYTHON&quot; data-toggle=&quot;tab&quot;&gt;Python&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;&quot;&gt;
    &lt;a href=&quot;#tools-RUBY&quot; class=&quot;tab-header tab-header-RUBY&quot; data-toggle=&quot;tab&quot;&gt;Ruby&lt;/a&gt;
  &lt;/li&gt;
  &lt;li class=&quot;&quot;&gt;
    &lt;a href=&quot;#tools-LISP&quot; class=&quot;tab-header tab-header-LISP&quot; data-toggle=&quot;tab&quot;&gt;Lisp&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;tab-content&quot;&gt;
  &lt;img class=&quot;tab-pane active&quot; id=&quot;tools-ALL&quot; src=&quot;/assets/2013/2013-02-20-visual-guide-to-programming-language-properties/tools.ALL.gif&quot; /&gt;
  &lt;img class=&quot;tab-pane &quot; id=&quot;tools-CPP&quot; src=&quot;/assets/2013/2013-02-20-visual-guide-to-programming-language-properties/tools.CPP.gif&quot; /&gt;
  &lt;img class=&quot;tab-pane &quot; id=&quot;tools-OBJC&quot; src=&quot;/assets/2013/2013-02-20-visual-guide-to-programming-language-properties/tools.OBJC.gif&quot; /&gt;
  &lt;img class=&quot;tab-pane &quot; id=&quot;tools-JAVA&quot; src=&quot;/assets/2013/2013-02-20-visual-guide-to-programming-language-properties/tools.JAVA.gif&quot; /&gt;
  &lt;img class=&quot;tab-pane &quot; id=&quot;tools-HASKELL&quot; src=&quot;/assets/2013/2013-02-20-visual-guide-to-programming-language-properties/tools.HASKELL.gif&quot; /&gt;
  &lt;img class=&quot;tab-pane &quot; id=&quot;tools-PYTHON&quot; src=&quot;/assets/2013/2013-02-20-visual-guide-to-programming-language-properties/tools.PYTHON.gif&quot; /&gt;
  &lt;img class=&quot;tab-pane &quot; id=&quot;tools-RUBY&quot; src=&quot;/assets/2013/2013-02-20-visual-guide-to-programming-language-properties/tools.RUBY.gif&quot; /&gt;
  &lt;img class=&quot;tab-pane &quot; id=&quot;tools-LISP&quot; src=&quot;/assets/2013/2013-02-20-visual-guide-to-programming-language-properties/tools.LISP.gif&quot; /&gt;
&lt;/div&gt;




&lt;div class=&quot;accordion&quot; id=&quot;tool-details&quot;&gt;
  &lt;div class=&quot;accordion-group&quot;&gt;
    &lt;div class=&quot;accordion-heading&quot;&gt;
      &lt;a class=&quot;accordion-toggle&quot; data-toggle=&quot;collapse&quot; data-parent=&quot;#tool-details&quot; href=&quot;#collapseOne&quot;&gt;
        &lt;span class=&quot;expand-symbol&quot;&gt;&lt;/span&gt;Tool Details
      &lt;/a&gt;
    &lt;/div&gt;
    &lt;div id=&quot;collapseOne&quot; class=&quot;accordion-body collapse&quot;&gt;
      &lt;div class=&quot;accordion-inner&quot;&gt;
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&amp;nbsp;               &lt;/th&gt;
&lt;th&gt; C++ &lt;/th&gt;
&lt;th&gt; ObjC        &lt;/th&gt;
&lt;th&gt; Java  &lt;/th&gt;
&lt;th&gt; Haskell &lt;/th&gt;
&lt;th&gt; Python      &lt;/th&gt;
&lt;th&gt; Ruby       &lt;/th&gt;
&lt;th&gt; Lisp&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Code coverage        &lt;/td&gt;
&lt;td&gt; &amp;ndash;   &lt;/td&gt;
&lt;td&gt; &amp;ndash;           &lt;/td&gt;
&lt;td&gt; EMMA  &lt;/td&gt;
&lt;td&gt; hpc     &lt;/td&gt;
&lt;td&gt; coverage.py &lt;/td&gt;
&lt;td&gt; SimpleCov  &lt;/td&gt;
&lt;td&gt; &lt;em&gt;varies&lt;/em&gt; &lt;!-- ex: code-coverage --&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Unit test automation &lt;/td&gt;
&lt;td&gt; &amp;ndash;   &lt;/td&gt;
&lt;td&gt; &amp;ndash;           &lt;/td&gt;
&lt;td&gt; JUnit &lt;/td&gt;
&lt;td&gt; HUnit   &lt;/td&gt;
&lt;td&gt; unittest    &lt;/td&gt;
&lt;td&gt; &lt;em&gt;many&lt;/em&gt;     &lt;/td&gt;
&lt;td&gt; &lt;em&gt;varies&lt;/em&gt; &lt;!-- ex: RackUnit --&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Package manager      &lt;/td&gt;
&lt;td&gt; &amp;ndash;   &lt;/td&gt;
&lt;td&gt; &amp;ndash;           &lt;/td&gt;
&lt;td&gt; &amp;ndash;     &lt;/td&gt;
&lt;td&gt; Cabal   &lt;/td&gt;
&lt;td&gt; pip         &lt;/td&gt;
&lt;td&gt; gem        &lt;/td&gt;
&lt;td&gt; &lt;em&gt;varies&lt;/em&gt; &lt;!-- ex: PLaneT --&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Environment isolater &lt;/td&gt;
&lt;td&gt; &amp;ndash;   &lt;/td&gt;
&lt;td&gt; &amp;ndash;           &lt;/td&gt;
&lt;td&gt; &amp;ndash;     &lt;/td&gt;
&lt;td&gt; &amp;ndash;       &lt;/td&gt;
&lt;td&gt; virtualenv  &lt;/td&gt;
&lt;td&gt; rvm        &lt;/td&gt;
&lt;td&gt; &lt;em&gt;varies&lt;/em&gt; &lt;!-- no known example --&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;&lt;em&gt;Related Articles&lt;/em&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/articles/2013/01/29/unique-features-of-various-programming-languages/&quot;&gt;Unique Features of Various Programming Languages&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Discusses several programming languages and their unique features.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Describes some &lt;span class=&quot;property&quot;&gt;properties&lt;/span&gt; mentioned in this article in more detail.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>RDiscount 2.0.7 released!</title>
   <link href="http://dafoster.net/articles/2013/02/02/rdiscount-2.0.7-released/"/>
   <updated>2013-02-02T00:00:00-08:00</updated>
   <id>http://dafoster.net/articles/2013/02/02/rdiscount-2.0.7-released</id>
   <content type="html">&lt;p&gt;It has been just over two years since RDiscount 1.6.8 (the previous version) was posted.&lt;br/&gt;
As the new maintainer, I intend to provide updates a bit more frequently. :&amp;ndash;)&lt;/p&gt;

&lt;p&gt;Update to the latest version with:&lt;/p&gt;

&lt;pre&gt;gem update rdiscount&lt;/pre&gt;


&lt;h2&gt;What&amp;rsquo;s New?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://michelf.ca/projects/php-markdown/extra/#footnotes&quot;&gt;Footnotes&lt;/a&gt; &amp;ndash; from &lt;em&gt;PHP Markdown Extra&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Superscript tweaks

&lt;ul&gt;
&lt;li&gt;Be more picky about what comes before a ^ if we’re superscripting.&lt;/li&gt;
&lt;li&gt;Modify superscript grabbing so that it grabs parenthetical and alphanumeric blocks.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other bug fixes

&lt;ul&gt;
&lt;li&gt;Table-of-contents generation will no longer crash for header items containing links.&lt;/li&gt;
&lt;li&gt;Adjacent new-style [link]s are no longer incorrectly combined.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;What&amp;rsquo;s Next?&lt;/h2&gt;

&lt;p&gt;RDiscount 2.1.5 will be the next release of RDiscount. Planned features include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fenced code blocks

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://github.github.com/github-flavored-markdown/&quot;&gt;backtick-delimited&lt;/a&gt; &amp;ndash; from &lt;em&gt;GitHub Flavored Markdown&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://michelf.ca/projects/php-markdown/extra/#fenced-code-blocks&quot;&gt;tilde-delimited&lt;/a&gt; &amp;ndash; from &lt;em&gt;PHP Markdown Extra&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Who am I?&lt;/h2&gt;

&lt;p&gt;I should also introduce myself: I am &lt;a href=&quot;/about/&quot;&gt;David Foster&lt;/a&gt;, the new maintainer for RDiscount.&lt;/p&gt;

&lt;p&gt;Since I am using RDiscount on my personal website, you can expect continued updates as major new features are introduced in the underlying &lt;a href=&quot;http://www.pell.portland.or.us/~orc/Code/discount/&quot;&gt;Discount&lt;/a&gt; library.&lt;/p&gt;

&lt;h3&gt;&lt;em&gt;Related Articles&lt;/em&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/articles/2012/12/16/why-i-no-longer-use-drupal/&quot;&gt;Why I no longer use Drupal&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Why Jekyll (and not Drupal) is awesome for making a personal website or blog.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Jekyll can use RDiscount for Markdown rendering.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Learnings from SICP (and Lisp)</title>
   <link href="http://dafoster.net/articles/2013/02/02/learnings-from-sicp/"/>
   <updated>2013-02-02T00:00:00-08:00</updated>
   <id>http://dafoster.net/articles/2013/02/02/learnings-from-sicp</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/2013/sicp_cover.jpg&quot;
  alt=&quot;Cover of The Structure and Interpretation of Computer Programs&quot;
  style=&quot;float: right;&quot;
  width=&quot;170&quot; height=&quot;246&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Recently I took the liberty of reading one of the defining books in the domain of computer science: &lt;a href=&quot;http://mitpress.mit.edu/sicp/&quot;&gt;The Structure and Interpretation of Computer Programs&lt;/a&gt;, often abbreviated as SICP.&lt;/p&gt;

&lt;p&gt;SICP is the computer science textbook given to undergraduates at MIT. It serves as an advanced text on software design and as an introductory text for the Lisp programming language.&lt;/p&gt;

&lt;p&gt;Here are some interesting things I learned:&lt;/p&gt;

&lt;div class=&quot;toc&quot;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;#role-of-programming-languages&quot;&gt;Role of Programming Languages&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#abstract-data-types&quot;&gt;Abstract Data Types&lt;/a&gt;&lt;/li&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#lisp-vs-pascal-design-philosophies&quot;&gt;Lisp vs. Pascal Design Philosophies&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#polymorphism&quot;&gt;Polymorphism&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#cross-type-operations&quot;&gt;Cross-Type Operations&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;li&gt;&lt;a href=&quot;#assignments-mutable-state-and-side-effects&quot;&gt;Assignments, Mutable State, and Side Effects&lt;/a&gt;&lt;/li&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#lazy-evaluation&quot;&gt;Lazy Evaluation&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;li&gt;&lt;a href=&quot;#declarative-languages&quot;&gt;Declarative Languages&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a id=&quot;role-of-programming-languages&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Role of Programming Languages&lt;/h2&gt;

&lt;p&gt;Languages should:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;provide the means for &lt;strong&gt;combining simple ideas to form complex ideas&lt;/strong&gt;,&lt;/li&gt;
&lt;li&gt;provide the means for &lt;strong&gt;abstracting units of computation&lt;/strong&gt;, and&lt;/li&gt;
&lt;li&gt;serve as a framework within which we &lt;strong&gt;organize our ideas about processes&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Units of computation can be abstracted in several forms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;procedure&lt;/strong&gt; &amp;ndash; &lt;em&gt;Assigns names to common patterns, allowing you to work in terms of the named abstractions directly.&lt;/em&gt;

&lt;ul&gt;
&lt;li&gt;AKA function, method&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;abstract data type&lt;/strong&gt; &amp;ndash; &lt;em&gt;Allows the choice of representation (i.e. the implementation) to vary separately from the API (i.e. the interface).&lt;/em&gt;&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;

&lt;ul&gt;
&lt;li&gt;Built-in language support is often provided in the form of &lt;strong&gt;classes&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;See also: LISP constructors

&lt;ul&gt;
&lt;li&gt;AKA &lt;strong&gt;constructor&lt;/strong&gt; or &lt;strong&gt;static factory method&lt;/strong&gt; in other languages&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;See also: LISP selectors

&lt;ul&gt;
&lt;li&gt;AKA &lt;strong&gt;accessors&lt;/strong&gt;, mutators, or &lt;strong&gt;properties&lt;/strong&gt; in other languages&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;module&lt;/strong&gt;&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; &amp;ndash; &lt;em&gt;Groups several procedures and data types into a namespace independent from other modules.&lt;/em&gt;

&lt;ul&gt;
&lt;li&gt;AKA package (Java), namespace (C++), module (Python)&lt;/li&gt;
&lt;li&gt;Languages that don&amp;rsquo;t have built-in support for this concept typically use prefixes to create de-facto namespaces. (C, Objective-C, PHP &amp;lt; 5.3.0)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;assembly&lt;/strong&gt; &amp;ndash; &lt;em&gt;Groups several modules together in a single versioned &lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; package. Assemblies can depend on other assemblies, often from separate vendors.&lt;/em&gt;

&lt;ul&gt;
&lt;li&gt;AKA &lt;strong&gt;shared library&lt;/strong&gt; (C, C++), gem (Ruby), egg (Python)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;abstract-data-types&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Abstract Data Types&lt;/h2&gt;

&lt;p&gt;&lt;a id=&quot;lisp-vs-pascal-design-philosophies&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Lisp vs. Pascal Design Philosophies&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;For you youngin&amp;rsquo;s that have never used Pascal, just replace &amp;ldquo;Pascal&amp;rdquo; with &amp;ldquo;Java&amp;rdquo; in this section and you should get the right idea.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Two design philosophies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Lisp-school&lt;/strong&gt;: Create abstract data types by combining a &lt;em&gt;small&lt;/em&gt; set of general-purpose data types (particularly collections). These complex structures can then be manipulated using operations on these general-purpose types.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&amp;ldquo;Lisp is for building organisms -­ imposing, breathtaking, dynamic structures built by squads fitting fluctuating myriads of simpler organisms into place.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&amp;ldquo;Lisp programs inflate libraries with functions whose utility transcends the application that produced them.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pascal-school&lt;/strong&gt;: Create &lt;em&gt;many&lt;/em&gt; special-purpose data types (i.e. classes) and specialized operations to manipulate them.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&amp;ldquo;Pascal is for building pyramids -­ imposing, breathtaking, static structures built by armies pushing heavy blocks into place.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&amp;ldquo;In Pascal the plethora of declarable data structures induces a specialization within functions that inhibits and penalizes casual cooperation.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Roughly speaking, I think of the Lisp philosophy as &lt;strong&gt;programming with collections&lt;/strong&gt; and the Pascal philosophy as &lt;strong&gt;programming with classes&lt;/strong&gt;.&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h4&gt;Usage&lt;/h4&gt;

&lt;p&gt;The Pascal philosophy has won out in most statically typed languages such as C++ and Java, and in languages with poor (or nonexistent) built-in collections.&lt;/p&gt;

&lt;p&gt;The Lisp philosophy is more common in dynamically typed languages that lack built-in support for classes, such as Lisp itself and JavaScript.&lt;/p&gt;

&lt;p&gt;A hybrid approach (using both philosophies) is seen in languages that are dynamically typed, have built-in collections, and have built-in classes, such as Python and Ruby.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;polymorphism&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Polymorphism&lt;/h3&gt;

&lt;p&gt;Polymorphism is where multiple abstract data types implement a common &lt;em&gt;interface&lt;/em&gt;, which is typically defined as a series of methods that can be called on all implementing types.&lt;/p&gt;

&lt;p&gt;This allows client code, when given an object known only to implement a particular interface, to invoke interface methods on the object and end up calling the correct implementation of that method depending on the runtime type of the object.&lt;/p&gt;

&lt;h4&gt;Implementation Strategies&lt;/h4&gt;

&lt;p&gt;Polymorphism can be implemented in several different ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Switch on Typecode&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Easiest to implement. Hardest to maintain.&lt;/li&gt;
&lt;li&gt;Treated as an anti-pattern in many OO languages.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Virtual Lookup Tables&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;AKA &amp;ldquo;data-directed programming&amp;rdquo; (in SICP) or v-tables (C++)&lt;/li&gt;
&lt;li&gt;Default implementation strategy for most OO languages.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Message Passing&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Most flexible.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Many languages provide a &lt;em&gt;default implementation strategy&lt;/em&gt; as a language construct. For example C++ and Java use virtual lookup tables. Smalltalk and Objective-C use message passing. C doesn&amp;rsquo;t give you anything for free, so you have to roll your own polymorphism.&lt;/p&gt;

&lt;h4&gt;Tradeoffs&lt;/h4&gt;

&lt;p&gt;These implementation strategies for polymorphism have some tradeoffs, which are worth knowing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Virtual lookup tables are restricted in that &lt;em&gt;the total set of operations on the abstract data type must be known in advance&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Message passing, on the other hand, can be made more flexible:

&lt;ul&gt;
&lt;li&gt;Implementing data types may choose to support more operations than the standard set on the interface.&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Heck, individual &lt;em&gt;instances&lt;/em&gt; can choose to support more operations than the standard set.

&lt;ul&gt;
&lt;li&gt;In such cases, you would want to interrogate (i.e. reflect on) an individual instance to determine what operations (i.e. messages) it understands/supports.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;cross-type-operations&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Cross-Type Operations&lt;/h3&gt;

&lt;p&gt;Introducing &lt;strong&gt;cross-type operations&lt;/strong&gt;, such as &lt;code&gt;add(Integer, Complex)&lt;/code&gt;, is a very tricky design issue.&lt;/p&gt;

&lt;p&gt;Having explicit functions that operate on all combinations of types is possible but highly verbose. With &lt;strong&gt;n&lt;/strong&gt; types and &lt;strong&gt;m&lt;/strong&gt; operations, you need &lt;strong&gt;n*m&lt;/strong&gt; functions to implement all combinations. Impractical.&lt;/p&gt;

&lt;p&gt;Another strategy is to use &lt;em&gt;coercion&lt;/em&gt; to convert a value from one type to another. So instead of defining &lt;code&gt;add(Integer, Complex)&lt;/code&gt;, just define &lt;code&gt;convertToComplex(Integer) : Complex&lt;/code&gt;, and use the existing &lt;code&gt;add(Complex, Complex)&lt;/code&gt;. To convert between all types requires at least &lt;strong&gt;n&lt;/strong&gt; but no more than &lt;strong&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/strong&gt; conversion functions.&lt;/p&gt;

&lt;p&gt;Many programming languages have built-in facilities to automatically coerce types. For some languages (like JavaScript or PHP) these coersion rules are quite complex (and error-prone). Other languages (like ML) ban implicit coercion entirely.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Java only has coercion for built-in types.&lt;/li&gt;
&lt;li&gt;C++ lets the datatype designer choose (via &lt;code&gt;implicit&lt;/code&gt; or explicit one-argument constructors).&lt;/li&gt;
&lt;li&gt;Scala relies on implicit coercion a lot to enable foreign methods to be introduced on types.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;One wrinkle is that these conversion functions might introduce a loss in precision. For example not every integer can be represented as double of exactly the same value.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;assignments-mutable-state-and-side-effects&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Assignments, Mutable State, and Side Effects&lt;/h2&gt;

&lt;p&gt;Introducing assignment creates lots of complications. In particular &lt;em&gt;referential transparency&lt;/em&gt; is lost. Optimizations related to reordering and coalescing expressions need to be a lot more careful. Static reasoning of various kinds is impaired.&lt;/p&gt;

&lt;p&gt;To reduce bugs it is best to minimize the use of mutation by using immutable objects whenever possible.&lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;#fn:6&quot; rel=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Haskell takes a very aggressive stance against assignments, mutable state, and other side effects: they are banned by default. However Haskell does allow side effects within the context of a &lt;strong&gt;monad&lt;/strong&gt;. This is a special construct unique to Haskell (so far as I know).&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;lazy-evaluation&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Lazy Evaluation&lt;/h3&gt;

&lt;p&gt;Normally expressions are evaluated immediately, in the order that they occur in code. &lt;strong&gt;Lazy evaluation&lt;/strong&gt; changes this behavior such that expressions are only evaluated when some primitive operation (like print or add) requires the value of the expression. Until then the unevaluated expression is passed around (as a &amp;ldquo;thunk&amp;rdquo;).&lt;/p&gt;

&lt;p&gt;Lazy evaluation enables that creation of &lt;strong&gt;lazy data structures&lt;/strong&gt;, which is a useful performance optimization in some contexts.&lt;/p&gt;

&lt;p&gt;Unrestricted mutation and lazy evaluation do not mix well in programming languages. Since unrestricted mutation is very common in mainstream programming languages, it is quite rare to be in an environment that supports lazy evaluation. Haskell is one of the few.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;declarative-languages&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Declarative Languages&lt;/h2&gt;

&lt;p&gt;Logic programming languages are at the far declarative end of the
imperative-declarative spectrum. They can be used to deduce answers
from a set of initial set of declarative statements.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/articles/2013/02/25/notes-on-prolog/&quot;&gt;Prolog&lt;/a&gt; is the best-known example of a logic programming language.&lt;/p&gt;

&lt;p&gt;Query systems for databases are a type of logic programming language.&lt;/p&gt;

&lt;p&gt;A &amp;ldquo;query&amp;rdquo; (i.e. an expression in the language) is transformed into a
&amp;ldquo;query plan&amp;rdquo; (i.e. a specific set of steps to follow) by a query planner. The implemented of these planners is quite complex.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So those are a few interesting things I learned from reading SICP. Taking notes while reading made it a lot easier for me to remember the content. You might try it when reading a technical book with a lot of new concepts.&lt;/p&gt;

&lt;h3&gt;&lt;em&gt;Related Articles&lt;/em&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/articles/2013/03/01/notes-on-racket/&quot;&gt;Notes on Racket&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Describes Racket, a dialect of Lisp with batteries included.&lt;/em&gt;&lt;br/&gt;
&lt;em&gt;Useful for implementing other languages and creating cross-platform GUI programs.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/articles/2013/01/29/unique-features-of-various-programming-languages/&quot;&gt;Unique Features of Various Programming Languages&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Discusses several programming languages and their unique features.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/articles/2013/02/25/notes-on-prolog/&quot;&gt;Notes on Prolog&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Describes the Prolog language in more detail.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;For example, complex numbers can be expressed in rectangular (a + b&lt;em&gt;i&lt;/em&gt;) or polar form (r*cos(𝜽)). &amp;mdash; Some representations are better than others for different operations. Adding works better in rectangular form. Multiplying works better in polar form.&lt;a href=&quot;#fnref:1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;SICP does not mention the notion of a &lt;em&gt;module&lt;/em&gt; or an &lt;em&gt;assembly&lt;/em&gt;, however these are common higher-level units for abstracting computation in languages other than Lisp.&lt;a href=&quot;#fnref:2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:3&quot;&gt;
&lt;p&gt;Versioning assemblies effectively is a challenging topic onto itself. If done without care you get so-called &amp;ldquo;dependency hell&amp;rdquo;. Just getting a consistent version numbering scheme can be tricky. One popular versioning scheme is codified as &lt;a href=&quot;http://semver.org&quot;&gt;Semantic Versioning&lt;/a&gt;.&lt;a href=&quot;#fnref:3&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:4&quot;&gt;
&lt;p&gt;In my opinion, a language that supports neither first-class collections nor first-class classes is non-viable for large scale general purpose software development. C, Assembly, and Fortran fall into this category.&lt;a href=&quot;#fnref:4&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:5&quot;&gt;
&lt;p&gt;For example, the Linux virtual filesystem, which is implemented in message-passing style, has a common set of operations that all filesystems are expected to support (ex: &lt;code&gt;unlink&lt;/code&gt;). However individual filesystems may support additional operations: For example the HFS+ filesystem on Mac OS X additionally supports a &lt;code&gt;delete&lt;/code&gt; operation, which has slightly different semantics than the standard &lt;code&gt;unlink&lt;/code&gt; operation.&lt;a href=&quot;#fnref:5&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:6&quot;&gt;
&lt;p&gt;A common case where eliminating mutation may &lt;em&gt;not&lt;/em&gt; be practical is when defining and working with large data structures that need many small updates made to them over time. If such a structure were made immutable, there would be a large performance penalty for recopying the entire structure whenever a small change needed to be made.&lt;a href=&quot;#fnref:6&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Unique Features of Various Programming Languages</title>
   <link href="http://dafoster.net/articles/2013/01/29/unique-features-of-various-programming-languages/"/>
   <updated>2013-01-29T00:00:00-08:00</updated>
   <id>http://dafoster.net/articles/2013/01/29/unique-features-of-various-programming-languages</id>
   <content type="html">&lt;blockquote&gt;
  A language that doesn't affect the way you think about programming, is not worth knowing.&lt;br/&gt;
  &lt;br/&gt;
  &amp;ndash; &lt;a href=&quot;http://www-pu.informatik.uni-tuebingen.de/users/klaeren/epigrams.html&quot;&gt;Alan Perlis&lt;/a&gt;
&lt;/blockquote&gt;


&lt;p&gt;I like learning new languages to get myself to think about problems in different ways.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a list of a few well-known languages I&amp;rsquo;ve worked with and some of the more interesting features I&amp;rsquo;ve encountered:&lt;/p&gt;

&lt;h3&gt;C&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Undefined behavior&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The idea that a language specification would explicitly specify certain constructs as having undefined behavior is interesting. Most specifications leave things undefined by omission, not commission.&lt;/li&gt;
&lt;li&gt;Although this allows various compiler optimizations, many developers rely on their particular compiler&amp;rsquo;s implementation of undefined behavior without even realizing it.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Java&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Objects are the primary unit of composition&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;There are no standalone functions.&lt;/li&gt;
&lt;li&gt;Design Patterns can be used to describe high level object coordination patterns.&lt;/li&gt;
&lt;li&gt;However sometimes the community&amp;rsquo;s focus on objects can be a bit extreme&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Checked exceptions&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Great when used &lt;em&gt;sparingly&lt;/em&gt;, as it forces the caller to handle expected error conditions.

&lt;ul&gt;
&lt;li&gt;I do think that it was a usability error to make &lt;code&gt;Exception&lt;/code&gt; checked and &lt;code&gt;RuntimeException&lt;/code&gt; unchecked. Rather it should be &lt;code&gt;Exception&lt;/code&gt; that is &lt;em&gt;unchecked&lt;/em&gt; and a new &lt;code&gt;CheckedException&lt;/code&gt; should be the base for all checked exceptions. This makes it clear that &lt;em&gt;unchecked&lt;/em&gt; exceptions should be the default.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Managing checked exceptions &lt;em&gt;correctly&lt;/em&gt; is quite difficult. &lt;!-- TODO: ARTICLE-IDEA --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unicode strings&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Tons of other languages use &amp;ldquo;bytestrings&amp;rdquo; as the main string type which causes all kinds of problems when working with international characters. &lt;!-- TODO: ARTICLE-IDEA --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentation focus&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Every library is expected to have JavaDoc documentation, which is generated from documentation comments in the source&lt;/li&gt;
&lt;li&gt;This is really powerful, since it makes it easy for developers to write documentation, and to do so at the same time the implementation is coded, when the desired behavior is most fresh in the mind.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compatibility focus&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;I have never seen a community so focused on maintaining backward compatibility. I can&amp;rsquo;t think of a single deprecated method in the Java library that was actually deleted.&lt;/li&gt;
&lt;li&gt;Even the Java Language Specification has an entire chapter devoted to &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se5.0/html/binaryComp.html&quot;&gt;binary compatibility&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;This focus may be partially attributable to the early mantra of &lt;a href=&quot;http://en.wikipedia.org/wiki/Write_once,_run_anywhere&quot;&gt;Write once, run anywhere&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Garbage Collection&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Being freed from the confines of manual memory management makes it a ton easier to focus on more important things.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;C&amp;#35;&lt;/h3&gt;

&lt;p&gt;Very similar to Java.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Assemblies&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;This is a level of encapsulation above the typical namespaces or modules in most languages. Assemblies are similar to the idea of static/dynamic libraries in C or JAR files in Java.&lt;/li&gt;
&lt;li&gt;Notably, you can mark members as &lt;code&gt;internal&lt;/code&gt;, which makes them public within the same assembly, but private to everybody outside the assembly. This is quite useful.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cross-language compatibility is first-class&lt;/strong&gt; (not just for C)

&lt;ul&gt;
&lt;li&gt;C# runs in the Common Language Runtime, which was designed from the beginning to support interoperability between languages.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Properties are first-class&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;No longer need to write explicit getter and (optional) setter methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Listeners are first-class&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Classes can declare an &lt;em&gt;event&lt;/em&gt; &lt;code&gt;Foo&lt;/code&gt; with &lt;code&gt;addFooListener&lt;/code&gt; and &lt;code&gt;removeFooListener&lt;/code&gt; functionality built in.&lt;/li&gt;
&lt;li&gt;Unfortunately the implementation has some annoyances&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Foreign Methods&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; are first-class&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;C# calls these &lt;em&gt;extension methods&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Partial Classes&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Allows a class&amp;rsquo;s members to be defined in multiple files.&lt;/li&gt;
&lt;li&gt;Useful to add functionality to a generated class (for example, from a parser generator) without those modifications getting lost when the class is next regenerated.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Python&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Indentation is significant&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Everyone notices this pretty fast.&lt;/li&gt;
&lt;li&gt;Overall I think requiring correct indentation is a Good Thing™, as it contributes directly to &lt;em&gt;readable&lt;/em&gt; code.&lt;/li&gt;
&lt;li&gt;However this makes lambda expressions much less powerful than in other languages, since you can&amp;rsquo;t easily nest statements inside a lambda expression without explicit braces (or similar delimiters).&lt;/li&gt;
&lt;li&gt;Another side effect of having significant indentation is that the choice of tabs vs. spaces really matters. If you mix them, your program probably won&amp;rsquo;t run.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interactive interpreter (REPL)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Amazingly useful for prototyping quickly, running experiments, and learning the language.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Collections are first class&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;You can type &lt;code&gt;[1,2,3]&lt;/code&gt; to get a list, &lt;code&gt;{'key': 'value'}&lt;/code&gt; to get a dictionary, and &lt;code&gt;{1,2,3}&lt;/code&gt; to get a set. So much faster than &lt;code&gt;new ArrayList&amp;lt;Integer&amp;gt;(...)&lt;/code&gt;, &lt;code&gt;new HashMap&amp;lt;Integer&amp;gt;(...)&lt;/code&gt;, or &lt;code&gt;new HashSet&amp;lt;Integer&amp;gt;(...)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Functions are first class&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;You can declare them as literals, pass them around, and create higher-order functions that take functions as parameters.&lt;/li&gt;
&lt;li&gt;Functions can also live on their own without an enclosing class, in contrast to Java. This is often the simplest approach for a given implementation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ldquo;Magic&amp;rdquo; marked explicitly&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Anything &amp;ldquo;magic&amp;rdquo; that the language treats specially has names surrounded by double underscores.&lt;/li&gt;
&lt;li&gt;For example:

&lt;ul&gt;
&lt;li&gt;An object&amp;rsquo;s constructor is called &lt;code&gt;__init__&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The method implementing an operator overload for plus is called &lt;code&gt;__add__&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A class&amp;rsquo;s metaclass is held by the &lt;code&gt;__metaclass__&lt;/code&gt; field.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generators&lt;/strong&gt; and &lt;strong&gt;Coroutines&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Generators enable straightforward &lt;em&gt;pulling&lt;/em&gt; of values from a complex data source (like a parsed data structure).&lt;/li&gt;
&lt;li&gt;Coroutines enable straightforward &lt;em&gt;pushing&lt;/em&gt; of values to a complex data sink.&lt;/li&gt;
&lt;li&gt;Python calls both constructs a &lt;em&gt;generator&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;JavaScript&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;No blocking I/O&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;All I/O is non-blocking and asynchronous. This results in heavy use of &lt;a href=&quot;http://en.wikipedia.org/wiki/Continuation-passing_style&quot;&gt;continuation passing style&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Successful despite huge flaws&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Ease of deployment and ubiquity (i.e. business considerations) trump ease of use. (PHP also wins for the same reason.)&lt;/li&gt;
&lt;li&gt;A few flaws:

&lt;ul&gt;
&lt;li&gt;Everything is in the one global namespace.&lt;/li&gt;
&lt;li&gt;No user-defined namespaces, modules, or importing of other files.&lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;#fn:6&quot; rel=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;No built-in facility for classes.&lt;sup id=&quot;fnref:7&quot;&gt;&lt;a href=&quot;#fn:7&quot; rel=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Bizarre loose semantics for &lt;code&gt;==&lt;/code&gt;.&lt;sup id=&quot;fnref:8&quot;&gt;&lt;a href=&quot;#fn:8&quot; rel=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Multiple illegal value sentinels: &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;.&lt;sup id=&quot;fnref:9&quot;&gt;&lt;a href=&quot;#fn:9&quot; rel=&quot;footnote&quot;&gt;9&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JSON (JavaScript Object Notation)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;A fantastically compact, readable, and portable notation for representing all kinds of data structures. Great for data interchange.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Haskell&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Lazy evaluation&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Expressions are only evaluated when some primitive operation (like &lt;code&gt;print&lt;/code&gt; or &lt;code&gt;add&lt;/code&gt;) requires the value of the expression.&lt;/li&gt;
&lt;li&gt;Allows you to define your own control flow operators.&lt;sup id=&quot;fnref:10&quot;&gt;&lt;a href=&quot;#fn:10&quot; rel=&quot;footnote&quot;&gt;10&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Allows you to extract complex expressions without fear of introducing a performance hit (since the expression will only actually be evaluated if it is needed).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Side effects banned by default&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Mutation of data structures and I/O, both of which have order-sensitive side effects, are not allowed except within the confines of &lt;strong&gt;monad&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;monad&lt;/strong&gt; is a construct that explicitly controls evaluation order, in contrast to the usual unpredictable lazy evaluation behavior.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;null&lt;/code&gt; banned by default.&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Unlike many languages, there is no special &lt;code&gt;null&lt;/code&gt; value in Haskell that can be substituted anywhere.&lt;/li&gt;
&lt;li&gt;Instead if a function wants to return a value of type &lt;code&gt;T&lt;/code&gt; or null, you would declare the function as returning type &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;, which could either have the value &lt;code&gt;Some(tValue)&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt;. When declared in this way, callers are &lt;em&gt;required&lt;/em&gt; to handle both possibilies.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type inference (+ static typing)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The benefits of static typing without the need to specify the types for everything?&lt;br/&gt;
Count me in!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Lisp &lt;small&gt;(Common Lisp, Scheme, Clojure)&lt;sup id=&quot;fnref:11&quot;&gt;&lt;a href=&quot;#fn:11&quot; rel=&quot;footnote&quot;&gt;11&lt;/a&gt;&lt;/sup&gt;&lt;/small&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Homoiconic&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;When you write a Lisp program, the notation you use (the &lt;em&gt;grammar&lt;/em&gt;) is equivalent to what a compiler would see (an &lt;em&gt;abstract syntax tree&lt;/em&gt; or &lt;em&gt;AST&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;Furthermore this Lisp code is represented as a nested structure of lists, symbols, and literals, all of which can be directly generated and manipulated in Lisp itself!&lt;/li&gt;
&lt;li&gt;This allows Lisp code to generate list structures which can then be run as Lisp code directly.

&lt;ul&gt;
&lt;li&gt;Generation can be done at &lt;em&gt;compile&lt;/em&gt; time with &lt;strong&gt;macros&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Generation can be done at &lt;em&gt;runtime&lt;/em&gt; as well, and then invoked with &lt;strong&gt;eval&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;However the highly uniform structure of Lisp code, devoid of operator and syntactic diversity, makes for lousy typography and thus low readability.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Macros&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;A function that transforms the AST of its operands at &lt;em&gt;compile&lt;/em&gt; time to new code.&lt;/li&gt;
&lt;li&gt;Macros can be used to generate arbitrary new statements and control structures.

&lt;ul&gt;
&lt;li&gt;Domain specific languages, in particular, are very easy to implement in Lisp thanks to macros.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Macros can also be used to perform code optimizations at compile time&lt;sup id=&quot;fnref:12&quot;&gt;&lt;a href=&quot;#fn:12&quot; rel=&quot;footnote&quot;&gt;12&lt;/a&gt;&lt;/sup&gt; (similar to  &amp;ldquo;template metaprogramming&amp;rdquo; in C++).&lt;/li&gt;
&lt;li&gt;Fluent use of macros requires the host language to be homoiconic, which is rare. Thus Lisp remains the only well-known language family that has macros.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lisp Conditions and Restarts&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Allows bidirectional communication between different parts of the call stack. More powerful than exceptions, since conditions can not only unwind the stack but also wind it back again via a restart.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Call-with-current-continuation&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Allows you to save the current execution state of the program in a variable and jump back to it later. Multiple times, even. It&amp;rsquo;s like a friggin' time machine. You can implement fairly complex control flow operators with this function.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Other&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Fexprs&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;A function whose operands are passed to it at runtime without being evaluated.&lt;/li&gt;
&lt;li&gt;Similar to macros and lazy evaluation in terms of power.&lt;/li&gt;
&lt;li&gt;Has fallen out of favor since the 1980s due to being difficult for compilers to optimize. Also it is hard to provide good error messages.&lt;/li&gt;
&lt;li&gt;Furthermore most fexpr functions tend to rely on &lt;em&gt;eval&lt;/em&gt; to continue evaluating its operands. The use of &lt;em&gt;eval&lt;/em&gt; has its own problems&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;!-- TODO: Add Prolog --&gt;


&lt;h3&gt;&lt;em&gt;Related Articles&lt;/em&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/articles/2013/02/20/visual-guide-to-programming-language-properties/&quot;&gt;Visual Guide to Programming Language Properties&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Shows programming language features, how they are related, and which features are present in popular languages.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Visualizes some of the features discussed in this article.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/articles/2013/03/01/notes-on-racket/&quot;&gt;Notes on Racket&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Describes Racket, a dialect of Lisp with batteries included.&lt;/em&gt;&lt;br/&gt;
&lt;em&gt;Useful for implementing other languages and creating cross-platform GUI programs.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/articles/2013/02/25/notes-on-prolog/&quot;&gt;Notes on Prolog&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Describes Prolog, a highly declarative language.&lt;/em&gt;&lt;br/&gt;
&lt;em&gt;Useful for exploring and verifying proofs.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/articles/2013/02/02/learnings-from-sicp/&quot;&gt;Learnings from SICP (and Lisp)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Discusses computer science concepts and how they manifest in various programming languages.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;For example it is undefined what happens when you add to an integer variable and the variable overflows. In most compilers adding 1 to the largest integer wraps around to result in the smallest integer, and thus a number of programs depend on this behavior. Other compilers &lt;a href=&quot;http://thiemonagel.de/2010/01/signed-integer-overflow/&quot;&gt;assume overflow is impossible&lt;/a&gt;.&lt;a href=&quot;#fnref:1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;Steve Yegge has a great rant on the over-focus on objects in the Java community: &lt;a href=&quot;http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html&quot;&gt;Execution in the Kingdom of Nouns&lt;/a&gt;&lt;a href=&quot;#fnref:2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:3&quot;&gt;
&lt;p&gt;C# is by design almost a direct copy of Java. It amazes me that Microsoft (C#&amp;rsquo;s sponsor) would spend so much effort making a copy of an existing language.&lt;a href=&quot;#fnref:3&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:4&quot;&gt;
&lt;p&gt;If you invoke an uninitialized event-property, it will throw a &lt;code&gt;NullReferenceException&lt;/code&gt; instead of ignoring your request, as you would expect. Workaround by initializing events with an empty delegate.&lt;a href=&quot;#fnref:4&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:5&quot;&gt;
&lt;p&gt;I am referring to the &lt;a href=&quot;http://www.refactoring.com/catalog/introduceForeignMethod.html&quot;&gt;Foreign Method&lt;/a&gt; design pattern here, not a native function from a &lt;a href=&quot;http://en.wikipedia.org/wiki/Foreign_function_interface&quot;&gt;foreign function interface&lt;/a&gt;.&lt;a href=&quot;#fnref:5&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:6&quot;&gt;
&lt;p&gt;Hence workarounds like &lt;a href=&quot;http://requirejs.org&quot;&gt;RequireJS&lt;/a&gt; to get includes and modules.&lt;a href=&quot;#fnref:6&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:7&quot;&gt;
&lt;p&gt;Hence reimplementions of class semantics in libraries like MooTools, Prototype, and &lt;a href=&quot;http://ejohn.org/blog/simple-javascript-inheritance/&quot;&gt;random blog posts&lt;/a&gt;. (That blog post has the best implementation, IMHO.)&lt;a href=&quot;#fnref:7&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:8&quot;&gt;
&lt;p&gt;Hence recommendations to always use &lt;code&gt;===&lt;/code&gt; instead of &lt;code&gt;==&lt;/code&gt;.&lt;a href=&quot;#fnref:8&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:9&quot;&gt;
&lt;p&gt;Hence recommendations to only depend on the &amp;ldquo;truthy&amp;rdquo; and &amp;ldquo;falsy&amp;rdquo; values of expressions instead of direct comparisons with &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.&lt;a href=&quot;#fnref:9&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:10&quot;&gt;
&lt;p&gt;Want to implement Ruby&amp;rsquo;s &lt;code&gt;until&lt;/code&gt; loop or &lt;code&gt;unless&lt;/code&gt; conditional? No problem.&lt;a href=&quot;#fnref:10&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:11&quot;&gt;
&lt;p&gt;There are more dialects of Lisp than any other language I can think of. These 3 (Common Lisp, Scheme, and Clojure) are just the most popular dialects. I&amp;rsquo;ve directly used &lt;a href=&quot;/articles/2013/03/01/notes-on-racket/&quot;&gt;Racket&lt;/a&gt; in the past, which is itself a dialect of Scheme.&lt;a href=&quot;#fnref:11&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:12&quot;&gt;
&lt;p&gt;Prismatic performs efficient &lt;a href=&quot;http://blog.getprismatic.com/blog/2013/1/22/the-magic-of-macros-lighting-fast-templating-in-clojurescript&quot;&gt;compile-time DOM templating&lt;/a&gt; in ClojureScript using macros.&lt;a href=&quot;#fnref:12&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Things I Wish I Knew Before Working in Industry</title>
   <link href="http://dafoster.net/articles/2013/01/15/things-i-wish-i-knew-before-working-in-industry/"/>
   <updated>2013-01-15T00:00:00-08:00</updated>
   <id>http://dafoster.net/articles/2013/01/15/things-i-wish-i-knew-before-working-in-industry</id>
   <content type="html">&lt;p&gt;In April 2008, a representative from IBM gave a presentation at Georgia
Tech about things he wished he knew before working in the the software
industry. I have found his advice to be very useful at various points during
my career. Sadly I have lost the presenter&amp;rsquo;s name.&lt;/p&gt;

&lt;p&gt;Here is my outline of his presentation. &lt;strong&gt;Emphasized&lt;/strong&gt; points are ones I&amp;rsquo;ve found
to be particularly useful.&lt;/p&gt;

&lt;h3&gt;Technology&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Future: integration&lt;/li&gt;
&lt;li&gt;Needed: ease-of-use &amp;amp; less complexity&lt;/li&gt;
&lt;li&gt;Do &lt;em&gt;not&lt;/em&gt; reinvent wheels!

&lt;ul&gt;
&lt;li&gt;you&amp;rsquo;ll never finish the project&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Technical Knowledge&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Learn to learn&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t need to take a class to learn something&lt;/li&gt;
&lt;li&gt;Learn a little about a lot of things&lt;/li&gt;
&lt;li&gt;Read news highlights from worthwhile sources&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Problem Solving&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Build a network of people. Asking for advice is quicker than learning the hard way.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;There is always more than one way to do something.&lt;br/&gt;
Weigh the pros/cons of each – then pick and choose.&lt;/li&gt;
&lt;li&gt;Innovate &lt;em&gt;before&lt;/em&gt; you execute. Think critically before you act.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Business &amp;amp; Technology&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Technology adoption is driven by &lt;em&gt;business&lt;/em&gt;. (practicality)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Business is nothing without technology.&lt;br/&gt;
Technology is nothing without business.&lt;/li&gt;
&lt;li&gt;If you build a better mousetrap, they will not come.&lt;/li&gt;
&lt;li&gt;A project, no matter how advanced, is doomed for failure without a paying customer.&lt;/li&gt;
&lt;li&gt;Think about TCO (&lt;em&gt;total&lt;/em&gt; cost of ownership) and ROI (return on investment).&lt;br/&gt;
You must always justify your returns.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Communication with &lt;em&gt;managers&lt;/em&gt; and &lt;em&gt;customers&lt;/em&gt; is vital!&lt;/strong&gt;&lt;br/&gt;
If you can&amp;rsquo;t get someone to adopt your solution, what&amp;rsquo;s the point?&lt;/li&gt;
&lt;li&gt;There is a difference between removing barriers and creating incentive (for a customer to switch to my project/product). You need both.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Promotions&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s not &lt;em&gt;what&lt;/em&gt; you know.&lt;br/&gt;
It&amp;rsquo;s not &lt;em&gt;who&lt;/em&gt; you know.&lt;br/&gt;
&lt;strong&gt;It&amp;rsquo;s &lt;em&gt;who&lt;/em&gt; knows &lt;em&gt;what&lt;/em&gt; you know.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Doing more of the same is not enough.

&lt;ul&gt;
&lt;li&gt;Need to try new things – take on more responsibility.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Doing what is asked is not enough.&lt;/li&gt;
&lt;li&gt;Ask you manager what the expectations are.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Working with Others&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Credit + gratitude are not limited resources.&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Say thank you!&lt;/li&gt;
&lt;li&gt;Give credit where due.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Be ambitious but be humble.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t make assumptions about others.

&lt;ul&gt;
&lt;li&gt;Give people the benefit of the doubt.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Your lack of planning does not mean I need to treat your request as urgent.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Do what you say you will. Keep your word.

&lt;ul&gt;
&lt;li&gt;reliable&lt;/li&gt;
&lt;li&gt;dependable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The best humor is &lt;em&gt;self-deprecating&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;There is always someone faster, smarter, and better looking.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Managers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;They don&amp;rsquo;t have a magic wand. They don&amp;rsquo;t automatically fix problems.&lt;/li&gt;
&lt;li&gt;Managers do not have a superset of the employees' (team members') knowledge.&lt;/li&gt;
&lt;li&gt;Managers can&amp;rsquo;t read minds. Don&amp;rsquo;t assume. Communicate explicitly.&lt;/li&gt;
&lt;li&gt;You are responsible for your own career. But ask for help.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;You and Your Job&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Your job is what you make of it. Don&amp;rsquo;t be confined by a job description.&lt;/li&gt;
&lt;li&gt;Work/Life balance doesn&amp;rsquo;t have good default settings. You must do &lt;em&gt;explicit&lt;/em&gt; actions.

&lt;ul&gt;
&lt;li&gt;plan&lt;/li&gt;
&lt;li&gt;schedule for success&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You are not your job. Do not define yourself like this.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Workers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;We&amp;rsquo;re employed to &lt;em&gt;add value&lt;/em&gt;, not spend money.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s easy to stay busy, but are you accomplishing anything &lt;em&gt;worthwhile&lt;/em&gt;?

&lt;ul&gt;
&lt;li&gt;don&amp;rsquo;t needlessly clutter your schedule&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If you aren&amp;rsquo;t looking at it from a &lt;em&gt;customer perspective&lt;/em&gt;, you aren&amp;rsquo;t looking at it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;You can&amp;rsquo;t do everything. Pick what you &lt;em&gt;won&amp;rsquo;t&lt;/em&gt; do.&lt;/strong&gt; (The world won&amp;rsquo;t end.)&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Employment&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t expect your first job to be your dream job. Look for a &lt;em&gt;path&lt;/em&gt;, not an &lt;em&gt;endpoint&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Be willing to stretch your comfort zone.

&lt;ul&gt;
&lt;li&gt;geographically, work type, etc.&lt;/li&gt;
&lt;li&gt;Otherwise you&amp;rsquo;ll stagnate.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Know your employer&amp;rsquo;s business model.

&lt;ul&gt;
&lt;li&gt;Examples:

&lt;ul&gt;
&lt;li&gt;HP = selling ink;&lt;/li&gt;
&lt;li&gt;Microsoft = selling Office and Windows;&lt;/li&gt;
&lt;li&gt;Apple = iPod and (to some extent) Macs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Take a look at the annual reports for your company.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Get &lt;em&gt;internships&lt;/em&gt;, even if with competitors, maybe even delaying graduation.&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;It gives experience.&lt;/li&gt;
&lt;li&gt;Increases employment opportunities.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Start looking and prepare much earlier.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Successful Employment&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;If you want to make a difference, look for chaos.&lt;br/&gt;
Stable environments offer little opportunity.&lt;/li&gt;
&lt;li&gt;Good employees &lt;em&gt;deal&lt;/em&gt; with challenges instead of pouting. &lt;em&gt;Adapt&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Stay above the commodity line (with regard to skill set and type of work done).&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Life&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Understand other people&amp;rsquo;s &lt;em&gt;motivations&lt;/em&gt;.

&lt;ul&gt;
&lt;li&gt;Makes it easier to find new ways of solving the underlying goal.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Define your values and goals.

&lt;ul&gt;
&lt;li&gt;ex: What type of job do you want?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Your &lt;em&gt;behaviors&lt;/em&gt; should support your goals.&lt;/li&gt;
&lt;li&gt;Expect your goals to change. Success is dynamic.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t let &lt;em&gt;others&lt;/em&gt; define success for you.&lt;/li&gt;
&lt;li&gt;You can get rich by getting more or &lt;em&gt;wanting less&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Life is one great balancing act.

&lt;ul&gt;
&lt;li&gt;There&amp;rsquo;s no single right way of doing things.&lt;/li&gt;
&lt;li&gt;Balancing your priorities and goals is important.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Programming is Fun. But What Matters is Solving a Real Problem.</title>
   <link href="http://dafoster.net/articles/2013/01/08/programming-is-fun-but-what-matters-is-solving-a-real-problem/"/>
   <updated>2013-01-08T00:00:00-08:00</updated>
   <id>http://dafoster.net/articles/2013/01/08/programming-is-fun-but-what-matters-is-solving-a-real-problem</id>
   <content type="html">&lt;p&gt;I love programming. It tickles me when I stumble across a new programming language that lets me express concepts in a more clear and direct fashion. I love the cleanness and order that results after a good round of refactoring&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. I enjoy the challenge of hacking away at a fiddly problem and testing all the cases to get a correct and bulletproof solution.&lt;/p&gt;

&lt;p&gt;However I have realized programming is merely an activity. It is a &lt;em&gt;means&lt;/em&gt;, not an &lt;em&gt;end&lt;/em&gt;. My work is not inherently valuable because I have created a piece of software. Rather it is because I have created software &lt;em&gt;that solves somebody&amp;rsquo;s problem&lt;/em&gt;.&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Therefore it is the &lt;em&gt;problem&lt;/em&gt; that deserves the most attention if you want to make a difference that people care about. In that vein I have been learning about the precepts of Customer Development and Customer Discovery, which deals with how to efficiently interact with customers to discover a problem that they care about.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Direct customer interaction, such as through in-person interviews of the general public, is way outside my comfort zone. However I will persevere. I think it is a very important skill for actually making a dent in the universe.&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;&lt;em&gt;Refactoring&lt;/em&gt; is a systematic method for code cleanup: improving the structure of existing code without changing its behavior. I highly recommend the book &lt;a href=&quot;http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672&quot;&gt;Refactoring&lt;/a&gt; if you want a deep-dive into the topic.&lt;a href=&quot;#fnref:1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;&lt;!-- Speculation: --&gt; Business majors &amp;amp; managers recognize early on the importance of solving business problems. After all, their training is around organizing other people to solve problems they identify. (Although I feel they often focus overly on managing and not enough on problem identification.)&lt;a href=&quot;#fnref:2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:3&quot;&gt;
&lt;p&gt;For a great practical workboard around Customer Discovery (which is the first quarter of Customer Development), I highly recommend Ash Maurya&amp;rsquo;s &lt;a href=&quot;http://www.amazon.com/Running-Lean-Iterate-Works-OReilly/dp/1449305172&quot;&gt;Running Lean&lt;/a&gt;. For a full overview of Customer Development, I recommend Steve Blank&amp;rsquo;s &lt;a href=&quot;http://www.amazon.com/Four-Steps-Epiphany-Successful-Strategies/dp/0976470705&quot;&gt;The Four Steps to the Epiphany&lt;/a&gt;.&lt;a href=&quot;#fnref:3&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:4&quot;&gt;
&lt;p&gt;Steve Jobs famously said he wanted to &amp;ldquo;put a dent in the universe&amp;rdquo;. And boy did he ever.&lt;a href=&quot;#fnref:4&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>This website is now powered by Jekyll</title>
   <link href="http://dafoster.net/articles/2012/12/21/this-website-is-now-powered-by-jekyll/"/>
   <updated>2012-12-21T00:00:00-08:00</updated>
   <id>http://dafoster.net/articles/2012/12/21/this-website-is-now-powered-by-jekyll</id>
   <content type="html">&lt;p&gt;And this is my first post using the new system. Articles are a lot easier to
write, so I will be posting more frequently.&lt;/p&gt;

&lt;p&gt;Previously this site was powered by the &lt;a href=&quot;http://drupal.org&quot;&gt;Drupal&lt;/a&gt; engine. I found it overly
complex to maintain, especially for a single-user blog and portfolio website.
For more details see my post &lt;a href=&quot;/articles/2012/12/16/why-i-no-longer-use-drupal/&quot;&gt;Why I no longer use Drupal&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;&lt;em&gt;Related Articles&lt;/em&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/articles/2012/12/16/why-i-no-longer-use-drupal/&quot;&gt;Why I no longer use Drupal&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Details why Drupal is overly complex for a personal blog.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Why I no longer use Drupal</title>
   <link href="http://dafoster.net/articles/2012/12/16/why-i-no-longer-use-drupal/"/>
   <updated>2012-12-16T00:00:00-08:00</updated>
   <id>http://dafoster.net/articles/2012/12/16/why-i-no-longer-use-drupal</id>
   <content type="html">&lt;p&gt;&lt;em&gt;&lt;b&gt;TLDR:&lt;/b&gt; Drupal is overly complex for a personal blog. It is hard to maintain. Simple static site generators are easier to work with in the long term.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;My portfolio website was written during college using hand-coded HTML and used server-side includes to bring in common navigation.&lt;/p&gt;

&lt;p&gt;Then in January 2010 I remade my site in Drupal. It gained lots of fancy features such as first-class support for project categories and project languages. You could subscribe to almost any page as a feed. There were project specific updates that could be commented on. From a feature point of view, it rocked.&lt;/p&gt;

&lt;p&gt;But some problems became apparent over time:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Security updates were frequent and difficult to apply correctly.&lt;/li&gt;
&lt;li&gt;I didn&amp;rsquo;t like writing articles on the site because I couldn&amp;rsquo;t use simple markup formats such as Markdown.

&lt;ul&gt;
&lt;li&gt;Drupal has no good editor plugins for markup languages.&lt;/li&gt;
&lt;li&gt;And its visual HTML editor generates messy HTML.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The theme I used for the site was complex and hard to modify.

&lt;ul&gt;
&lt;li&gt;And the CSS often interfered with my article markup, necessitating me to drop into HTML when editing certain articles.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;There was no sane way to test structural changes to the site locally and then automatically deploy them to production.

&lt;ul&gt;
&lt;li&gt;Normally this would be done by keeping the site structure in the filesystem and all user content in a database. This allows the filesystem contents to be easily deployed using &lt;code&gt;git push&lt;/code&gt;, &lt;code&gt;rsync&lt;/code&gt;, or similar techniques.&lt;/li&gt;
&lt;li&gt;Drupal, by contrast, keeps its site structure in both the filesystem &lt;em&gt;and&lt;/em&gt; in the database, along with user-generated content. Updating only the parts of the database related to site structure is cumbersome and error-prone.&lt;/li&gt;
&lt;li&gt;Thus, I couldn&amp;rsquo;t really change the site structure after my initial deployment to production.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Nothing was in revision control, which made me nervous.&lt;/li&gt;
&lt;li&gt;I had to hack the Drupal core to get my contact form to work with my web hosting provider.&lt;/li&gt;
&lt;li&gt;Most of the features of the site weren&amp;rsquo;t being used by readers.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So now I am rewriting my site yet again in straight HTML (via a simple static site generator) and outsourcing all user generated content (like comments) to third party service providers.&lt;/p&gt;

&lt;p&gt;Benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simple simple simple.&lt;/li&gt;
&lt;li&gt;Automatic security. The web server just serves static files.&lt;/li&gt;
&lt;li&gt;Automatic scalability, for the same reason.&lt;/li&gt;
&lt;li&gt;Simple authoring in Markdown with powerful client-side text editors.&lt;/li&gt;
&lt;li&gt;Instant deployment with &lt;code&gt;git push&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Everything in revision control.&lt;/li&gt;
&lt;li&gt;I can use any web hosting provider. Hell, I can just use &lt;a href=&quot;http://pages.github.com&quot;&gt;GitHub Pages&lt;/a&gt; for free.&lt;/li&gt;
&lt;li&gt;Ultimate control over the site theme and CSS. I can fix problems myself.&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Retrospect vs. Time Machine</title>
   <link href="http://dafoster.net/articles/2010/11/13/retrospect-vs-time-machine/"/>
   <updated>2010-11-13T00:00:00-08:00</updated>
   <id>http://dafoster.net/articles/2010/11/13/retrospect-vs-time-machine</id>
   <content type="html">&lt;h2&gt;The old Retrospect 6.0&lt;/h2&gt;

&lt;p&gt;In the past I have used Retrospect 6.0 to backup my Macs, since it was one of
the few programs that reliably backed up everything correctly, with all the
metadata intact. But it is looking much less attractive these days&amp;hellip;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It no longer finds my laptop on the network reliably, due to some bug.
Especially when switching between wireless and wired networks.
Thus I often miss backups.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is slow.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It does not groom backups.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It stores everything inside a single monolithic file,
which is at risk of corruption.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;The new Retrospect 8.0&lt;/h2&gt;

&lt;p&gt;The latest version of Retropect (8.0) is somewhat better but has some problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It does not seem to backup all attributes correctly.
For example, volume icons do not seem to be restored correctly.
Inaccurate backups are useless.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is more complicated to use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Automatic grooming, although supported, is so slow to be practically unusable.
It takes maybe 2x as long to do one grooming operation as an incremental backup.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Time Machine&lt;/h2&gt;

&lt;p&gt;Now there is Time Machine. Since my primary systems are 10.5+, I can use it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It &lt;em&gt;should&lt;/em&gt; support reliable backup of all filesystem attributes,
since it was made by Apple, who is in a position to know about them.
Also, Apple typically makes solid products.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It has quick, automatic, incremental backups.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It also grooms automatically while it is backing up. Grooming behavior is
intelligent, keeping snapshots at sensible intervals.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The single-file restore interface is precise, intuitive, and fast.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Only wrinkle is that Time Machine is not really designed to backup to network
drives, however there are &lt;a href=&quot;http://code.stephenmorley.org/articles/time-machine-on-a-network-drive/&quot;&gt;instructions for circumventing this&lt;/a&gt;.
(Of course there is Time Machine + Time Capsule for network backups, but a
Capsule is egregiously expensive.)&lt;/p&gt;

&lt;h3&gt;2012 Update&lt;/h3&gt;

&lt;p&gt;Time Machine misses a few filesystem attributes that Retrospect 6.0 nailed back
in the day, like volume icons.&lt;/p&gt;

&lt;p&gt;I think it may also strip HFS+ extended attributes, since applications appear
to be quarantined after they are restored from a Time Machine backup.&lt;/p&gt;

&lt;p&gt;One last nitpick is that TM has very poor handling for bad media and bad blocks.
In particular if your primary hard drive develops bad blocks, which is an early
sign of imminent failure, Time Machine will choke and refuse to backup the
entire volume. And this is exactly at the time you need it your files backed up
the most, when your hard drive is likely to fail.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Impact of Anime on my Programming Experience</title>
   <link href="http://dafoster.net/articles/2010/09/18/impact-anime-my-programming-experience/"/>
   <updated>2010-09-18T00:00:00-07:00</updated>
   <id>http://dafoster.net/articles/2010/09/18/impact-anime-my-programming-experience</id>
   <content type="html">&lt;p&gt;It occurs to me that anime has been an important driver for improving my programming abilities.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I did my own &lt;a href=&quot;/prism/projects/kiss/&quot;&gt;implementation of the Kisekae Set System&lt;/a&gt; (KiSS),
a digital paper doll system which often featured anime characters.

&lt;ul&gt;
&lt;li&gt;My very first exposure to anime was to the characters of Wedding Peach,
via an included doll file with the French KiSS viewer by John Stiles.&lt;/li&gt;
&lt;li&gt;Taught me how to write directly to graphics buffers, in both C and
later Java.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I initially picked up Java when I was writing &lt;strong&gt;RealMediaFixer&lt;/strong&gt;,
a repairer of RealMedia video files. CodeWarrior&amp;rsquo;s implementation of the
C++ iostream classes had a broken buffered stream implementation,
so I switched to Java to use its rock solid BufferedOutputStream
implementation.

&lt;ul&gt;
&lt;li&gt;Initial use was to repair &lt;a href=&quot;http://www.themanime.org/viewreview.php?id=396&quot;&gt;Ranma&lt;/a&gt; episodes that I downloaded over HTTP,
on dialup!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I implemented &lt;a href=&quot;/prism/projects/hotline/&quot;&gt;my own client and server for the Hotline protocol&lt;/a&gt;,
through which I got most of my anime prior to the introduction of
BitTorrent.&lt;/li&gt;
&lt;li&gt;Today I am &lt;a href=&quot;/projects/handbrake-subtitle-support/&quot;&gt;enhancing support for transcoding soft subtitles in HandBrake&lt;/a&gt;
so that I can watch new anime on the bus.&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Comparing Writing Utensils (Why Pens&nbsp;>&nbsp;Pencils)</title>
   <link href="http://dafoster.net/articles/2010/09/17/comparing-writing-utensils/"/>
   <updated>2010-09-17T00:00:00-07:00</updated>
   <id>http://dafoster.net/articles/2010/09/17/comparing-writing-utensils</id>
   <content type="html">&lt;p&gt;My experience using various kinds of writing utensils in school&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;&amp;gt; = &amp;ldquo;is better than&amp;rdquo;&lt;/i&gt;&lt;/p&gt;

&lt;h3&gt;Why Pens &gt; Pencils&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t smudge ∴ Archive well&lt;/li&gt;
&lt;li&gt;Force you to think about what you are writing

&lt;ul&gt;
&lt;li&gt;Mistakes are more costly, since you cannot simply use an eraser on pen&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Have brighter contrast ∴ Easier to read&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Why Mechanical Pencils &gt; Traditional Pencils&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t need to be sharpened ∴

&lt;ul&gt;
&lt;li&gt;No sawdust to clean up&lt;/li&gt;
&lt;li&gt;No special sharpener hardware needed&lt;/li&gt;
&lt;li&gt;Lifetime is not limited to a certain number of sharpenings

&lt;ul&gt;
&lt;li&gt;Lifetime only limited to when the m-pencil is lost&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Seem to resist smearing in the short term

&lt;ul&gt;
&lt;li&gt;(but pens still win in the long term)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Why Writing Utensils &gt; Computer Keyboards [for creative projects]&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Force you to think about what you are writing

&lt;ul&gt;
&lt;li&gt;It takes a long time (comparatively) to write individual words,
which gives you time to think about what you are writing&lt;/li&gt;
&lt;li&gt;Mistakes are more costly, since you cannot just delete words&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Force you to think about the structure of what you are writing

&lt;ul&gt;
&lt;li&gt;Mistakes are more costly, since you cannot just cut and paste sections
which are poorly laid out in the first place&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No mental overhead

&lt;ul&gt;
&lt;li&gt;Using computers always incurs at least a small bit of mental overhead
that interferes with the creative process&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Automatic revision control (in the case of pen)

&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s easier to strike through (rather than erase) rejected ideas with
pen, so these ideas are preserved for future analysis, which sometimes
comes in handy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Why Computer Keyboards &gt; Writing Utensils [for non-creative projects]&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Typing speed is much higher

&lt;ul&gt;
&lt;li&gt;Gets even better if you use typing expansion software&lt;/li&gt;
&lt;li&gt;Gets even better if you use dictation software [for prose]&lt;/li&gt;
&lt;li&gt;Gets even better if you use a stenotype machine&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hyperlinks are easy to create and maintain

&lt;ul&gt;
&lt;li&gt;This is especially powerful when writing reference documents&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Comparing iPod Touch (2nd Gen) to iPhone 3GS</title>
   <link href="http://dafoster.net/articles/2010/09/17/comparing-ipod-touch-2nd-gen-iphone-3gs/"/>
   <updated>2010-09-17T00:00:00-07:00</updated>
   <id>http://dafoster.net/articles/2010/09/17/comparing-ipod-touch-2nd-gen-iphone-3gs</id>
   <content type="html">&lt;p&gt;I recently upgraded from an iPod Touch to an iPhone 3GS. I hate contracts, so I
bought the 3GS off-contract from a seller on Craigslist. (And I timed my
purchase to coincide with the release of the iPhone 4, so lots of people were
dumping their own 3GS devices.)&lt;/p&gt;

&lt;p&gt;I am routinely in WiFi hotspots: at home, enroute to work, and at work, so I
usually put the iPhone 3GS in &amp;ldquo;Airplane Mode&amp;rdquo;, where the wireless radios are
disabled, to conserve battery life. Therefore I effectively use my iPhone like
a better iPod Touch most of the time.&lt;/p&gt;

&lt;p&gt;From purely a specification point of view, the differences are:&lt;/p&gt;

&lt;table border=&quot;1&quot;&gt;
    &lt;thead style=&quot;background-color:#e0e0e0;&quot;&gt;
        &lt;tr&gt;
            &lt;th scope=&quot;col&quot;&gt;
                &amp;nbsp;&lt;/th&gt;
            &lt;th scope=&quot;col&quot;&gt;
                iPod Touch (2nd Gen)&lt;/th&gt;
            &lt;th scope=&quot;col&quot;&gt;
                iPhone 3GS (3rd Gen)&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;
                internet access&lt;/td&gt;
            &lt;td&gt;
                only in WiFi hotspots&lt;/td&gt;
            &lt;td&gt;
                universal (except subway)*&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;
                geolocation&lt;/td&gt;
            &lt;td&gt;
                WiFi triangulation only, via SkyHook&lt;/td&gt;
            &lt;td&gt;
                GPS-enabled (very accurate)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;
                external speaker quality&lt;/td&gt;
            &lt;td&gt;
                -&lt;/td&gt;
            &lt;td&gt;
                surprisingly better&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;
                CPU / responsiveness&lt;/td&gt;
            &lt;td&gt;
                -&lt;/td&gt;
            &lt;td&gt;
                much faster&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;
                battery life&lt;/td&gt;
            &lt;td&gt;
                - (approx 3 days)&lt;/td&gt;
            &lt;td&gt;
                less (approx 2 days)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;
                vibrate capability&lt;/td&gt;
            &lt;td&gt;
                no&lt;/td&gt;
            &lt;td&gt;
                yes&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;
                built-in microphone&lt;/td&gt;
            &lt;td&gt;
                no&lt;/td&gt;
            &lt;td&gt;
                yes&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;
                heft&lt;/td&gt;
            &lt;td&gt;
                lighter and thinner&lt;/td&gt;
            &lt;td&gt;
                -&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;
                headphone jack location&lt;/td&gt;
            &lt;td&gt;
                bottom-right&lt;/td&gt;
            &lt;td&gt;
                top-left&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;In practical terms, this translates to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;I never get completely lost*&lt;/b&gt;

&lt;ul&gt;
&lt;li&gt;The combination of GPS plus internet everywhere means that I always know
where I am on the map.&lt;/li&gt;
&lt;li&gt;I can also get instant directions from my current location to an
arbitrary destination. I usually take public transit, but this works with
cars as well.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The iPhone is a better boombox&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;I use both devices as portable external sound systems while I work.
The better speaker quality of the iPhone is nice to have.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The iPhone user interface is more responsive&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&amp;hellip;thanks to the better CPU.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The iPhone needs to be recharged slightly more often&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&amp;hellip;thanks to the shorter battery life.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I never miss calendar reminders anymore&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Calendar reminders (including work meeting reminders) are not only
audible on the iPhone but also produce a noticeable vibration.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I can use Shazam to identify random music I hear&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&amp;hellip;thanks to the built-in microphone.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2012 Update:&lt;/strong&gt; This actually doesn&amp;rsquo;t work very well.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I can make phone calls if I really want to&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The microphone makes it feasable. Not just for normal calls, but VoIP
internet calls as well.&lt;/li&gt;
&lt;li&gt;With a phone plan, you can make the normal calls as well.*&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;i&gt;* Requires phone plan, with associated subscription costs.&lt;/i&gt;&lt;/p&gt;

&lt;h2&gt;The uneasy marriage with AT&amp;amp;T&lt;/h2&gt;

&lt;p&gt;I hate expensive monthly fees. Here in the USA, the only officially
supported carrier is AT&amp;amp;T, which charges at least $70/month. I don&amp;rsquo;t even use
the voice plan, so I&amp;rsquo;m being overcharged rather significantly at the moment.&lt;/p&gt;

&lt;p&gt;T-Mobile is another option for those willing to unlock their iPhones. They
have less expensive plans, to the tune of $40/month, which I&amp;rsquo;m much in favor
of. I intend to unlock my iPhone when I get some spare time in the next month
or so. After all, it&amp;rsquo;s costing me $30/month to delay.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2012 Update:&lt;/strong&gt; T-Mobile is rumored to be carrying the iPhone sometime in
2013. I just hope it isn&amp;rsquo;t &amp;ldquo;too little, too late.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2012 Update:&lt;/strong&gt; I am still using the same iPhone 3GS today.&lt;/p&gt;
</content>
 </entry>
 
 
</feed>