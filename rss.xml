<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DaFoster</title>
    <link>http://dafoster.net/</link>
    <atom:link href="http://dafoster.net/rss.xml" rel="self" type="application/rss+xml" />
    <description>Thoughts on software and productivity from David Foster.</description>
    <language>en-us</language>
    <pubDate>Wed, 01 Jan 2014 13:47:04 -0800</pubDate>
    <lastBuildDate>Wed, 01 Jan 2014 13:47:04 -0800</lastBuildDate>
    <image>
      <url>http://dafoster.net/favicon.png</url>
      <title>DaFoster</title>
      <link>http://dafoster.net/</link>
    </image>

    
    
    <item>
      <title>How to move notes from an iPhone to an email account</title>
      <link>http://dafoster.net/articles/2013/11/25/how-to-move-notes-from-an-iphone-to-an-email-account/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Mon, 25 Nov 2013 00:00:00 -0800</pubDate>
      <guid>http://dafoster.net/articles/2013/11/25/how-to-move-notes-from-an-iphone-to-an-email-account</guid>
      <description>&lt;p&gt;If you have notes in the &amp;ldquo;On My Phone&amp;rdquo; or &amp;ldquo;On My Mac&amp;rdquo; accounts but want to move them to an email account instead, this article provides instructions for moving the notes. It&amp;rsquo;s surprisingly tricky.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2013/notes-accounts-on-iphone.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;Easy Way &lt;small&gt;(Straightforward but tedious)&lt;/small&gt;&lt;/h2&gt;

&lt;p&gt;Mail every note to yourself and copy the contents into the Notes program (if using OS X 10.8 - 10.9) or into Mail (if using OS X 10.7 or earlier).&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color: red&quot;&gt;&lt;strong&gt;Caution:&lt;/strong&gt; This method loses the dates of the original notes which will mess up their ordering.&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;Hard Way &lt;small&gt;(Perfect migration but lots of steps)&lt;/small&gt;&lt;/h2&gt;

&lt;p&gt;First you will need &lt;strong&gt;OS X 10.7 (Lion)&lt;/strong&gt;, either already running on a computer you own or installed on a virtual machine, such as created by &lt;a href=&quot;http://www.parallels.com/products/desktop/&quot;&gt;Parallels&lt;/a&gt; or &lt;a href=&quot;http://www.vmware.com/products/fusion/&quot;&gt;VMware&lt;/a&gt;. OS X 10.8 (Mountain Lion) and OS X 10.9 (Mavericks) &lt;a href=&quot;https://support.apple.com/kb/HT4191&quot;&gt;removed the notes syncing feature&lt;/a&gt; that these instructions depend on.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Sync the iPhone with iTunes. Be sure that in the &lt;strong&gt;Info&lt;/strong&gt; tab of iTunes that the &lt;strong&gt;Sync notes&lt;/strong&gt; option is checked. If the option isn&amp;rsquo;t there then you might be running OS X 10.8+ where this option was removed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2013/notes-sync-in-itunes.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open Mail and configure it with the email account that you want the notes to be synced with. Make sure that in the Mail preferences that the &lt;strong&gt;Show notes in Inbox&lt;/strong&gt; option is checked.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2013/notes-show-in-mail.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You should see a &lt;strong&gt;Notes&lt;/strong&gt; folder in the left sidebar of the main mail window. It should also have a triangle that expands to show &amp;ldquo;On My Mac&amp;rdquo; and your email account. If there is no triangle then you may need to quit and relaunch Mail for it to pick up the synced notes from iTunes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2013/notes-in-mail-sidebar.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Move all the notes inside the &amp;ldquo;On My Mac&amp;rdquo; to your email account.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Verify that your iPhone sees the notes added to your email account.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tell iTunes to sync with the phone again so that the notes moved from &amp;ldquo;On My Mac&amp;rdquo; no longer appear on the iPhone under the &amp;ldquo;On My Mac&amp;rdquo; account.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2013/notes-sync-in-itunes.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This last step didn&amp;rsquo;t work as expected for me, as no notes disappeared from the &amp;ldquo;On My Mac&amp;rdquo; account on my iPhone. I tried using iTunes&amp;rsquo;s special option to forcefully replace all notes on the iPhone with the Mac&amp;rsquo;s notes on the next sync. That didn&amp;rsquo;t work either.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2013/notes-force-sync.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the end to remove the old notes from the &amp;ldquo;On My Mac&amp;rdquo; account on the iPhone, I manually deleted each note on the iPhone itself. Not ideal but it didn&amp;rsquo;t take too long.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
    </item>
    
    
    <item>
      <title>Impressions of Haskell</title>
      <link>http://dafoster.net/articles/2013/11/12/impressions-of-haskell/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Tue, 12 Nov 2013 00:00:00 -0800</pubDate>
      <guid>http://dafoster.net/articles/2013/11/12/impressions-of-haskell</guid>
      <description>&lt;p&gt;I finally found an online tutorial for Haskell that involves writing a &lt;em&gt;non-trivial&lt;/em&gt; program:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jonathan.tang.name/files/scheme_in_48/tutorial/functions.html&quot;&gt;Write Yourself a Scheme in 48 Hours&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It&amp;rsquo;s an excellent tutorial and has given me a good impression of Haskell for building a medium-sized non-trivial program: a LISP interpreter.&lt;/p&gt;

&lt;p&gt;This impression, however, has been more negative than positive. I would consider Haskell for use for doing programs that do heavy computation with pure functions alone.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; However if there&amp;rsquo;s any significant amount of I/O, error handling, or state, using Haskell is just bloody painful.&lt;/p&gt;

&lt;h3&gt;Monads are painful&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I/O must be done inside an I/O &lt;em&gt;monad&lt;/em&gt;.&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Error handling must be done inside an error monad.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Passing around shared state must be done inside a state monad.&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The preceding by itself would not be such a problem except that, in addition:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Code that is pure uses a different syntax than code that is in a monad.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Code that needs to be in multiple monads at the same time is a royal pain to write. It requires the use of &lt;em&gt;monad transformers&lt;/em&gt; and explicit converting (or &amp;ldquo;lifting&amp;rdquo;) between individual monads and combined monads.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Having monadic code be in a different syntax than pure code requires the programmer to learn and use two different syntaxes. And these syntaxes aren&amp;rsquo;t even similar: they read in different directions. Mixing code that is both pure and monadic becomes confusing. Upgrading pure code to be monadic, which is not uncommon during development and maintenance, requires a lot of non-trivial syntactic transformations.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pure code&lt;/strong&gt; - Reads inside-out, generally bottom-to-top and right-to-left.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Monadic code&lt;/strong&gt; - Reads top-to-bottom (with do-notation) and left-to-right (with bind operations).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pure + monadic code&lt;/strong&gt; - Reads in multiple directions.&lt;/li&gt;
&lt;/ul&gt;


&lt;!--
&lt;ul class=&quot;nav nav-tabs&quot;&gt;
  &lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;#pure&quot; data-toggle=&quot;tab&quot;&gt;Pure Code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#monadic&quot; data-toggle=&quot;tab&quot;&gt;Monadic Code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mixed&quot; data-toggle=&quot;tab&quot;&gt;Pure + Monadic Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;tab-content&quot;&gt;
  &lt;div class=&quot;tab-pane fade in active&quot; id=&quot;pure&quot;&gt;
    &lt;p&gt;&lt;i&gt;Reads inside-out, generally bottom-to-top and right-to-left.&lt;/i&gt;&lt;/p&gt;
    &lt;p&gt;[TODO: code sample]&lt;/p&gt;
  &lt;/div&gt;
  &lt;div class=&quot;tab-pane fade&quot; id=&quot;monadic&quot;&gt;
    &lt;p&gt;&lt;i&gt;Reads top-to-bottom (with do-notation) and left-to-right (with bind operations).&lt;/i&gt;&lt;/p&gt;
    &lt;p&gt;[TODO: code sample]&lt;/p&gt;
  &lt;/div&gt;
  &lt;div class=&quot;tab-pane fade&quot; id=&quot;mixed&quot;&gt;
    &lt;p&gt;&lt;i&gt;Reads in multiple directions.&lt;/i&gt;&lt;/p&gt;
    &lt;p&gt;[TODO: code sample]&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
--&gt;


&lt;p&gt;Using a pure value within monadic code requires you to &amp;ldquo;lift&amp;rdquo; the pure value into a monad value with an explicit conversion. Similarly using a monadic value in multi-monadic code (created by a monad transformer) requires you to lift the monadic value into a multi-monad value first. These explicit conversions pepper and obscure the main program logic. One has to do an annoying amount of gymnastics to make the type system happy.&lt;/p&gt;

&lt;h3&gt;Code golf erodes readability&lt;/h3&gt;

&lt;p&gt;Another factor complicating the readability of code is the Haskell community&amp;rsquo;s propensity for &lt;em&gt;code golf&lt;/em&gt;: the tendancy to write code that is especially terse to the point of making it difficult to understand. There are many language and library features in Haskell that enable this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Overuse of operator overloading and custom operators:

&lt;ul&gt;
&lt;li&gt;The ability to mix custom infix and prefix operators in the same expression. Confusing.&lt;/li&gt;
&lt;li&gt;The ability to treat an infix operator as prefix or visa-versa, when using certain syntax. Inconsistent.&lt;/li&gt;
&lt;li&gt;The usage of custom operators in ambiguous fashion requiring knowledge of either the operator associativity or precedence to disambiguate. Requires non-local knowledge to parse expressions.

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;For example the &lt;code&gt;$&lt;/code&gt; operator appears to be a precedence hack to avoid the need to parenthesize an expression properly. I don&amp;rsquo;t think it worth introducing tricky syntax to avoid typing a single close paren.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Implicit partial application of functions. Infix operator sections.

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You must know the arity of a function to determine what an expression containing that function means.&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; Requires non-local knowledge to parse expressions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Point-free style.

&lt;ul&gt;
&lt;li&gt;Discourages the use of explaining variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Terseness at the expense of readability was a hallmark of Perl. I don&amp;rsquo;t find it any more attractive in Haskell.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a short example containing monadic code, point-free style, and an operator section.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-- Parses the expression in the first argument to the program, evaluates it, and prints the result.
main :: IO ()
main = getArgs &amp;gt;&amp;gt;= putStrLn . show . eval . readExpr . (!! 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I argue that the preceding code is manifestly confusing for any newcomer to Haskell, yet this type of code I see frequently in Haskell written by others.&lt;/p&gt;

&lt;p&gt;It is possible to rewrite the code to be more explicit:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;main = do args &amp;lt;- getArgs
          putStrLn (show (eval (readExpr (args !! 0))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although I think the preceding would not be considered idiomatic Haskell.&lt;/p&gt;

&lt;h3&gt;The end?&lt;/h3&gt;

&lt;p&gt;Haskell&amp;rsquo;s strong type system and heavy restrictions on mutable state provide good assurance that the programs you write are correct, assuming you manage to write the program in the first place.&lt;/p&gt;

&lt;p&gt;However I find Haskell difficult to write (due to monads and the type system) and difficult to read (due to code golf). I also do not require such a high assurance of correctness in the domains I work in. I typically find that a disciplined minimization of mutable state in other languages is sufficent to provide the necessary level of correctness I require, and with more flexibility during maintenance.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;Types of programs I might consider doing in Haskell include, for example, maze generators, Sudoku solvers (non-visual), parsers, and compilers. Games involving lots of state such as platformers, adventure games, or anything with multiple screens would be a pain. GUIs and other interactive programs based on events would be a pain.&lt;a href=&quot;#fnref:1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;A &lt;em&gt;monad&lt;/em&gt; is a particular pattern of sequencing computation involving the type system. The use of monads is unique to Haskell so far as I am aware.&lt;a href=&quot;#fnref:2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:3&quot;&gt;
&lt;p&gt;Granted it is possible to handle errors using &lt;a href=&quot;http://hackage.haskell.org/package/base-4.6.0.1/docs/Control-Exception.html#v%3athrow&quot;&gt;&lt;code&gt;throw&lt;/code&gt;&lt;/a&gt; but this is discouraged because it yields non-deterministic ordering with respect to I/O operations. It is also possible to use &lt;a href=&quot;http://hackage.haskell.org/package/base-4.6.0.1/docs/Control-Exception.html#v%3athrowIO&quot;&gt;&lt;code&gt;throwIO&lt;/code&gt;&lt;/a&gt; but only if the function is already in the IO monad. Should the function be otherwise pure, you&amp;rsquo;d be forced to &amp;ldquo;infect&amp;rdquo; it with the IO monad in order to use &lt;code&gt;throwIO&lt;/code&gt;.&lt;a href=&quot;#fnref:3&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:4&quot;&gt;
&lt;p&gt;Of course you could just incorporate the shared state into the parameters and return type of all functions, but this gets annoying fast. Granted it is possible to use &lt;a href=&quot;http://www.haskell.org/ghc/docs/latest/html/libraries/base/Data-IORef.html&quot;&gt;&lt;code&gt;IORef&lt;/code&gt;s&lt;/a&gt; if the function using state is already in the IO monad. Should the function be otherwise pure, you&amp;rsquo;d be forced to &amp;ldquo;infect&amp;rdquo; it with the IO monad in order to use &lt;code&gt;IORef&lt;/code&gt;s.&lt;a href=&quot;#fnref:4&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:5&quot;&gt;
&lt;p&gt;&lt;p&gt;I wrote an &lt;a href=&quot;/articles/2013/05/12/implicit-partial-application-and-currying-considered-harmful/&quot;&gt;entire article&lt;/a&gt; on just this point of implicit partial application being confusing. Unfortunately I think r/haskell was confused by my argument.&lt;/p&gt; &lt;p&gt;Consider the expression &lt;code&gt;f 3&lt;/code&gt; by itself, possibly part of a larger expression like &lt;code&gt;f 3 $ g&lt;/code&gt;. In a typical language I consider functions to be entities that take some fixed number of arguments and then produce a single result. This means that if I encounter a well-named function &lt;code&gt;f&lt;/code&gt; that I haven&amp;rsquo;t seen before, I can usually guess from its name what it does and what its return type is. I can also assume that an expression like &lt;code&gt;f 3&lt;/code&gt; will evaluate to this assumed return type.&lt;/p&gt; &lt;p&gt;In Haskell I cannot make that assumption: Support for implicit partial function application might mean that an expression &lt;code&gt;f 3&lt;/code&gt; might not evaluate to the return type of &lt;code&gt;f&lt;/code&gt;. I have to ask myself &amp;ldquo;Does it look like this function needs more arguments here to perform the action that its name suggests?&amp;rdquo;. If the answer is yes then I assume that the expression evaluates to a new function with some unknown number of arguments with the return type I expect. That&amp;rsquo;s very confusing. I object to the possibility that two function applications that begin with &lt;code&gt;f 3 ...&lt;/code&gt; could return different types of values.&lt;/p&gt;&lt;a href=&quot;#fnref:5&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

</description>
    </item>
    
    
    <item>
      <title>Scrivener: An IDE for thinkers, creators, and writers</title>
      <link>http://dafoster.net/articles/2013/10/27/scrivener-an-ide-for-thinkers-creators-and-writers/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Sun, 27 Oct 2013 00:00:00 -0700</pubDate>
      <guid>http://dafoster.net/articles/2013/10/27/scrivener-an-ide-for-thinkers-creators-and-writers</guid>
      <description>&lt;p&gt;Today I invested a few hours into learning &lt;a href=&quot;http://www.literatureandlatte.com/&quot;&gt;Scrivener&lt;/a&gt;, a tool created for the purpose of writing long-form texts such as books, screenplays, etc. However it wasn&amp;rsquo;t the word processing capabilities of Scrivener that caught my eye but rather its system for &lt;strong&gt;organizing&lt;/strong&gt; the fragments, research materials, and other documents that support the act of creating something new.&lt;/p&gt;

&lt;p&gt;I have been looking for a way to organize the disparate source material I&amp;rsquo;ve been collecting on a few large project areas. For example I&amp;rsquo;ve been investigating ways for make more interactive software development tools since being inspired by &lt;a href=&quot;http://worrydream.com/&quot;&gt;Bret Victor&lt;/a&gt;&amp;rsquo;s work.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve already been using &lt;a href=&quot;https://evernote.com/&quot;&gt;Evernote&lt;/a&gt; as a way to &lt;strong&gt;capture&lt;/strong&gt; sources of inspiration such as webpages, tech talk summaries, and research paper PDFs. However Evernote has a pretty terrible organizational model:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You have exactly one level of hierarchical nesting available in the form of &amp;ldquo;notebooks&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Within a notebook you have no ability to rearrange individual &amp;ldquo;notes&amp;rdquo; in a custom order.&lt;/li&gt;
&lt;li&gt;Notebooks themselves cannot be rearranged.&lt;/li&gt;
&lt;li&gt;The little tiles that preview individual notes cannot be customized in any way.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Scrivener on the other hand is extremely flexible with how it allows you to organize the documents that comprise a project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Documents can be rich-text, images, audio, or video. Rich-text documents can be edited natively.&lt;/li&gt;
&lt;li&gt;Documents can be given arbitrary names and reordered at will.&lt;/li&gt;
&lt;li&gt;Documents can be arbitrarily nested inside folders. And indeed inside other documents as well.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Folders can be viewed in &lt;strong&gt;corkboard mode&lt;/strong&gt; where items inside the folder are represented as index cards summarizing each item laid out on a virtual corkboard. This is great for getting an overview of a folder&amp;rsquo;s contents.

&lt;ul&gt;
&lt;li&gt;The text on an item&amp;rsquo;s index card can be customized.&lt;/li&gt;
&lt;li&gt;The corkboard can be put into a freeform mode where items can be rearranged at will in space. This is great for spatial organization.&lt;/li&gt;
&lt;li&gt;If a corkboard item itself contains multiple items, it appears as a &lt;em&gt;stack&lt;/em&gt; of index cards instead of just an individual index card. This is great for determining at a glance how &amp;ldquo;big&amp;rdquo; something actually is.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Items can be given a &lt;strong&gt;label&lt;/strong&gt; (with a color and name) and a &lt;strong&gt;status&lt;/strong&gt;, both of which are displayed visually on its summarizing index card. Custom metadata can be given as well. All of this metadata can be used for targeted searches.&lt;/li&gt;
&lt;li&gt;There are several ways to &lt;strong&gt;view and edit multiple documents at once&lt;/strong&gt;:

&lt;ul&gt;
&lt;li&gt;Selecting a folder displays all of its contained items as a single continuous editable document.&lt;/li&gt;
&lt;li&gt;Selecting multiple individual documents will also present a single continuous document.&lt;/li&gt;
&lt;li&gt;The main editor view can be split horizontally or vertically to allow working on two documents side-by-side, or the same document at two locations.&lt;/li&gt;
&lt;li&gt;Documents can be opened in separate QuickReference windows to arrange them off to the side.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Documents can be located using a targeted search.&lt;/li&gt;
&lt;li&gt;Folder (and file) icons can be customized. This great for indicating at a glance how &amp;ldquo;big&amp;rdquo; a folder is or what kind of thing it represents. A good set of built-in icons are provided, and you can add your own.&lt;/li&gt;
&lt;li&gt;Custom &lt;strong&gt;collections&lt;/strong&gt; of documents can be created that allow you to quickly browse between a subset of the documents in the project. These collections can be created manually, or automatically by a populating search.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Other nice features include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All changes to documents are saved automatically.&lt;/li&gt;
&lt;li&gt;Version control is built in, allowing you to take snapshots of a document at different times.

&lt;ul&gt;
&lt;li&gt;Previous versions can be restored if you made an undesirable change to the current version.&lt;/li&gt;
&lt;li&gt;Multiple versions can be compared using diffs that are aware of not just lines but also paragraphs, clauses, and individual words.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Right now my plan is to continue capturing source materal using Evernote, since it excels at capture. But then I&amp;rsquo;ll move the captured items over to Scrivener in order to actually organize them into something coherent I can chew on.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;There isn&amp;rsquo;t a strong distinction between folders and documents. Folders can themselves have textual content, although this isn&amp;rsquo;t common. Marking an item as a &amp;ldquo;folder&amp;rdquo; is mainly a hint to Scrivener that the item&amp;rsquo;s primary function is to group items together.&lt;a href=&quot;#fnref:1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

</description>
    </item>
    
    
    <item>
      <title>Shame on the NSA</title>
      <link>http://dafoster.net/articles/2013/10/21/shame-on-the-nsa/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Mon, 21 Oct 2013 00:00:00 -0700</pubDate>
      <guid>http://dafoster.net/articles/2013/10/21/shame-on-the-nsa</guid>
      <description>&lt;p&gt;I work in the data analysis industry and am appalled that the kinds of tools I am building are being abused by the government to spy on ordinary citizens without public oversight.&lt;/p&gt;

&lt;p&gt;This power is too easily used to harass and detain individuals who express an opinion disagreeing with those in power, such as the multiple extrajudicial actions taken against Edward Snowden and others for blowing the whistle on unethical government action.&lt;/p&gt;

&lt;p&gt;To summarize &lt;strong&gt;current NSA capabilities&lt;/strong&gt; that have been revealed:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The NSA can tap the email and phone of arbitrary persons solely on the authority of an analyst, without a warrant. Including US citizens.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Online texting and voice-over-IP services (i.e. online telephone) can also be tapped. Including Skype, the largest provider.&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The NSA can store the communications of US citizens for 5 years without a warrant.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The NSA is tapping into not just the communications of individuals or particular corporations, but also into the internet backbone itself. This covers ALL non-encrypted internet communications passing through the US.&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As for encrypted communications, the NSA has been deliberately attempting to insert backdoors and weaknesses into the standard encryption mechanisms used to conduct trusted communications on the internet.&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;But often there is no need to break encryption: The most popular online service providers are compelled to provide data directly from their servers to the NSA under the PRISM program. As of late 2012 this affects services provided by Microsoft, Yahoo, Google, Facebook, PalTalk, YouTube, Skype, AOL, and Apple.&lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;#fn:6&quot; rel=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;This behavior is wildly in violation of the 4th Amendment, which is intended to protect Americans against unreasonable search and seizures. I don’t care if there is a lower law such as the Patriot Act which supposedly authorizes these actions. I am sure that was never the intent of Congress.&lt;/p&gt;

&lt;p&gt;I think the best starting point to counter these encroachments is to directly &lt;strong&gt;fight back against the most egregious violations&lt;/strong&gt;. In particular I find the lack of any court oversight over individual NSA analysts to be especially distressing.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;d like to join me in this first battle, please &lt;strong&gt;&lt;a href=&quot;http://bit.ly/nsatap&quot;&gt;sign my petition&lt;/a&gt;&lt;/strong&gt; to stop NSA analysts from being able to wiretap people without oversight and &lt;strong&gt;share it with others&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bit.ly/nsatap&quot;&gt;Stop NSA analysts from wiretapping people without due process&lt;/a&gt;&lt;br/&gt;
&lt;u&gt;&lt;a href=&quot;http://bit.ly/nsatap&quot;&gt;http://bit.ly/nsatap&lt;/a&gt;&lt;/u&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I expect this will be a long war. &lt;!-- But worth fighting for. --&gt;&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://news.cnet.com/8301-13578_3-57589495-38/nsa-spying-flap-extends-to-contents-of-u.s-phone-calls/&quot;&gt;http://news.cnet.com/8301-13578_3-57589495-38/nsa-spying-flap-extends-to-contents-of-u.s-phone-calls/&lt;/a&gt;&lt;a href=&quot;#fnref:1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://arstechnica.com/tech-policy/2013/07/nsa-taps-skype-chats-newly-published-snowden-leaks-confirm/&quot;&gt;http://arstechnica.com/tech-policy/2013/07/nsa-taps-skype-chats-newly-published-snowden-leaks-confirm/&lt;/a&gt;&lt;a href=&quot;#fnref:2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:3&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://www.theguardian.com/world/2013/jun/20/fisa-court-nsa-without-warrant&quot;&gt;http://www.theguardian.com/world/2013/jun/20/fisa-court-nsa-without-warrant&lt;/a&gt;&lt;a href=&quot;#fnref:3&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:4&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://www.wired.com/threatlevel/2013/08/nsa-tapping-internet/&quot;&gt;http://www.wired.com/threatlevel/2013/08/nsa-tapping-internet/&lt;/a&gt;&lt;a href=&quot;#fnref:4&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:5&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.schneier.com/blog/archives/2013/09/the_nsa_is_brea.html&quot;&gt;https://www.schneier.com/blog/archives/2013/09/the_nsa_is_brea.html&lt;/a&gt;&lt;a href=&quot;#fnref:5&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:6&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://img.washingtonpost.com/wp-srv/special/politics/prism-collection-documents/images/prism-slide-5.jpg&quot;&gt;http://img.washingtonpost.com/wp-srv/special/politics/prism-collection-documents/images/prism-slide-5.jpg&lt;/a&gt;&lt;a href=&quot;#fnref:6&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

</description>
    </item>
    
    
    <item>
      <title>WA Initiative 522: GMO Food Labeling</title>
      <link>http://dafoster.net/articles/2013/10/04/washington-initiative-522-labeling-of-gmo-foods/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Fri, 04 Oct 2013 00:00:00 -0700</pubDate>
      <guid>http://dafoster.net/articles/2013/10/04/washington-initiative-522-labeling-of-gmo-foods</guid>
      <description>&lt;p&gt;This Washington state initiative requires foods that are themselves GMO to be labeled as such. Exempt are foods containing 0.9% or less of potentially GMO ingredients.&lt;/p&gt;

&lt;p&gt;The system for enforcing these restrictions requires farmers to track the origin of ingredients more carefully. It also requires farmers to have special labeling requirements for WA that differ from the rest of the United States.&lt;/p&gt;

&lt;p&gt;Summary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Good for consumer health and choice.&lt;/li&gt;
&lt;li&gt;Bad for farm companies and independent farmers since they will have to adapt to new regulation.

&lt;ul&gt;
&lt;li&gt;However the labeled versions of their products may now be exported overseas, where GMO-labeling requirements are common in other first-world countries.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Products that wish to avoid the &amp;ldquo;may contain GMOs&amp;rdquo; label will be more expensive to produce and therefore will cost more in supermarkets. The majority of products, which I assume are GMO, should remain unaffected.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Other notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I do not appreciate the &amp;ldquo;No on 522&amp;rdquo; site not providing access to the original bill text, instead providing only their own summaries of the bill provisions.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Verdict:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Yes for 522.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Full Text: &lt;a href=&quot;http://yeson522.com/about/read/&quot;&gt;http://yeson522.com/about/read/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pro: &lt;a href=&quot;http://yeson522.com/&quot;&gt;http://yeson522.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Con: &lt;a href=&quot;http://www.votenoon522.com/&quot;&gt;http://www.votenoon522.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    
    
    <item>
      <title>Strange Loop 2013 Highlights</title>
      <link>http://dafoster.net/articles/2013/09/30/strange-loop-2013-highlights/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Mon, 30 Sep 2013 00:00:00 -0700</pubDate>
      <guid>http://dafoster.net/articles/2013/09/30/strange-loop-2013-highlights</guid>
      <description>&lt;p&gt;This year I attended &lt;a href=&quot;https://thestrangeloop.com/&quot;&gt;Strange Loop&lt;/a&gt;, a conference on emerging tools, languages, and trends in software. I found the following sessions to be most interesting.&lt;/p&gt;

&lt;p&gt;Session videos are available for attendees now, and for the general public closer to March 2014.&lt;/p&gt;

&lt;h2&gt;Emerging Languages Camp&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/presentations/noether&quot;&gt;&lt;strong&gt;Noether: Symmetry in Programming Language Design&lt;/strong&gt;&lt;/a&gt; - Daira Hopwood - 45 min

&lt;ul&gt;
&lt;li&gt;A language system, composed of several different language levels, each level breaking successively more symmetries to gain expressive power at the expense of static reasoning about the program&amp;rsquo;s behavior. Very flexible.&lt;/li&gt;
&lt;li&gt;This is the only language presented during the Emerging Languages Camp that had a strong theoretical foundation.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I will definitely be looking into this language family when it has been implemented.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/presentations/nimrod&quot;&gt;&lt;strong&gt;Nimrod: A new approach to meta programming&lt;/strong&gt;&lt;/a&gt; - Andreas Rumpf - 25 min

&lt;ul&gt;
&lt;li&gt;A new statically-typed systems language. Full-featured.&lt;/li&gt;
&lt;li&gt;Already has non-trivial tooling, such as an IDE.&lt;/li&gt;
&lt;li&gt;Has a realtime garbage collector, macros, whole program dead code elimination, and generics.&lt;/li&gt;
&lt;li&gt;Can automatically promote sideeffect-free functions to &lt;em&gt;compile&lt;/em&gt;-time execution.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compile-time optimizations on the AST can be coded directly in Nimrod. This is similar to macros but acts like a global peephole optimization. Very powerful.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/presentations/j-language&quot;&gt;&lt;strong&gt;The J Programming Language&lt;/strong&gt;&lt;/a&gt; -  Tracy Harms - 27 min

&lt;ul&gt;
&lt;li&gt;An array-based data language.&lt;/li&gt;
&lt;li&gt;Successor to the famous &lt;a href=&quot;https://en.wikipedia.org/wiki/APL_(programming_language)&quot;&gt;APL language&lt;/a&gt;, which allows very succinct representations of numeric computations. Although extremely hard to read for those unfamiliar with the syntax:

&lt;ul&gt;
&lt;li&gt;Find all prime numbers: &lt;code&gt;(~R∊R∘.×R)/R←1↓ιR&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Conway&amp;rsquo;s Game of Life: &lt;code&gt;life←{↑1 ⍵∨.∧3 4=+/,¯1 0 1∘.⊖¯1 0 1∘.⌽⊂⍵}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you&amp;rsquo;ve never used an array-based numerical language before, this is a great beginner&amp;rsquo;s introduction.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/presentations/bodol&quot;&gt;&lt;strong&gt;BODOL, or How To Accidentally Build Your Own Language&lt;/strong&gt;&lt;/a&gt; - Bodil Stokke - 42 min

&lt;ul&gt;
&lt;li&gt;A guide to implementing your own language on top of Clojure.&lt;/li&gt;
&lt;li&gt;A very entertaining presentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;Honorable Mention:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/presentations/qbrt-bytecode&quot;&gt;&lt;strong&gt;Qbrt Bytecode: Interface Between Code and Execution&lt;/strong&gt;&lt;/a&gt; - Matthew Graham - 26 min

&lt;ul&gt;
&lt;li&gt;A bytecode assembly language with builtin primitives for concurrency and inline asynchronous I/O.&lt;/li&gt;
&lt;li&gt;I liked the presentation itself although I&amp;rsquo;m not sure I&amp;rsquo;d want to use Qbert for any of my own projects.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Unsessions&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;QuickCheck&lt;/strong&gt; - no video available

&lt;ul&gt;
&lt;li&gt;QuickCheck is a testing tool that automatically generates test cases for a program given a description of its inputs, outputs, and expected semantics. Quite powerful.&lt;/li&gt;
&lt;li&gt;When a failing test case is found, QuickCheck is able to automatically reduce the test case to the &lt;em&gt;minimal&lt;/em&gt; reproducing test case. Extremely useful.&lt;/li&gt;
&lt;li&gt;Although QuickCheck was originally written for Haskell, there are now ports to several other languages.&lt;/li&gt;
&lt;li&gt;There a commercial versions of QuickCheck that are superior to the open-source versions in a few ways.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Sessions &amp;amp; Themes&lt;/h2&gt;

&lt;h3&gt;Async &lt;small&gt;(Reducing callback hell)&lt;/small&gt;&lt;/h3&gt;

&lt;p&gt;If you only watch one of these presentations, pick the Clojure one.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Async in C# and F#&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Although not presented at Strange Loop, the implementation of the &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; keywords in C# and F# seems to have greatly inspired similar mechanisms in other languages.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; avoids the callback hell problem often seen in JavaScript, where a series of nested callbacks just keeps increasing the indentation level of the code. And callbacks in the midst of complex control flow like loops are even more problematic.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/presentations/scala-async&quot;&gt;&lt;strong&gt;Async in Scala&lt;/strong&gt;&lt;/a&gt; - Philipp Haller - 44 min

&lt;ul&gt;
&lt;li&gt;Similar to async/await in C# and F#.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implemented in Scala as a macro, using the experimental support for Scala macros.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/presentations/clojure-core-async&quot;&gt;&lt;strong&gt;Async in Clojure: Channels &amp;amp; Queues&lt;/strong&gt;&lt;/a&gt; - Rich Hickey - 44 min

&lt;ul&gt;
&lt;li&gt;Appears to be different in spirit to the async-implementation in other languages: Seems to be intended for implementing &lt;em&gt;channels&lt;/em&gt; (from the Go language), rather than attempting to target the callback hell problem.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The presentation itself has some interesting general thoughts on concurrency in software.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Async in Python&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Again, not presented at Strange Loop, but it appears that the &lt;code&gt;yield from&lt;/code&gt; expression in Python 3 can be used to implement C#/F#-style async/await. I need to look into this.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Creativity and Artificial Intelligence&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/presentations/ai-machine-creativity&quot;&gt;&lt;strong&gt;Creative Machines&lt;/strong&gt;&lt;/a&gt; - Joseph Wilk - 41 min

&lt;ul&gt;
&lt;li&gt;Interesting philosohpical discussion on how computers can create creative things.&lt;/li&gt;
&lt;li&gt;Teaching computers to play music.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Joseph&amp;rsquo;s program for creating music compositions makes, in his opinion, better music than he could compose himself. This brings up the interesting observation that a student, in this case a computer, can surpass the teacher. This is not unheard of when both teacher and student are human, but it&amp;rsquo;s a bit uncomfortable to conventional thinking when the student is a &amp;ldquo;soulless&amp;rdquo; or &amp;ldquo;non-understanding&amp;rdquo; computer and the teacher is a &amp;ldquo;sentient&amp;rdquo; human.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/presentations/nintendo-automation&quot;&gt;&lt;strong&gt;Learnfun and Playfun: A Nintendo automation system&lt;/strong&gt;&lt;/a&gt; - Tom Murphy VII - 28 min

&lt;ul&gt;
&lt;li&gt;Teaching computers to play video games.&lt;/li&gt;
&lt;li&gt;I found it particularly amusing that the computer learned to manipulate the random number generator (by pausing the game for calculated periods) to create its own luck. In pinball games this allowed the computer to play perfectly.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Theory Meets Practice&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/presentations/data-types-issues&quot;&gt;&lt;strong&gt;The Trouble With Types&lt;/strong&gt;&lt;/a&gt; - Martin Odersky - 49 min

&lt;ul&gt;
&lt;li&gt;A balanced description of static vs. dynamic types, a classic debate in computing.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Martin himself, being the creator of Scala, is firmly in the static typing camp but still provides a good overview of when dynamic typing is useful as well.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/presentations/abstract-algebra-analytics&quot;&gt;&lt;strong&gt;Add ALL the things: abstract algebra meets analytics&lt;/strong&gt;&lt;/a&gt; - Avi Bryant - 37 min

&lt;ul&gt;
&lt;li&gt;A good introduction to parts of category theory, using analytics systems for concrete examples throughout the talk.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There was another presentation on category theory at Strange Loop but I found this talk far easier to follow.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/presentations/reimagining-software&quot;&gt;&lt;strong&gt;Finding a way out&lt;/strong&gt;&lt;/a&gt; - Chris Granger - 33 min

&lt;ul&gt;
&lt;li&gt;Thoughts on the future of programming and how it can be made better.&lt;/li&gt;
&lt;li&gt;The second half of the presentation walks through a demo of Aurora, a new alpha-stage tool that Chris is working on, incorporating some of Chris&amp;rsquo;s new thoughts on the programming process.&lt;/li&gt;
&lt;li&gt;Chris Granger is the creator of Light Table, a visual programming environment that attempts to bring improved interactivity and feedback to the development process. Light Table is inspired by Bret Victor&amp;rsquo;s excellent talk &lt;a href=&quot;http://vimeo.com/36579366&quot;&gt;Inventing on Principle&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Tools&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/presentations/javascript-asmjs&quot;&gt;&lt;strong&gt;Native Speed on the Web: JavaScript and asm.js&lt;/strong&gt;&lt;/a&gt; - Alon Zakai - 30 min

&lt;ul&gt;
&lt;li&gt;Useful overview of asm.js, which can compile C/C++ to fast JavaScript.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This capability is very exciting since it can connect programs written for the traditional desktop environment to the web deployment platform. For example my efforts at making old Mac software easy to emulate on modern hardware, which currently requires installation on a desktop computer, could be altered to be widely deployable to the web.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/presentations/birth-death-javascript&quot;&gt;&lt;strong&gt;The Birth &amp;amp; Death of JavaScript&lt;/strong&gt;&lt;/a&gt; - Gary Bernhardt - 20 min (without comments) or 40 min (with)

&lt;ul&gt;
&lt;li&gt;A very creative presentation on how asm.js could be used to make major changes to computing, bringing all traditional desktop applications to the browser.&lt;/li&gt;
&lt;li&gt;Uses the narrative style of presenting as if from a different time period, also used to great effect in Bret Victor&amp;rsquo;s talk on &lt;a href=&quot;http://vimeo.com/71278954&quot;&gt;The Future of Programming&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Minorities in Computing&lt;/h3&gt;

&lt;h4&gt;Women&lt;/h4&gt;

&lt;p&gt;It&amp;rsquo;s been known for some time that women are strongly underrepresented in computing. I know they&amp;rsquo;re falling out of the training pipeline early as I receive almost no women applicants to the Splunk Seattle office.&lt;/p&gt;

&lt;p&gt;So far the primary discouraging factors I&amp;rsquo;ve been able to identify include a lack of female role models in software and a hostile learning environment created by guys when girls try to enter the field.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/presentations/software-development-everyone&quot;&gt;&lt;strong&gt;Making Software Development Make Sense to Everyone&lt;/strong&gt;&lt;/a&gt; - Jen Myers - 58 min

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Very informative. Full of data and ideas.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rails Girls: Empowering women through code&lt;/strong&gt; - Adriana Palacio, Laura Garcia - 13 min

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Key takeaway is that there are a lack of female role models in computing.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/presentations/history-women-technology&quot;&gt;&lt;strong&gt;The History of Women in Technology&lt;/strong&gt;&lt;/a&gt; - Sarah Dutkiewicz - 40 min

&lt;ul&gt;
&lt;li&gt;Reviews a number of important women in computing. Unfortunately very few from the modern era.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;Kids&lt;/h4&gt;

&lt;p&gt;It is also difficult to get kids into computing. No longer are computers widely shipped with BASIC interpreters, HyperCard, or other well-designed introductory programming environments that kids can just jump into. Additionally the bar for what is considered an acceptable game or program has risen considerably, making it harder to get excited about simple programs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/presentations/hopscotch&quot;&gt;&lt;strong&gt;How to teach your kid to code with Hopscotch&lt;/strong&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Hopscotch is a visual programming language for the iPad designed to help kids get started with programming.&lt;/li&gt;
&lt;li&gt;Another system for introducing kids to programming is &lt;a href=&quot;http://scratch.mit.edu/&quot;&gt;Scratch&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Notes:

&lt;ul&gt;
&lt;li&gt;Finding good &lt;em&gt;ideas&lt;/em&gt; for programs is tricky. For kids, ideas have to be applicable to their cultural context. Drawing things is more interesting than scraping Twitter.&lt;/li&gt;
&lt;li&gt;Making all available tools and commands &lt;em&gt;visible&lt;/em&gt; is important for a system designed for learning.&lt;/li&gt;
&lt;li&gt;The game of &amp;ldquo;program your parent&amp;rdquo; is amusing.&lt;/li&gt;
&lt;li&gt;Traditional editors, code, and IDEs actually look rather intimidating to new users. It&amp;rsquo;s like a non-aviation operator being confronted with the full control panel of an airplane cockpit.&lt;/li&gt;
&lt;li&gt;Poor typing skills is a non-trivial barrier for young kids.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Other&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/presentations/style-methodology&quot;&gt;&lt;strong&gt;Exercises in Style&lt;/strong&gt;&lt;/a&gt; - Crista Lopes - 39 min

&lt;ul&gt;
&lt;li&gt;A fascinating experient where the same program is written in several different styles.&lt;/li&gt;
&lt;li&gt;This experiment makes it obvious that not only are there lots of ways of writing the same program, but also that different languages encourage different styles.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The material in this presentation will eventually be incorporated into a book &lt;a href=&quot;http://www.amazon.com/gp/product/1482227371/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1482227371&amp;amp;linkCode=as2&amp;amp;tag=dafo07-20&quot;&gt;Exercises in Programming Style&lt;/a&gt; that will be released in Spring of 2014. I&amp;rsquo;m definitely getting a copy.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/presentations/php-history&quot;&gt;&lt;strong&gt;Taking PHP Seriously&lt;/strong&gt;&lt;/a&gt; - Keith Adams - 40 min

&lt;ul&gt;
&lt;li&gt;Reviews the &lt;em&gt;good&lt;/em&gt; parts of PHP.&lt;/li&gt;
&lt;li&gt;Introduces Hack, a gradually-typed version of PHP that in production use at Facebook.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The HipHop project also includes a lot of useful tools such as a debugger, profiler, and IDE integration.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;!--
* [**Programming a 144-computer chip to minimize power**](http://www.infoq.com/presentations/power-144-chip) - Chuck Moore - 40 min
    * A custom hardware programming environment for programming very low power applications.
    * Easily the lowest-level talk at the conference. Basically involves using a custom assembly language. Includes tips and tricks to optimize the assembly for the hardware and power.
    * Skip this presentation if low-level programming and bit twiddling isn't your thing.
--&gt;

</description>
    </item>
    
    
    <item>
      <title>Regular Expressions</title>
      <link>http://dafoster.net/articles/2013/09/04/regular-expressions/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Wed, 04 Sep 2013 00:00:00 -0700</pubDate>
      <guid>http://dafoster.net/articles/2013/09/04/regular-expressions</guid>
      <description>&lt;p&gt;Regular expressions are a concise way to search and transform strings using patterns. They are available in numerous text editors and programming languages.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/articles/2013/09/04/regular-expressions/&quot;&gt;Read more&amp;hellip;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    
    <item>
      <title>How I learn new programming languages</title>
      <link>http://dafoster.net/articles/2013/08/25/how-i-learn-new-programming-languages/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Sun, 25 Aug 2013 00:00:00 -0700</pubDate>
      <guid>http://dafoster.net/articles/2013/08/25/how-i-learn-new-programming-languages</guid>
      <description>&lt;p&gt;I don&amp;rsquo;t learn new programming languages very often. It simply requires an enormous amount of time to properly understand the local philosophy, community, tools, and ecosystem. But every so often I see a glimmer in an unfamilar language that merits me picking it up.&lt;/p&gt;

&lt;p&gt;Very recently I decided to learn Clojure to fulfill my future needs for a high-power language&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Before embarking on this journey, I thought it would be valuable to reflect on how I&amp;rsquo;ve learned other languages in the past and why I learned them.&lt;/p&gt;

&lt;div class=&quot;toc&quot;&gt;
  &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#my-journey&quot;&gt;My Journey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#patterns-of-learning&quot;&gt;Patterns of Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#appendix&quot;&gt;Appendix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/div&gt;


&lt;p&gt;&lt;a id=&quot;my-journey&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;My Journey&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HyperTalk &amp;amp; HyperCard&lt;/strong&gt; &amp;ndash; Play

&lt;ul&gt;
&lt;li&gt;This was my first programming language, first used at age 6.&lt;/li&gt;
&lt;li&gt;The HyperCard environment was sufficiently well designed that I could &lt;em&gt;play&lt;/em&gt; with existing programs, copy bits and pieces to assemble my own, and eventually build components from scratch.&lt;/li&gt;
&lt;li&gt;The physicality of the system, the straightforward syntax, and the composability of program elements enabled this kind of play. I do not know of any programming environments today in which this would be possible.

&lt;ul&gt;
&lt;li&gt;Visual Basic is promising, although I&amp;rsquo;ve never used it. It has physicality and native graphics.&lt;/li&gt;
&lt;li&gt;DarkBASIC is also promising for making 3D games, although I haven&amp;rsquo;t used it for anything serious. It has native 3D graphics.&lt;/li&gt;
&lt;li&gt;Python has a REPL that you can experiment with and has reasonably straightforward and consistent syntax. However it has no native graphics and no physicality.&lt;/li&gt;
&lt;li&gt;Processing has a built-in graphics. But it&amp;rsquo;s not designed for composability at all, meaning that you can&amp;rsquo;t mix and match parts from different programs. Its function naming is also haphazard and inconsistent.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;My game &lt;a href=&quot;/prism/projects/dungeons/&quot;&gt;Dungeons&lt;/a&gt; was the most advanced program I wrote in HyperCard. Other kids at National Computer Camp would line up at my computer who wanted to play it - a very humbling experience.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BASIC, Pascal&lt;/strong&gt; &amp;ndash; Instructional Setting

&lt;ul&gt;
&lt;li&gt;At age 8 I picked these languages up at National Computer Camp because the instructors insisted on learning them before going on to other languages. &lt;!-- With my prior two years of HyperTalk and general programming experience, I blew through these languages very quickly. --&gt;&lt;/li&gt;
&lt;li&gt;These were my first compiled languages.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Neither of these languages were distinctive enough for me to keep using.&lt;br/&gt;
I did no major projects in these languages.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;C, C++&lt;/strong&gt; &amp;ndash; Brute Force, Instructional Setting

&lt;ul&gt;
&lt;li&gt;I learned these to interface directly with the Mac operating system and to do programs in color, since HyperCard only supported black &amp;amp; white graphics.&lt;/li&gt;
&lt;li&gt;I also had some instructional assistance at National Computer Camp during the summer.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I wish I could remember how I internalized pointers and manual memory management, since these are some of the most confusing bits of these languages for beginners. And most annoying for experts.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Java&lt;/strong&gt; &amp;ndash; Brute Force

&lt;ul&gt;
&lt;li&gt;I initially learned Java in 2001 when I tried to write RealMediaFixer in C++.&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; When doing this I discovered that CodeWarrior&amp;rsquo;s buffered I/O implementation was busted on Mac OS, behaving in a nondeterministic fashion. So I picked the most similar-looking language to C++ I&amp;rsquo;d heard of, namely Java, and ported RealMediaFixer to use it instead. It worked on the first try and I didn&amp;rsquo;t look back to C++ for several years. (After all, why would I use a language where &lt;em&gt;I/O&lt;/em&gt; was broken?)&lt;/li&gt;
&lt;li&gt;I just wrote tons and tons of programs in Java for the next 8 years or so, through the rest of middle school, high school, and college.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;I also had some early instructional assistance at National Computer Camp. I am forever grateful to whatever instructor introduced me to the &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/&quot;&gt;Java API documentation&lt;/a&gt;, allowing me to teach myself arbitrary parts of the Java standard library without relying on books or tutorials. Once you can teach yourself, the learning game is really on.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;My Java decompiler &lt;a href=&quot;/prism/projects/decomp/&quot;&gt;decomp4&lt;/a&gt; was the most advanced program I wrote in Java.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Python&lt;/strong&gt; &amp;ndash; Targeted Large Projects

&lt;ul&gt;
&lt;li&gt;While interning at Google in 2008 I noticed that they had three primary languages: Java, C++, and Python. Since Google engineers were the smartest group of developers I&amp;rsquo;d ever run into, I figured they might be on to something with Python. So I started reading about Python and its capabilities.&lt;/li&gt;
&lt;li&gt;My first attempt at a real program was the implementing of DiskSurveyorX in late 2008, a disk space visualizer.&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; Unfortunately the best GUI toolkit available in Python, wxPython, I found to be far too clunky to use. So I ended up reverting to implementing in Java using the Swing toolkit.&lt;/li&gt;
&lt;li&gt;My second and successful attempt to write a substantial Python program was &lt;a href=&quot;/projects/crystal-web-archiver/&quot;&gt;Crystal Web Archiver&lt;/a&gt; in late 2011, a website downloader and archival system.

&lt;ul&gt;
&lt;li&gt;Again I had to use wxPython. This time though I ended up writing an abstraction layer over the worst parts to remove much of the pain.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python is currently my favorite language for general purpose programming. Particularly for scripting, data analysis, and other kinds of exploratory work.&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JavaScript&lt;/strong&gt; &amp;ndash; Socialization, Brute Force (via Employment)

&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;ve been using JavaScript, HTML, and CSS since mid-2012 to create rich web applications, primarily in the form of Splunk&amp;rsquo;s app development framework. JavaScript was chosen because it is the lingua-franca of web development and because of its enormous leveragable ecosystem of libraries such as JQuery, Backbone, and Bootstrap.&lt;/li&gt;
&lt;li&gt;Advanced JavaScript is almost impossible to learn on your own because there is no patron company that controls it nor is there a Benevolent Dictator for Life to provide officially blessed documentation or tutorials for how to use the language effectively. And this language has a sufficiently large number of design flaws that you need to learn to use it in a &lt;em&gt;disciplined&lt;/em&gt; fashion.&lt;/li&gt;
&lt;li&gt;I wouldn&amp;rsquo;t have been able to get far in JavaScript without help from my coworker Itay who was already proficient. Should you not have access to such a resource probably the next-best thing is to look for non-trivial projects on Github and read them. For example I learned a lot by playing with &lt;a href=&quot;http://browserquest.mozilla.org/&quot;&gt;BrowserQuest&lt;/a&gt; and reading its &lt;a href=&quot;https://github.com/mozilla/BrowserQuest&quot;&gt;source code&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;patterns-of-learning&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Patterns of Learning&lt;/h2&gt;

&lt;p&gt;The primary patterns observed in my learning journey above include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Play&lt;/strong&gt; &amp;ndash; undirected learning, by oneself

&lt;ul&gt;
&lt;li&gt;This only works well with exceptionally well-designed programming environments. Sadly there are very few modern environments that fit the bill.

&lt;ul&gt;
&lt;li&gt;HyperCard is dead. Visual Basic is dying. DarkBASIC is not well known.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Processing and Racket work okay but have some issues.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Brute Force&lt;/strong&gt; &amp;ndash; writing lots and lots of programs

&lt;ul&gt;
&lt;li&gt;This method will certainly give you the most understanding. It also takes the most time.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Having access to a mentor to check your work is useful but not required.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Targeted Large Projects&lt;/strong&gt; &amp;ndash; writing a small number of projects geared toward getting the most experience

&lt;ul&gt;
&lt;li&gt;This is similar to the &amp;ldquo;brute force&amp;rdquo; approach but is more &lt;a href=&quot;http://expertenough.com/1423/deliberate-practice&quot;&gt;tactical&lt;/a&gt;. It also requires more mental effort.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;These primary patterns are coupled with a few secondary patterns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Instructional Setting&lt;/strong&gt; &amp;ndash; taking a class to learn basic and intermediate skills

&lt;ul&gt;
&lt;li&gt;I only found taking classes to be useful when my programming foundations were weak. Such classes provide very little value to me today.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Note that taking a class isn&amp;rsquo;t enough by itself. You have to practice on your own outside the class and after the class is finished.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Socialization&lt;/strong&gt; &amp;ndash; working with other developers to learn intermediate and advanced skills

&lt;ul&gt;
&lt;li&gt;Some things you can only learn efficiently from other developers.&lt;/li&gt;
&lt;li&gt;Socialization is particularly useful for learning things in a highly fragmented ecosystem (such as JavaScript) or in settings with advanced concepts (such as overall program architecture or the functional programming paradigm).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;appendix&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Appendix&lt;/h2&gt;

&lt;p&gt;There are a few languages I learned enough of to decide they weren&amp;rsquo;t worth using in new projects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PHP&lt;/strong&gt; &amp;ndash; most widely deployed server-side web language

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/&quot;&gt;Just say no.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ruby&lt;/strong&gt; &amp;ndash; used primarily as a server-side web language

&lt;ul&gt;
&lt;li&gt;Insufficiently distinct from Python.&lt;/li&gt;
&lt;li&gt;Poor backward compatibility guarantees. No release notes.&lt;/li&gt;
&lt;li&gt;Sloppy design: Non-formal grammar. Syntax schizophrenia. Monkeypatching accepted as a valid practice. Mutable strings. &lt;!-- Non-uniform string representation. --&gt;&lt;/li&gt;
&lt;li&gt;But superior packaging, dependency management, and isolation systems.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;&lt;em&gt;Related Articles&lt;/em&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/articles/2013/01/29/unique-features-of-various-programming-languages/&quot;&gt;Unique Features of Various Programming Languages&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Describes unique features of several languages mentioned in this article.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;Paul Graham&amp;rsquo;s essays on &lt;a href=&quot;http://www.paulgraham.com/icad.html&quot;&gt;Lisp and language power&lt;/a&gt; are a thought-provoking read. By my assessment the current most-powerful languages out there are &lt;a href=&quot;http://www.haskell.org/&quot;&gt;Haskell&lt;/a&gt; and various members of the Lisp family (ex: Scheme, &lt;a href=&quot;http://racket-lang.org/&quot;&gt;Racket&lt;/a&gt;, &lt;a href=&quot;http://clojure.org/&quot;&gt;Clojure&lt;/a&gt;). I&amp;rsquo;ve decided to pass over Haskell for the time being for a number of reasons, particularly because of its high learning curve. I will probably return to it eventually.&lt;a href=&quot;#fnref:1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;&lt;strong&gt;RealMediaFixer&lt;/strong&gt; was a program I wrote that repaired RealMedia (&lt;code&gt;.rm&lt;/code&gt;) files playable in RealPlayer. Such files downloaded over dialup would often get subtlely corrupted. Since downloading a 30-minute video could easily take a day it was more practical to try repairing the broken file rather than redownloading it.&lt;a href=&quot;#fnref:2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:3&quot;&gt;
&lt;p&gt;I have a huge trove of Java programs from this time period I&amp;rsquo;d like to publish some day. A very small subset of these programs are listed on &lt;a href=&quot;/prism/projects/&quot;&gt;my old projects page&lt;/a&gt;.&lt;a href=&quot;#fnref:3&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:4&quot;&gt;
&lt;p&gt;&lt;strong&gt;DiskSurveyorX&lt;/strong&gt; was a disk space visualizer program that used similar visualizations as the original DiskSurveyor program for classic Mac OS. It however had some nice usability improvements pulled from my learnings from the information visualization class I took at the Technische Universität München. A modern disk space visualizer that uses a similar visualization is &lt;a href=&quot;http://www.daisydiskapp.com/&quot;&gt;DaisyDisk&lt;/a&gt;, which I highly recommend.&lt;a href=&quot;#fnref:4&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:5&quot;&gt;
&lt;p&gt;For desktop GUI development, the Java + Swing combination is still my favorite. Followed closely by the Objective-C + Cocoa + Mac combination. I don&amp;rsquo;t care about GUI programs on Windows or Linux. However now practically all GUI development is going to the web, where solutions based on HTML + CSS + JavaScript reign supreme.&lt;a href=&quot;#fnref:5&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

</description>
    </item>
    
    
    <item>
      <title>Interactive Computing</title>
      <link>http://dafoster.net/articles/2013/08/19/interactive-computing/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Mon, 19 Aug 2013 00:00:00 -0700</pubDate>
      <guid>http://dafoster.net/articles/2013/08/19/interactive-computing</guid>
      <description>&lt;p&gt;I spent a considerable amount of time yesterday going through the work of &lt;a href=&quot;http://worrydream.com/&quot;&gt;Bret Victor&lt;/a&gt;, who appears to be on a personal mission to bring interactive computing to mainstream developers. The tools he&amp;rsquo;s prototyping and building are just incredible.&lt;/p&gt;

&lt;p&gt;What the heck do I mean by &lt;em&gt;interactive computing&lt;/em&gt; you ask? This is perhaps best demonstrated by examples from Bret&amp;rsquo;s portfolio:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://vimeo.com/36579366&quot;&gt;&lt;strong&gt;Inventing on Principle&lt;/strong&gt;&lt;/a&gt; (54 minutes)

&lt;ul&gt;
&lt;li&gt;Shows 5 different demos where Bret has programs or other complex objects where he can tweak the object at runtime and get immediate feedback. This is incredibly empowering.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It makes me feel that a lot of the developer tools I&amp;rsquo;ve been using are obsolete. Particularly for advanced applications that involve the analysis and exploration of data.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://worrydream.com/LadderOfAbstraction/&quot;&gt;&lt;strong&gt;Up and Down the Ladder of Abstraction&lt;/strong&gt;&lt;/a&gt; (13 pages)

&lt;ul&gt;
&lt;li&gt;Shows how an algorithm based on tunable parameters can be inspected and modified at runtime with immediate feedback.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;By happenstance I&amp;rsquo;ve been fighting the problem of lacking immediate feedback recently: I&amp;rsquo;ve been writing a number of tools for processing complex semi-structured information where the algorithms needed a lot of tweaking.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; To gain a limited form of live tweaking I wrote a &lt;a href=&quot;http://dafoster.net/articles/2013/08/13/fixing-a-function-at-runtime-without-restarting-the-program/&quot;&gt;function decorator&lt;/a&gt; that allowed me to modify and reload functions at runtime without interrupting the program. The tools that Bret is prototyping are considerably more advanced than this, allowing changes to individual expressions without even a reload step.&lt;/p&gt;

&lt;p&gt;Other small steps in the direction of interactivity in mainstream environments include the display of non-text results in interactive prompts. The &lt;a href=&quot;http://ipython.org/notebook.html&quot;&gt;IPython&lt;/a&gt; environment, for example, allows image values to be displayed directly in interactive prompts. This is great for statistical visualizations on complex datasets and for image processing functions. The &lt;a href=&quot;http://docs.racket-lang.org/quick/index.html&quot;&gt;Racket&lt;/a&gt; environment (a Scheme/Lisp dialect) also supports direct display of image values. It would be nice if HTML elements, sound waveforms, and video objects were also directly displayable.&lt;/p&gt;

&lt;p&gt;The recent work on the &lt;a href=&quot;http://www.chris-granger.com/2012/04/12/light-table---a-new-ide-concept/&quot;&gt;Light Table&lt;/a&gt; web IDE is directly inspired by Bret&amp;rsquo;s work, which I didn&amp;rsquo;t realize the first time I heard about it. And now I notice that Light Table has support for Python&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; in addition to the original Clojure and JavaScript/HTML languages. Sweet.&lt;/p&gt;

&lt;p&gt;Exciting developments.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;In case you&amp;rsquo;re wondering, these tools are designed to scrape various kinds of data from popular websites. I&amp;rsquo;m experimenting with the idea of making it easy to extract structured information out of semi-structured websites. If it was trivially easy to get data out of websites, what could you do with it? What new mashups and applications would arise that you didn&amp;rsquo;t think of before?&lt;a href=&quot;#fnref:1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;Sadly it seems that Light Table&amp;rsquo;s current Python support is limited to allowing reevaluation of individual expressions upon request. Its support for Clojure is better, including an &amp;ldquo;instarepl&amp;rdquo; which evaluates all expressions as they are typed and displays the results of all intermediate variables and data flows.&lt;a href=&quot;#fnref:2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

</description>
    </item>
    
    
    <item>
      <title>Fixing a function at runtime without restarting the program</title>
      <link>http://dafoster.net/articles/2013/08/13/fixing-a-function-at-runtime-without-restarting-the-program/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Tue, 13 Aug 2013 00:00:00 -0700</pubDate>
      <guid>http://dafoster.net/articles/2013/08/13/fixing-a-function-at-runtime-without-restarting-the-program</guid>
      <description>&lt;p&gt;This weekend I spent some time writing programs that scrape the contents of various websites to extract information. One challenge when doing this is that webpages are a mess and the functions I wrote to parse the webpages would frequently crash due to some kind of unexpected input. So I decided I wanted a way to fix these functions at runtime without needing to restart the entire program.&lt;/p&gt;

&lt;p&gt;So after hacking around with the Python debugger and employing some magic, I created a new function decorator called &lt;code&gt;@retriable&lt;/code&gt;. This decorator drops into the debugger if a decorated function raises an exception, allowing you to inspect what caused the crash. Then you could fix the function in the source file and exit the debugger. Afterwards the function would be reloaded and called again with the same input as before, all without interrupting the overall program.&lt;/p&gt;

&lt;h2&gt;Demo&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s illustrate the decorator&amp;rsquo;s use with the following program:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# flakey.py

from retriable import retriable

@retriable
def identity(input):
    if input in [5, 7]:
        raise ValueError('Could not understand input: %d' % input)
    return input
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This contrived function is intended to return its input unmodified, but fails with certain inputs.&lt;/p&gt;

&lt;p&gt;The above function will be exercised with the following main program:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# main.py

import flakey

for i in xrange(1, 10 + 1):
    print flakey.identity(i)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s try to run the main program:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ python main.py
1
2
3
4
&amp;gt; /Users/davidf/Projects/scrape-tools/flakey.py(7)identity()
-&amp;gt; raise ValueError('Could not understand input: %d' % input)
(Pdb) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Uh oh. The function crashed. Let&amp;rsquo;s see what the input was:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(Pdb) input
5
(Pdb) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Okay. Examining the function in &lt;code&gt;flakey.py&lt;/code&gt; we see the if-statement that&amp;rsquo;s causing &lt;code&gt;5&lt;/code&gt; to fail. So we change it to read &lt;code&gt;if input in [7]:&lt;/code&gt; to fix it and resave the file.&lt;/p&gt;

&lt;p&gt;Having made our fix, we tell the debugger to exit, and instruct the next prompt to retry the function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(Pdb) quit
[R]etry after reload, Rais[E], or [Q]uit? [R] r
5
6
&amp;gt; /Users/davidf/Projects/scrape-tools/flakey.py(7)identity()
-&amp;gt; raise ValueError('Could not understand input: %d' % input)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the function handled &lt;code&gt;5&lt;/code&gt; but crashed on input &lt;code&gt;7&lt;/code&gt;. Again we fix the function by removing the condition completely, leaving only: &lt;code&gt;def identity(input): return input&lt;/code&gt;. Resaving and retrying the function gives:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(Pdb) quit
[R]etry after reload, Rais[E], or [Q]uit? [R] r
7
8
9
10
$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nice. The program completed without interruption and we were able to fix the &lt;code&gt;identity&lt;/code&gt; function along the way.&lt;/p&gt;

&lt;p&gt;Although this example is contrived you could imagine saving a lot of time if the function to be fixed was moderately expensive and needed to be invoked hundreds of times by the original program instead of just a handful of times. In such cases restarting the entire program is rather expensive.&lt;/p&gt;

&lt;h2&gt;The &lt;code&gt;@retriable&lt;/code&gt; decorator&lt;/h2&gt;

&lt;p&gt;So, without further ago, here the &lt;code&gt;@retriable&lt;/code&gt; decorator:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# retriable.py

import pdb
import sys

def retriable(func):
    &quot;&quot;&quot;
    Marks a moderately expensive function that needs to support being
    debugged and fixed at runtime without interrupting the calling program.

    A function marked with this decorator that crashes by raising an exception
    will cause the Python debugger to be started at the point where the
    exception was thrown. When the debugger exits, the user will be given the
    option to reload the function and reinvoke it with the original input.

    This decorator only works for top-level functions in a module that are
    idempotent, meaning that they return the same result regardless of how many
    times they are invoked with the same input.

    Functions marked in this way should only be invoked from external modules
    via its module object. So instead of `from module import retriable_function`
    use `import module` and invoke the function using
    `module.retriable_function(...)`.

    NOTE: When a decorated function (and its containing module) is reloaded,
          any callers on the stack that reside within the reloaded module will
          continue to execute the pre-reloaded version of themselves. Therefore
          it is less confusing if functions marked as @retriable are not
          directly or indirectly invoked by methods in the same module.

    Author: David Foster (dafoster.net)
    License: MIT
    Tested On: CPython 2.7
    &quot;&quot;&quot;

    if sys._getframe().f_back.f_code.co_name != '&amp;lt;module&amp;gt;':
        raise AssertionError(
            'The @retriable decorator can only be safely applied to ' +
            'top-level functions within a module.')

    module = sys.modules[func.__module__]
    func_name = func.__name__

    def decorated_func(*args, **kwargs):
        while True:
            try:
                return func(*args, **kwargs)
            except:
                # Start debugger at point where exception was raised
                tb = sys.exc_info()[2]
                pdb.post_mortem(tb)

                # Prompt user whether to try again or not
                while True:
                    choice = raw_input(
                        '[R]etry after reload, Rais[E], or [Q]uit? [R] ')
                    if len(choice) == 0 or choice[0].lower() == 'r':
                        # Retry after reload
                        break
                    elif choice[0].lower() == 'e':
                        # Raise
                        raise
                    elif choice[0].lower() == 'q':
                        # Quit
                        sys.exit(1)
                    else:
                        # Not understood... ask again
                        continue

                # Retry after reload, recursively
                reload(module)
                return getattr(module, func_name)(*args, **kwargs)
    return decorated_func
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some limitations and caveats about this decorator&amp;rsquo;s use are described in its docstring.&lt;/p&gt;

&lt;p&gt;Enjoy.&lt;/p&gt;
</description>
    </item>
    
    
    <item>
      <title>Skills I'm Learning at Splunk</title>
      <link>http://dafoster.net/articles/2013/08/04/skills-i-am-learning-at-splunk/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Sun, 04 Aug 2013 00:00:00 -0700</pubDate>
      <guid>http://dafoster.net/articles/2013/08/04/skills-i-am-learning-at-splunk</guid>
      <description>&lt;h2&gt;Technical &amp;amp; Tools&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;JavaScript ecosystem.

&lt;ul&gt;
&lt;li&gt;Enormous but highly fragmented.&lt;/li&gt;
&lt;li&gt;Infrastructure for many basic things either does not exist or
the community has not standardized on a particular tool.

&lt;ul&gt;
&lt;li&gt;Includes &amp;amp; Modules

&lt;ul&gt;
&lt;li&gt;raw &amp;lt;script&amp;gt; tags&lt;/li&gt;
&lt;li&gt;node-require&lt;/li&gt;
&lt;li&gt;AMD-require (require.js)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Class Declarations

&lt;ul&gt;
&lt;li&gt;too many alternatives to name&lt;/li&gt;
&lt;li&gt;My favorite one actually comes from a &lt;a href=&quot;http://ejohn.org/blog/simple-javascript-inheritance/&quot;&gt;blog post&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;li&gt;Code Coverage&lt;/li&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;li&gt;Lint &amp;ndash; &lt;em&gt;JSHint, JSLint&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Minification &amp;ndash; &lt;em&gt;many choices&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PHP ecosystem.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Multi-layer system design, as occurs in the new &lt;a href=&quot;http://dev.splunk.com/view/app-framework/SP-CAAAEMA&quot;&gt;Splunk App Framework&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;GitHub.

&lt;ul&gt;
&lt;li&gt;Good code reviews.
Not as good at Microsoft&amp;rsquo;s CodeFlow or Google&amp;rsquo;s Mondrian though.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Most awesome developer community I&amp;rsquo;ve ever seen.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;StackOverflow.

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Quickly lookup answers to technical questions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JIRA.

&lt;ul&gt;
&lt;li&gt;A really good task tracking system.&lt;/li&gt;
&lt;li&gt;Far better than the Product Studio system I used at Microsoft.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Social&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Tactfully&lt;/em&gt; give feedback (in code reviews, etc)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Interviewing &amp;amp; hiring&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mentoring&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Talking with customers

&lt;ul&gt;
&lt;li&gt;I was a booth guy at the 2012 Splunk .conf conference.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I have some friends who use Splunk too at their workplaces.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;!--
* How an [A-grade office manager] operates.
--&gt;


&lt;h2&gt;Other&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The difference between marketing and sales.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Supporting systems in production that I wrote

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I&amp;rsquo;m looking at you: &lt;a href=&quot;http://blogs.splunk.com/2012/09/20/analyzing-flurry-data/&quot;&gt;Flurry App&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lots of fascinating theoretical stuff from &lt;a href=&quot;http://madhadron.com&quot;&gt;Fred&lt;/a&gt;, our resident
ex-mathematician ex-physicist turned programmer.&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    
    
    <item>
      <title>Skills I Learned at Microsoft</title>
      <link>http://dafoster.net/articles/2013/08/03/skills-i-learned-at-microsoft/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Sat, 03 Aug 2013 00:00:00 -0700</pubDate>
      <guid>http://dafoster.net/articles/2013/08/03/skills-i-learned-at-microsoft</guid>
      <description>&lt;h2&gt;Social&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;How to manage managers.

&lt;ul&gt;
&lt;li&gt;Detailed time tracking.

&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;ve done this internally at every job I&amp;rsquo;ve had,
but only at Microsoft did I need to report on it externally.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Managing expectations.&lt;/li&gt;
&lt;li&gt;The no-surprises principle.

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Bad news is okay (socially) if it is known in advance.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How an &lt;a href=&quot;http://www.linkedin.com/in/rforsbach&quot;&gt;A-grade SDET&lt;/a&gt; (technical tester) thinks.

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Techniques for making designs mure testable,
especially in the presence of multi-threading.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How an &lt;a href=&quot;http://www.linkedin.com/pub/candace-jackson/40/267/354&quot;&gt;A-grade PM&lt;/a&gt; (Program Manager) can manage politics for you.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to work around certain mediocre coworkers. (This is not common.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t use made up words until you&amp;rsquo;ve looked them up first.

&lt;ul&gt;
&lt;li&gt;Counterintuitive. However your &amp;ldquo;made up word&amp;rdquo; may actually
exist and it may not be a pleasant word.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Productivity&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;How to aggressively filter my email inbox.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The zero-inbox style of email management.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Macro programming on Windows via AutoHotkey.

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.keyboardmaestro.com/&quot;&gt;Keyboard Maestro&lt;/a&gt; on the Mac is more capable and more polished,
but AutoHotkey was the best thing I found for Windows.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Technical&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Microsoft-specific tooling:

&lt;ul&gt;
&lt;li&gt;Visual Studio&lt;/li&gt;
&lt;li&gt;TAEF (for testing)&lt;/li&gt;
&lt;li&gt;Octopus (for deployment of MSIs)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;WiX (for development of MSIs)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Formalized code review via CodeFlow.

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;(Also did this at Google with Mondrian.)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Heap profiling to track down memory leaks.

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Failing to unregister listeners can cause memory leaks,
particularly if an object registers a listener
on another longer-lived (or immortal) object.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to write &lt;em&gt;detailed&lt;/em&gt; technical specifications.

&lt;ul&gt;
&lt;li&gt;However the utility of such highly detailed specifications is limited.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    
    
    <item>
      <title>Sending email from command line scripts</title>
      <link>http://dafoster.net/articles/2013/07/27/sending-email-from-command-line-scripts/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Sat, 27 Jul 2013 00:00:00 -0700</pubDate>
      <guid>http://dafoster.net/articles/2013/07/27/sending-email-from-command-line-scripts</guid>
      <description>&lt;p&gt;This weekend I open-sourced a script called &lt;a href=&quot;https://github.com/davidfstr/notifymail&quot;&gt;notifymail&lt;/a&gt; which I have been using for the past few years to send myself emails from automated scripts, particularly Python scripts.&lt;/p&gt;

&lt;p&gt;It is very easy to configure &lt;code&gt;notifymail&lt;/code&gt; for the first time:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pip install notifymail
$ notifymail.py --setup
SMTP Server Hostname: smtp.gmail.com
SMTP Server Port [465]: 587
SMTP Server Uses TLS (y/n) [n]: yes
SMTP Username: robot@gmail.com
SMTP Password: ********
From Address [robot@gmail.com]: robot@gmail.com
From Name (optional) []: notifymail
To Address: admin@example.com

Verifying connection to SMTP server... OK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check your mail provider&amp;rsquo;s documentation to get the SMTP settings mentioned above. For example I made an internet search for &amp;ldquo;gmail SMTP settings&amp;rdquo; to find &lt;a href=&quot;https://support.google.com/mail/troubleshooter/1668960?hl=en#ts=1665119,1665162&quot;&gt;Gmail&amp;rsquo;s SMTP settings&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Gmail SMTP Server:&lt;/strong&gt; smtp.gmail.com&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gmail SMTP Port:&lt;/strong&gt; 587 (for TLS)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gmail SMTP Uses TLS?&lt;/strong&gt; yes&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Once you have &lt;code&gt;notifymail&lt;/code&gt; installed, you can send an email to yourself in a Python script with as little code as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import notifymail
notifymail.send('Subject', 'Hello World', from_name='greeting_script')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or you can invoke &lt;code&gt;notifymail&lt;/code&gt; from the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo &quot;Hello World&quot; | notifymail.py -s &quot;Subject&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Full documentation is available on the &lt;a href=&quot;https://github.com/davidfstr/notifymail#readme&quot;&gt;notifymail project page&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Hasn&amp;rsquo;t this been done before?&lt;/h2&gt;

&lt;p&gt;I reinvented my own wheel to send email principally because of the poor documentation of other alternatives:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;mail&lt;/code&gt; and &lt;code&gt;postfix&lt;/code&gt; were so complicated I couldn&amp;rsquo;t figure out how to set them up.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ssmtp&lt;/code&gt; didn&amp;rsquo;t work after I tried to configure it and there was no good documentation to help me debug why it wasn&amp;rsquo;t working.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For reference, here&amp;rsquo;s &lt;a href=&quot;http://unix.stackexchange.com/questions/36982/can-i-set-up-system-mail-to-use-an-external-smtp-server&quot;&gt;some information for setting up those alternatives&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Fun things to do with &lt;code&gt;notifymail&lt;/code&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I have a script called &lt;code&gt;heartbeat&lt;/code&gt; that periodically attempts to connect to all of my servers via SSH. If it cannot connect to a server it sends me an email with &lt;code&gt;notifymail&lt;/code&gt;. If it cannot access email it displays a sticky Growl notification locally.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I have another script called &lt;code&gt;meetupfilter&lt;/code&gt; that tracks incoming &amp;ldquo;New Meetup Group&amp;rdquo; emails from &lt;a href=&quot;http://www.meetup.com/&quot;&gt;Meetup&lt;/a&gt;. It waits until all such announced groups have at least 3 events on their calendar before sending me a notification at my personal email with &lt;code&gt;notifymail&lt;/code&gt;. That way I don&amp;rsquo;t hear about Meetup groups that appear but then fizzle out immediately, which is a surprising number. I may open-source this script eventually if I &lt;a href=&quot;/contact&quot;&gt;hear there is interest&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    
    
    <item>
      <title>Error Handling</title>
      <link>http://dafoster.net/articles/2013/07/13/error-handling/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Sat, 13 Jul 2013 00:00:00 -0700</pubDate>
      <guid>http://dafoster.net/articles/2013/07/13/error-handling</guid>
      <description>&lt;p&gt;Most of the time programs operate happily inside their &lt;em&gt;main scenario&lt;/em&gt;. Occasionally they need to cope with unusual circumstances, such as being no longer able to read data from the network because the user has turned off their WiFi. The process by which a program responds to an error is called &lt;em&gt;error handling&lt;/em&gt;.&lt;/p&gt;

&lt;!--
In many domains error handling is not treated very seriously as errors may be uncommon or the cost of improper handling may be low. In other domains such as telecom or real-time systems, all error cases need to be considered carefully.
--&gt;




&lt;div class=&quot;toc&quot;&gt;
  &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#behaviors-upon-failure&quot;&gt;Behaviors Upon Failure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#reporting-errors&quot;&gt;Reporting Errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#error-seriousness&quot;&gt;Error Seriousness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#guarantees-after-failure&quot;&gt;Guarantees after Failure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#failing-fast&quot;&gt;Failing Fast (and Error Locality)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#assert-vs-if&quot;&gt;assert vs. if&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#implementation-considerations-for-exceptions&quot;&gt;Implementation Considerations for Exceptions&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#exceptions-are-api&quot;&gt;Exceptions are API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#designing-exception-hierarchies&quot;&gt;Designing Exception Hierarchies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#designing-error-messages&quot;&gt;Designing Error Messages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#translating-exceptions-during-handling&quot;&gt;Translating Exceptions During Handling&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#wrapping-low-level-exceptions-in-high-level-exceptions&quot;&gt;Wrapping Low-Level Exceptions in High-Level Exceptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#wrapping-error-codes-in-exceptions&quot;&gt;Wrapping Error Codes in Exceptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#promoting-error-sentinels-to-exceptions&quot;&gt;Promoting Error Sentinels to Exceptions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#avoid-using-error-codes-in-generic-exceptions&quot;&gt;Avoid Using Error Codes in Generic Exceptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#avoid-using-exceptions-for-flow-control&quot;&gt;Avoid Using Exceptions for Flow Control&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#using-exceptions-for-thread-termination&quot;&gt;Using Exceptions for Thread Termination&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/div&gt;


&lt;p&gt;&lt;a id=&quot;behaviors-upon-failure&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Behaviors Upon Failure&lt;/h2&gt;

&lt;p&gt;At the time an error occurs in a function there are a few things it can do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Delegate to its caller&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Typically a function doesn&amp;rsquo;t have enough information to decide how to handle the error itself. In such a case the error is reported to the calling function, which is typically higher-level and has more context.&lt;/li&gt;
&lt;li&gt;For example if an I/O error occurs while parsing data from a file, the parser will typically just report the I/O error to the code that invoked the parser. The parser itself only knows how to parse things and not what should be done in the case of an I/O error.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The particular error handling strategy of a function reporting an error to its caller is so common that many programming languages provide special mechanisms to support it, particularly in the form of &lt;em&gt;exceptions&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Display the error to the user and continue&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;This is a common pattern for routine errors in interactive programs.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For example a web browser that cannot access a particular webpage will display an error page explaining why the page could not be accessed.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Display the error to the user and exit&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;This is a common pattern for unexpected errors in contexts where total program failure is deemed acceptable.&lt;/li&gt;
&lt;li&gt;In languages that use exceptions, any unhandled exceptions that bubble out of the main function or to the initial function in a thread will terminate the program or the thread. Programs can avoid this fate by adding a top-level exception handler that takes alternate action.&lt;/li&gt;
&lt;li&gt;Examples:

&lt;ul&gt;
&lt;li&gt;In PHP it is an idiom to use the &lt;code&gt;die()&lt;/code&gt; function upon the failure of many operations:

&lt;ul&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;$connection = mysql_connect('localhost', 'dbuser', 'password') or die('Could not connect to MySQL server.');
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Linux kernel makes great use of the &lt;code&gt;panic()&lt;/code&gt; function when it gets into a bad state, stopping the entire operation of the computer.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Log the error and continue&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;This is a common pattern for non-interactive programs and programs that need to keep running continuously, such as web servers.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Naturally there needs to be somebody who goes through the log occasionally to look for problems if this error handling strategy is used.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ignore the error implicitly and continue blindly&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;This is almost always done out of laziness.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In C, this just means ignoring the result of a function that returns an error code.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ignore the error explicitly and continue boldly&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;This is usually done out of laziness.&lt;/li&gt;
&lt;li&gt;One legitimate case when this is done is ignoring I/O errors when closing a resource during cleanup, since there isn&amp;rsquo;t anything sensible that can be done at that point. A Java example:

&lt;ul&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;r = new Resource();
try {
    ...
} finally {
    try {
        r.close();
    } catch (IOException e) {
        // ignore
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Less common handling strategies include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Prompt the user to decide what to do&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Attempt recovery and retry (or resume) the original operation&lt;/strong&gt;, perhaps with different inputs&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;reporting-errors&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Reporting Errors&lt;/h2&gt;

&lt;p&gt;When a function wants to report an error, it has to pass information about the error to its caller. There are a few ways that error information can be encapsulated:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Error Codes&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;When a function is designed to report errors using error codes, it is declared to return an integer or other integer alias (ex: &lt;code&gt;OSErr&lt;/code&gt;). Upon success the function returns 0 (or &lt;code&gt;noErr&lt;/code&gt;). Upon failure the function returns some other value that describes the type of error encountered. Should the function need to return other values upon success it must declare &lt;em&gt;out parameters&lt;/em&gt; to pass them back to the caller.&lt;/li&gt;
&lt;li&gt;Error codes have several disadvantages that make their use uncommon in modern high level languages:

&lt;ul&gt;
&lt;li&gt;An error code only describes the type of error encountered, but not any additional contextual information that would be useful in handling the error. Typically only the function that is one hop away from the error site has enough additional context to actually handle the error nicely.

&lt;ul&gt;
&lt;li&gt;For example if you try to open a nonexistent file on classic Mac OS, you&amp;rsquo;ll get back the error code &lt;code&gt;fnfErr&lt;/code&gt; which indicates that the specified file was not found. Note however that this error code alone doesn&amp;rsquo;t include information about &lt;em&gt;which&lt;/em&gt; file couldn&amp;rsquo;t be found, which is necessary context to display a meaningful error message.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A function that uses error codes relies on its caller to check whether it returns an error. Lazy callers might not actually check, causing any reported errors to be ignored silently.

&lt;ul&gt;
&lt;li&gt;For example I have never seen a C program actually check the result of &lt;code&gt;printf()&lt;/code&gt;, even though it can return an error code upon I/O error. This behavior is reasonable in this case because there isn&amp;rsquo;t much a program can do to alert the user if it can&amp;rsquo;t print to the screen.&lt;/li&gt;
&lt;li&gt;More problematic are C programs that fail to check the result of &lt;code&gt;malloc()&lt;/code&gt; for &lt;code&gt;NULL&lt;/code&gt; when allocating objects. Such programs will crash when &lt;code&gt;malloc&lt;/code&gt; returns &lt;code&gt;NULL&lt;/code&gt; during an out-of-memory condition and the caller tries to manipulate it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When an error code occupies the return value of a function, that return value can&amp;rsquo;t be used for &amp;ldquo;normal&amp;rdquo; function output. This typically means that multiple functions returning error codes cannot be chained together on the same line, increasing verbosity.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The one advantage of error codes is that they are very fast to create and return, improving performance in fragments of code that experience a large number of errors. However this performance-over-usability tradeoff is almost never worth it in modern programs.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;These days error codes are only used commonly in programming languages like C that don&amp;rsquo;t support the use of exceptions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Error Sentinels&lt;/strong&gt; (such as &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;-1&lt;/code&gt;, or &lt;code&gt;0&lt;/code&gt;)

&lt;ul&gt;
&lt;li&gt;A function that reports errors using error sentinels uses its return value to return the normal output of the function most of the time. However when an error occurs, a special invalid&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; value (a &lt;em&gt;sentinel&lt;/em&gt;) is returned instead.

&lt;ul&gt;
&lt;li&gt;For example if you &lt;code&gt;read()&lt;/code&gt; from an &lt;code&gt;InputStream&lt;/code&gt; in Java, usually the resultant byte value is returned. But if the end-of-file is reached, the special value of &lt;code&gt;-1&lt;/code&gt; is returned instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Error sentinels suffer from the same disadvantages as error codes. And they have the same performance advantage.&lt;/li&gt;
&lt;li&gt;Unfortunately the use of error sentinels, especially &lt;code&gt;null&lt;/code&gt;, remains common in many modern programs despite their disadvantages. Even in cases where a &lt;a href=&quot;https://en.wikipedia.org/wiki/Null_Object_pattern&quot;&gt;Null Object&lt;/a&gt; could be used to better effect.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Some statically typed languages like Haskell and SML explicitly represent the potential of a sentinel being returned using a datatype such as &lt;code&gt;Maybe&lt;/code&gt; or &lt;code&gt;Option&lt;/code&gt;. Typically this is done so that the compiler can automatically flag callers that aren&amp;rsquo;t checking for sentinels properly, eliminating their largest disadvantage.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exceptions&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;An &lt;em&gt;exception&lt;/em&gt; is an object that encapsulates information about an error. This includes not only the type of error but also additional contextual information that can be used to generate a reasonable error message and assist in debugging by an end-user or developer.

&lt;ul&gt;
&lt;li&gt;Exceptions also typically include a &lt;em&gt;stack trace&lt;/em&gt; which can be used to pinpoint the location in the program where the error occurred originally, which is valuable for debugging.&lt;/li&gt;
&lt;li&gt;Some languages like Java and Python provide &lt;em&gt;exception chaining&lt;/em&gt; (or &lt;em&gt;wrapping&lt;/em&gt;), which is special support for higher-level exceptions to reference any lower-level exceptions that caused the higher-level exception to occur.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A function that uses exceptions for error reporting can &lt;em&gt;throw&lt;/em&gt; (or &lt;em&gt;raise&lt;/em&gt;) an exception when an error occurs. When this happens the runtime looks for an enclosing &lt;em&gt;exception handler&lt;/em&gt; that knows how to deal with the exception. If it finds a handler the handler is run. If no such handler is found the function terminates and the same exception is rethrown at the point in the caller function where the throwing function was called. Should there be no caller, such as in the case of the main function or the initial function of a thread, the program or thread terminates.&lt;/li&gt;
&lt;li&gt;Exceptions are the preferred method for error handling in most modern languages. They have the principal advantages of preserving detailed information about the error that occurred and being difficult to accidentally ignore.&lt;/li&gt;
&lt;li&gt;One disadvantage of using exceptions is that they are relatively expensive to create and throw which can be a problem if the related error is relatively common, such as attempting to read past the end of a file. They also typically require special language support for throwing them, which rules out their use in simpler languages like C.&lt;/li&gt;
&lt;li&gt;Some languages such as Java additionally have the notion of a &lt;em&gt;checked exception&lt;/em&gt;. When a function throws a checked exception, it is required to declare the type of the exception in its signature. When a caller tries to invoke a function that declares a checked exception in its signature, the compiler enforces that the caller actually handles the exception - either with an exception handler or by delegating to a higher-level function.

&lt;ul&gt;
&lt;li&gt;It is challenging to design APIs that use checked exceptions since they propagate virally through function declarations. I will probably write a future article that specifically deals with using checked exceptions effectively.&lt;/li&gt;
&lt;li&gt;Some statically typed languages like Haskell implement the semantics of checked exceptions using a datatype such as &lt;code&gt;Either&lt;/code&gt;. Compilers in such languages enforce that callers explicitly unpack the &lt;code&gt;Either&lt;/code&gt; value and handle any contained exception object explicitly.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In summary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Exceptions should be used for most error reporting needs.&lt;/li&gt;
&lt;li&gt;Error sentinels should be used to report &lt;a href=&quot;#common-error&quot;&gt;common errors&lt;/a&gt; where the performance penalty of exceptions is too much.&lt;/li&gt;
&lt;li&gt;Error codes should be avoided entirely unless the programming language does not support exceptions, in which case error codes should be used instead.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;error-seriousness&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Error Seriousness&lt;/h2&gt;

&lt;p&gt;Often the seriousness of an error is related to how it is handled. Generally speaking, errors are either:
&lt;a id=&quot;common-error&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Common&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;For example reading past the end of a file falls into this category, as it will always happen (once) whenever a program attempts to read an entire file into memory.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Very few errors fall into this category.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Expected&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;These errors are likely to occur in normal operation, but not commonly.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I/O errors related to reading from a file or from a network socket are an example.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unexpected&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Unexpected errors are ones for which the programmer did not plan any explicit handling.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This includes dividing by zero, dereferencing a null pointer, attempting to access an object off the end of an array, reading from a file that was closed, and other &amp;ldquo;programmer errors&amp;rdquo;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fatal&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Fatal errors are a rare and particularly nasty subset of unexpected errors for which there is no good recovery strategy. Such errors almost always terminate the program when &lt;span class=&quot;nobr&quot;&gt;they occur&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Fatal errors include running out of memory&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, the inability to locate a method or library which the program was linked against, and other nasty conditions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;!-- NOTE: This paragraph is (usefully) redundant with the summary in the &quot;Reporting Errors&quot; section above: --&gt;


&lt;p&gt;Common errors are typically reported using error sentinels or error codes for performance reasons. Other error categories are usually reported using exceptions unless the language in use doesn&amp;rsquo;t support exceptions, in which case error codes are used instead.&lt;/p&gt;

&lt;p&gt;The standard libraries of programming languages typically distinguish between expected, unexpected, and fatal errors by using different exception base classes for each. This makes it easy to write exception handlers that can catch all thrown exceptions in a particular category. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Java uses &lt;code&gt;Error&lt;/code&gt; as the base class for fatal errors, &lt;code&gt;RuntimeException&lt;/code&gt; for unexpected errors, and all other subclasses of &lt;code&gt;Exception&lt;/code&gt; for expected errors.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C# uses &lt;code&gt;SystemException&lt;/code&gt; (informally) as the base class for unexpected and fatal errors. All other subclasses of &lt;code&gt;Exception&lt;/code&gt; are used for expected errors.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python uses &lt;code&gt;StandardError&lt;/code&gt; (informally) as the base class for unexpected and fatal errors. All other subclasses of &lt;code&gt;Exception&lt;/code&gt; are used for expected errors.&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If a language supports checked exceptions, the expected exceptions should generally be marked as checked to force callers to handle them appropriately. Conversely, unexpected and fatal exceptions should &lt;em&gt;not&lt;/em&gt; be marked as checked since this burdens the caller unnecessarily.&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;guarantees-after-failure&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Guarantees after Failure&lt;/h2&gt;

&lt;p&gt;When an error occurs in the middle of multi-step function, the function has to make a decision about what kind of state it wants to leave the program in when it returns to its caller. In general a function can leave the program:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;in its original state,&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;This usually involves rolling back or reversing any actions performed prior to the error.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Functions that make this guarantee are called &lt;em&gt;atomic&lt;/em&gt; or &lt;em&gt;transactional&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;in a different but valid state,&lt;/strong&gt; or

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If a full rollback is not possible, it is still usually possible to partially rollback to a &lt;span class=&quot;nobr&quot;&gt;valid state&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;in a different and potentially illegal state.&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Naive functions may simply return immediately upon error, leaving whatever resources they were using in a bad state.&lt;/li&gt;
&lt;li&gt;This is particularly a problem for programs that use exceptions for error handling, as the default behavior when an exception is thrown is to return immediately, without performing any cleanup.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Any complex fault-tolerant function should document which of these guarantees it makes.&lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;#fn:6&quot; rel=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; If it makes no guarantees at all, the caller may have to assume that whatever resource the function was operating on is in a bad state if the function returns an error.&lt;/p&gt;

&lt;p&gt;Consider the concrete example of a program that copies a comma-separated-value (CSV) file to a new file. This generally involves the steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open the source CSV file.&lt;/li&gt;
&lt;li&gt;Open the destination file, replacing any previously existing file.&lt;/li&gt;
&lt;li&gt;Loop over each row (or byte) of the source CSV file and write each row to the destination.&lt;/li&gt;
&lt;li&gt;Close the destination file.&lt;/li&gt;
&lt;li&gt;Close the source file.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Here is a naive implementation that makes no guarantees to its caller in the event of an error.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/** Copies the source CSV file to the destination file. */
// (I didn't think about error handling at all.)
public static void copyCsvFile(File sourceFile, File destFile) throws IOException {
    InputStream fileIn = new FileInputStream(sourceFile);
    OutputStream fileOut = new FileOutputStream(destFile);
    int b;
    while ((b = fileIn.read()) != -1) {
        fileOut.write(b);
    }
    fileOut.close();
    fileIn.close();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now imagine what happens if an I/O error occurs in the middle of copying bytes: The &lt;code&gt;write&lt;/code&gt; method will throw an &lt;code&gt;IOException&lt;/code&gt; and since &lt;code&gt;copyCsvFile&lt;/code&gt; has no matching exception handler, the &lt;code&gt;copyCsvFile&lt;/code&gt; function itself will stop and rethrow the &lt;code&gt;IOException&lt;/code&gt;. Notably, the destination file is left with incomplete and invalid CSV contents. And neither the source nor the destination file is closed, leaking those resources from the operating system.&lt;/p&gt;

&lt;p&gt;We can at least avoid leaking resources by adding logic that ensures that resources are always closed when the function completes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/** Copies the source CSV file to the destination file. */
// (No open file handles will be leaked even in the event of an error.)
public static void copyCsvFile(File sourceFile, File destFile) throws IOException {
    InputStream fileIn = new FileInputStream(sourceFile);
    try {
        OutputStream fileOut = new FileOutputStream(destFile);
        try {
            int b;
            while ((b = fileIn.read()) != -1) {
                fileOut.write(b);
            }
            fileOut.flush();
        } finally {
            try {
                fileOut.close();
            } catch (IOException e) {
                // Ignore I/O errors upon close since nothing can be done
            }
        }
    } finally {
        try {
            fileIn.close();
        } catch (IOException e) {
            // Ignore I/O errors upon close since nothing can be done
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This improved function will no longer leak open file handles in the event of an error but it will still leave an invalid destination CSV file.&lt;/p&gt;

&lt;p&gt;If we document the additional guarantee that the function performs an &lt;em&gt;atomic&lt;/em&gt; file copy, we&amp;rsquo;d want to explicitly code the function to delete the destination file in the event that it couldn&amp;rsquo;t be fully copied. Here&amp;rsquo;s an implementation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/** Copies the source CSV file to the destination file atomically. */
public static void copyCsvFile(File sourceFile, File destFile) throws IOException {
    InputStream fileIn = new FileInputStream(sourceFile);
    try {
        OutputStream fileOut = new FileOutputStream(destFile);
        boolean finishedCopying = false;
        try {
            int b;
            while ((b = fileIn.read()) != -1) {
                fileOut.write(b);
            }
            fileOut.flush();
            finishedCopying = true;
        } finally {
            try {
                fileOut.close();
            } catch (IOException e) {
                // Ignore I/O errors upon close since nothing can be done
            }

            if (!finishedCopying) {
                boolean deleteSuccess = destFile.delete();
                // If the delete fails then the rollback failed.
                // Since there's nothing that can be done in that case,
                // we ignore deletion failures.
            }
        }
    } finally {
        try {
            fileIn.close();
        } catch (IOException e) {
            // Ignore I/O errors upon close since nothing can be done
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we wanted to get even more fancy we could document instead that the function guarantees that it will copy as much of the source CSV file to the destination CSV file, leaving the longest valid destination CSV file even in the case of an error. In particular if the entire file cannot be copied, the function will copy as many complete lines from the source CSV file as possible, stripping off any incompletely written lines.&lt;/p&gt;

&lt;p&gt;This is actually relatively difficult to implement correctly in Java while still &lt;a href=&quot;/articles/2013/06/01/handling-text-correctly/&quot;&gt;handling characters correctly&lt;/a&gt; and preserving end-of-line sequences, so here&amp;rsquo;s a Python 2 implementation instead:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def copy_csv_file(source_filepath, dest_filepath):
    &quot;&quot;&quot;
    Copies the source CSV file to the destination file.

    If an error occurs while copying, as many rows as possible are copied,
    leaving a valid destination CSV file.
    &quot;&quot;&quot;
    with open(source_filepath, 'rb') as file_in:
        offset_to_last_line_written = 0
        finished_copying = False
        file_out = open(dest_filepath, 'wb')
        try:
            while True:
                cur_line_bytes = file_in.readline()
                file_out.write(cur_line_bytes)
                offset_to_last_line_written = file_out.tell()
            file_out.flush()
            finished_copying = True
        finally:
            truncated_successfully = False
            if not finished_copying:
                try:
                    file_out.truncate(offset_to_last_line_written)
                    truncated_successfully = True
                except IOError:
                    # Unable to truncate. Will try to delete the file instead...
                    pass

            try:
                file_out.close()
            finally:
                if not finished_copying and not truncated_successfully:
                    try:
                        os.remove(dest_filepath)
                    except IOError:
                        # Unable to truncate or remove the destination file.
                        # Nothing else can be done.
                        pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Actually the preceding implementation isn&amp;rsquo;t correct in the presence of output stream buffering (unless it is line-buffered), since it could be the case that the &lt;code&gt;offset_to_last_line_written&lt;/code&gt; points to the end of a line that in fact has not been written to disk but is rather in the output buffer. A correct and performant implementation that additionally handles that case is left as a &lt;span class=&quot;nobr&quot;&gt;(non-trivial)&lt;/span&gt; exercise for the reader.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;failing-fast&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Failing Fast &lt;small&gt;and Error Locality&lt;/small&gt;&lt;/h2&gt;

&lt;p&gt;Errors are easiest to handle when they are signaled at the exact point where a problem first occurred, or as close to it as possible. Thus functions should try to &lt;em&gt;fail fast&lt;/em&gt; whenever possible.&lt;/p&gt;

&lt;p&gt;It is a good idea for functions to check their inputs (especially their arguments) immediately upon invocation to see whether they conform to the expected format. This provides early warning of state corruption that could get introduced into the derived output of the function.&lt;/p&gt;

&lt;p&gt;In addition if there are points where a function can make a non-trivial assertion about its current state, and this assertion is at risk of breaking due to modifications by maintainers, it should make an explicit check that the assertion is true.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;assert-vs-if&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;&lt;code&gt;assert&lt;/code&gt; vs. &lt;code&gt;if&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;When checking assertions, a function can always use the humble &lt;code&gt;if&lt;/code&gt; statement:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Registry {
    private Map&amp;lt;String, Object&amp;gt; items = new LinkedHashMap&amp;lt;String, Object&amp;gt;();

    public void register(String id, Object item) {
        if (id == null)
            throw new IllegalArgumentException(
                &quot;Cannot register an item with a null ID.&quot;);
        if (item == null)
            throw new IllegalArgumentException(
                &quot;Cannot register a null item with ID \&quot;&quot; + id + &quot;\&quot;.&quot;);

        if (items.containsKey(id))
            throw new IllegalStateException(
                &quot;Already have an item registered with the ID \&quot;&quot; + id + &quot;\&quot;.&quot;);
        items.put(id, item);
    }

    // (... more methods ...)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However there is also an &lt;code&gt;assert&lt;/code&gt; statement in many languages. The &lt;code&gt;assert&lt;/code&gt; statement typically differs from &lt;code&gt;if&lt;/code&gt; in that it can be compiled-out of the program automatically if desired, for a modest performance boost at the expense of safety. Therefore &lt;code&gt;assert&lt;/code&gt; should typically only be used in performance-critical code (that has been verified as such by a profiler).&lt;/p&gt;

&lt;p&gt;In practice I almost never use &lt;code&gt;assert&lt;/code&gt;, preferring to rely on &lt;code&gt;if&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;implementation-considerations-for-exceptions&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Implementation Considerations for Exceptions&lt;/h2&gt;

&lt;p&gt;&lt;a id=&quot;exceptions-are-api&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Exceptions are API&lt;/h3&gt;

&lt;p&gt;Expected exceptions&lt;sup id=&quot;fnref:7&quot;&gt;&lt;a href=&quot;#fn:7&quot; rel=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt; are part of a function&amp;rsquo;s API. Consequently:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Expected exceptions should be given the same coverage in a function&amp;rsquo;s documentation as its parameters or return type. Remembering to document expected exceptions is particularly important when writing API documentation for languages lacking checked exceptions (i.e. everything other than Java, including C#).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Callers may depend on the expected exceptions in the function&amp;rsquo;s API documentation.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;A function cannot remove or change the exceptions it throws without breaking callers that have been coded to expect the old set of exceptions. And new exceptions that are added will not be expected by existing callers.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;designing-exception-hierarchies&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Designing Exception Hierarchies&lt;/h3&gt;

&lt;p&gt;It is generally a good idea have a separate exception type for each specific type of error that a caller might want to handle distinctly. That way a caller can easily write an exception handler that catches a specific exception of interest. For example &lt;code&gt;FileNotFoundException&lt;/code&gt; is likely to be treated distinctly from a generic &lt;code&gt;IOException&lt;/code&gt;, so it is given a separate exception type (that inherits from the generic &lt;code&gt;IOException&lt;/code&gt; class).&lt;/p&gt;

&lt;p&gt;Errors that are not likely to be handled distinctly by the caller can just reuse a generic exception class directly. For example a piece of code that detected a &amp;ldquo;bad media&amp;rdquo; error when reading from a disk could just throw a plain &lt;code&gt;IOException&lt;/code&gt; with a message instead of creating a special subclass. However note that by doing this you provide no API for any caller that &lt;em&gt;does&lt;/em&gt; in fact want to catch this kind of exception.&lt;sup id=&quot;fnref:8&quot;&gt;&lt;a href=&quot;#fn:8&quot; rel=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;designing-error-messages&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Designing Error Messages&lt;/h3&gt;

&lt;p&gt;An error message typically accompanies an exception, and it is this message that is typically presented verbatim to the user if high-level code doesn&amp;rsquo;t recognize the exception type itself. Therefore it is important that the message be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;well-formatted&lt;/strong&gt;,

&lt;ul&gt;
&lt;li&gt;Therefore basic grammar rules apply, such as beginning sentences with a capital letter and ending them with a period.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A surprising number of real-world exception messages don&amp;rsquo;t even meet this low bar.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;understandable by the user&lt;/strong&gt;,

&lt;ul&gt;
&lt;li&gt;This is a tricky requirement because the point where an exception is generated may not know the kind of user that will eventually receive the exception, particularly if it is a low-level error that is deeply buried or if the error occurs in a widely-used utility function.&lt;/li&gt;
&lt;li&gt;In general &lt;em&gt;expected&lt;/em&gt; errors are likely to reach a normal non-programmer end-user, so they should be written with that audience in mind.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;By constrast &lt;em&gt;unexpected&lt;/em&gt; and &lt;em&gt;fatal&lt;/em&gt; errors are typically programmer errors and only likely to be seen by other developers when developing a program. Therefore they should be written with the developer in mind.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;specific&lt;/strong&gt;, and

&lt;ul&gt;
&lt;li&gt;An error message without sufficient contextual information cannot be easily corrected by the person that receives it. Messages should contain enough information for the user to easily locate the problem and fix it themselves.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For example a error encountered while parsing a text file should include information about the &lt;em&gt;location&lt;/em&gt; of the parse error, so that the user can find the problem in the original document. Any good compiler will give you at least a line number when it encounters a syntax error and may even provide a specific column number as well.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;in the correct spoken language&lt;/strong&gt;.

&lt;ul&gt;
&lt;li&gt;In particular if the user&amp;rsquo;s current locale is non-English (such as German), a German message should be presented if possible, not a default English one.&lt;/li&gt;
&lt;li&gt;Programs that are only intended to be used in a single locale can ignore this guideline and naively emit messages in the expected locale&amp;rsquo;s language.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;translating-exceptions-during-handling&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Translating Exceptions During Handling&lt;/h3&gt;

&lt;p&gt;&lt;a id=&quot;wrapping-low-level-exceptions-in-high-level-exceptions&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Wrapping Low-Level Exceptions in High-Level Exceptions&lt;/h4&gt;

&lt;p&gt;It is common for a single system to have a single high-level exception type that is thrown by most of its functions. For example a parser&amp;rsquo;s functions may all throw the high-level &lt;code&gt;ParseException&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However the implementation of such a system may delegate to other systems that use a different set of exceptions. In the case of a parser, it typically has to read the characters it is parsing from an I/O stream, which may throw a low-level &lt;code&gt;IOException&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, top-level parser functions have a few options in reporting the underlying &lt;code&gt;IOException&lt;/code&gt; as a possible failure case to its caller:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Expose&lt;/strong&gt; - The top-level function declares that it throws both &lt;code&gt;ParseException&lt;/code&gt; and &lt;code&gt;IOException&lt;/code&gt;.

&lt;ul&gt;
&lt;li&gt;However this exposes the implementation detail that the parsing system relies on the I/O system and forces the caller to deal with the low-level &lt;code&gt;IOException&lt;/code&gt; directly.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Therefore this is not generally recommended for top-level functions, although it may be used by internal functions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Wrap&lt;/strong&gt; - The top-level function intercepts &lt;code&gt;IOException&lt;/code&gt;s and translates them to a generic &lt;code&gt;ParseException&lt;/code&gt; that wraps the original &lt;code&gt;IOException&lt;/code&gt;.

&lt;ul&gt;
&lt;li&gt;This allows the top-level parsing functions to present the simpler exception API of just throwing a &lt;code&gt;ParseException&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Callers of the parser remain able to intercept and extract the underlying &lt;code&gt;IOException&lt;/code&gt; if they wish.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Map&lt;/strong&gt; - The top-level function intercepts &lt;code&gt;IOException&lt;/code&gt;s and maps them to a special subclass of &lt;code&gt;ParseException&lt;/code&gt; (like &lt;code&gt;ParseIOException&lt;/code&gt;), optionally wrapping the original &lt;code&gt;IOException&lt;/code&gt; for further inspection by the caller.

&lt;ul&gt;
&lt;li&gt;This is similar to the &amp;ldquo;wrapping&amp;rdquo; approach, but makes it even easier for the caller to catch the underlying exception since it can directly catch the mapped exception (&lt;code&gt;ParseIOException&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Thus this approach is preferable if the underlying failure case is sufficiently important to advertise prominently in the exception API.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In summary, most low-level level exceptions should be wrapped in the generic high-level exception. For &lt;em&gt;prominent&lt;/em&gt; low-level exceptions, they should be mapped to a specific high-level exception subclass.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a Java example of a parser taking the &amp;ldquo;wrapping&amp;rdquo; approach to low-level I/O exceptions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// The top-level methods of this class all throw ParseException in their API.
public class RuleParser {
    public static Rule parse(InputStream input) throws ParseException {
        try {
            return new RuleParser(input).readRule();
        } catch (IOException e) {
            throw new ParseException(&quot;I/O error while parsing rule.&quot;, e);
        }
    }

    private Rule readRule() throws ParseException, IOException {
        // (...)
    }

    // (...)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a id=&quot;wrapping-error-codes-in-exceptions&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Wrapping Error Codes in Exceptions&lt;/h4&gt;

&lt;p&gt;Sometimes a high-level function using exceptions needs to report an error received from a low-level function that uses error codes. In this case the low-level error code needs to be communicated to the caller somehow via an exception.&lt;/p&gt;

&lt;p&gt;Typically the low-level function comes from an overall subsystem of some kind which uses error codes in general for error reporting. In such a case it is typical to define a generic exception to wrap all error codes received from the subsystem. This generic exception should preserve the original error code for inspection by callers, along with whatever extra context may be available from the subsystem, typically just an error message.&lt;/p&gt;

&lt;p&gt;For example Python uses the &lt;code&gt;OSError&lt;/code&gt; exception to wrap error codes received from the underlying C library. It is populated with the error code received from the C &lt;code&gt;errno&lt;/code&gt; global variable and the message received from the C function &lt;code&gt;perror()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now the high-level function may not want to report this kind of low-level subsystem exception directly, in which case the &amp;ldquo;wrap&amp;rdquo; or &amp;ldquo;map&amp;rdquo; technique discussed above in &lt;a href=&quot;#wrapping-low-level-exceptions-in-high-level-exceptions&quot;&gt;&amp;ldquo;Wrapping Low-Level Exceptions in High-Level Exceptions&amp;rdquo;&lt;/a&gt; should be used in addition.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;promoting-error-sentinels-to-exceptions&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Promoting Error Sentinels to Exceptions&lt;/h4&gt;

&lt;p&gt;Typically error sentinels are used to report common errors that are intended to be handled immediately by the caller. However if the caller cannot handle the error itself but needs to delegate to its second-order caller, it typically needs to promote the sentinel to an exception.&lt;/p&gt;

&lt;p&gt;As an example, the end-of-stream condition when reading from a stream is generally considered to be a common error in Java. However a function that is parsing a data structure out of a stream does &lt;em&gt;not&lt;/em&gt; expect an end-of-stream when it is in the middle of parsing a structure. Thus the parser wishes to report the end-of-stream condition to its caller as either an expected or unexpected error (depending on context), both of which require an exception.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class BinaryInputStream extends FilterInputStream {
    public BinaryInputStream(InputStream in) {
        super(in);
    }

    public int readUInt8() throws IOException {
        int b = this.read();
        if (b == -1) {
            throw new EOFException(&quot;Unexpected end of stream.&quot;);
        }
        return b;
    }

    public int readUInt16() throws IOException {
        return
            (readUInt8() &amp;lt;&amp;lt; 8) |
            (readUInt8() &amp;lt;&amp;lt; 0);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the preceding example the &lt;code&gt;-1&lt;/code&gt; error sentinel was promoted to an &lt;code&gt;EOFException&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;avoid-using-error-codes-in-generic-exceptions&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Avoid Using Error Codes in Generic Exceptions&lt;/h3&gt;

&lt;p&gt;The use of internal error codes within a generic exception class should generally be avoided, since this makes it difficult to handle them. (One exception to this guideline is when using an exception to wrap &lt;em&gt;external&lt;/em&gt; error codes received from another subsystem, as described above in &lt;a href=&quot;#wrapping-error-codes-in-exceptions&quot;&gt;&amp;ldquo;Wrapping External Error Codes in Exceptions&amp;rdquo;&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Consider the following example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// A generic exception that wraps its own set of error codes. DON'T DO THIS.
public class FetchException extends RuntimeException {
    private int code;
    private String text;

    public static final int JOB_NOTREADY = 1;
    public static final int TIMEOUT = 2;
    public static final int AMBIGUOUS_NAME = 3;

    FetchException(int code, String text) {
        super(text);
        this.code = code;
        this.text = text;
    }

    public int getCode() {
        return code;
    }

    public String getText() {
        return text;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you actually wanted to detect the &lt;code&gt;JOB_NOTREADY&lt;/code&gt; case, you&amp;rsquo;d have to write code like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public Job fetchJob(String jobName) {
    for (int triesLeft = MAX_FETCH_ATTEMPTS; triesLeft &amp;gt; 0; triesLeft--) {
        try {
            return service.getJobs().get(jobName);
        } catch (FetchException e) {
            if (e.getCode() == FetchException.JOB_NOTREADY) {
                // Retry again
                continue;
            } else {
                throw e;
            }
        }
    }
    throw new FetchException(TIMEOUT,
        &quot;Job \&quot;&quot; + jobName + &quot;\&quot; was not ready after &quot; +
            MAX_FETCH_ATTEMPTS + &quot; fetch attempts.&quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s not pleasant having to put that if-statement in the exception handler. And the throwing of the &lt;code&gt;TIMEOUT&lt;/code&gt;-coded &lt;code&gt;FetchException&lt;/code&gt; couldn&amp;rsquo;t save contextual information like the &lt;code&gt;jobName&lt;/code&gt; and &lt;code&gt;MAX_FETCH_ATTEMPTS&lt;/code&gt; in a machine-readable field since the generic &lt;code&gt;FetchException&lt;/code&gt; didn&amp;rsquo;t have fields that were specific to the &lt;code&gt;TIMEOUT&lt;/code&gt; code.&lt;/p&gt;

&lt;p&gt;A better solution would be to use specific subclasses of &lt;code&gt;FetchException&lt;/code&gt; instead:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class FetchException extends RuntimeException { ... }

public class JobNotReadyException extends FetchException { ... }

public class FetchTimeoutException extends FetchException {
    private String jobName;
    private int numFetchAttempts;

    FetchTimeoutException(String jobName, int numFetchAttempts) {
        super(&quot;Job \&quot;&quot; + jobName + &quot;\&quot; was not ready after &quot; +
            MAX_FETCH_ATTEMPTS + &quot; fetch attempts.&quot;);
        this.jobName = jobName;
        this.numFetchAttempts = numFetchAttempts;
    }

    // (... Accessors for jobName and numFetchAttempts ...)
}

public class AmbiguousNameException extends FetchException { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then the code could be simplified to just read:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public Job fetchJob(String jobName) {
    for (int triesLeft = MAX_FETCH_ATTEMPTS; triesLeft &amp;gt; 0; triesLeft--) {
        try {
            return service.getJobs().get(jobName);
        } catch (JobNotReadyException e) {
            // Retry again
            continue;
        }
    }
    throw new FetchTimeoutException(jobName, MAX_FETCH_ATTEMPTS);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a id=&quot;avoid-using-exceptions-for-flow-control&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Avoid Using Exceptions for Flow Control&lt;/h3&gt;

&lt;p&gt;Sometimes programs report &lt;em&gt;common&lt;/em&gt; errors in the form of an exception instead of using a more appropriate mechanism such as an error sentinel. This is inefficient since throwing exceptions is slow in the common case. And it is awkward for the caller who must have an explicit exception handler around every invocation to deal with the common case. Don&amp;rsquo;t do it.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;using-exceptions-for-thread-termination&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Using Exceptions for Thread Termination&lt;/h4&gt;

&lt;p&gt;However one case where exceptions are useful as a means of flow control is to force (or recommend) that a thread terminate. Such exceptions are classified as fatal errors so that most exception handlers ignore them.&lt;/p&gt;

&lt;p&gt;For example Java uses the &lt;code&gt;ThreadDeath&lt;/code&gt; exception (a subclass of the fatal &lt;code&gt;Error&lt;/code&gt;) to terminate a thread. And Python uses the &lt;code&gt;KeyboardInterrupt&lt;/code&gt; exception (a subclass of the fatal &lt;code&gt;BaseException&lt;/code&gt;) to kill the main thread when the user presses Control-C.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;summary&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;Error handling is hard. But you&amp;rsquo;ll provide a better experience by properly handling and communicating errors back the user.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t be that guy who provides useless generic error messages:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2013/generic_ie_error.png&quot; height=&quot;353&quot; width=&quot;725&quot; alt=&quot;Awful error message from Internet Explorer 9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(I doubt even the program itself knows what went wrong.)&lt;/p&gt;

&lt;div style=&quot;padding: .8em 1em .8em; margin-bottom: 1em; border: 1px solid #94da3a;&quot;&gt;
    &lt;p style=&quot;font-weight: bold; color: #487858;&quot;&gt;
        Series
    &lt;/p&gt;
    &lt;p style=&quot;margin-bottom: 0em;&quot;&gt;
        This article is part of the &lt;a href=&quot;/articles/2013/05/11/book-outline/&quot;&gt;Programming for Perfectionists&lt;/a&gt; series.
    &lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;Flawed functions that return sentinel values that are actually &lt;em&gt;valid&lt;/em&gt; place extra onus on the caller to perform additional checks to determine whether an error actually occurred. For example PHP&amp;rsquo;s &lt;a href=&quot;http://php.net/manual/en/function.stream-get-contents.php&quot;&gt;&lt;code&gt;stream_get_contents&lt;/code&gt;&lt;/a&gt; function can return &lt;code&gt;''&lt;/code&gt; or &lt;code&gt;FALSE&lt;/code&gt; upon failure. But it can also return &lt;code&gt;''&lt;/code&gt; upon success. See my insane &lt;a href=&quot;https://github.com/splunk/splunk-sdk-php/blob/master/Splunk/Util.php&quot;&gt;workaround&lt;/a&gt;.&lt;a href=&quot;#fnref:1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;Most programs treat out-of-memory errors as fatal, although there are a few hardened programs like SQLite that treat out-of-memory as an &lt;em&gt;expected&lt;/em&gt; error.&lt;a href=&quot;#fnref:2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:3&quot;&gt;
&lt;p&gt;The C# exception heirarchy is illustrated in &lt;a href=&quot;http://book.javanb.com/From-Java-To-Csharp-A-Developers-Guide/0321136225_ch13lev1sec2.html&quot;&gt;&amp;ldquo;C# exception hierarchy&amp;rdquo;&lt;/a&gt;.&lt;a href=&quot;#fnref:3&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:4&quot;&gt;
&lt;p&gt;The Python exception heirarchy is documented in &lt;a href=&quot;http://docs.python.org/2/library/exceptions.html#exception-hierarchy&quot;&gt;&amp;ldquo;Exception Hierarchy&amp;rdquo;&lt;/a&gt;.&lt;a href=&quot;#fnref:4&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:5&quot;&gt;
&lt;p&gt;Java has a few annoying examples where unexpected exceptions were marked as checked, burdening all subsequent callers. In particular &lt;code&gt;Object.clone()&lt;/code&gt; throws the checked &lt;code&gt;CloneNotSupportedException&lt;/code&gt;, making it hard to use. And Java&amp;rsquo;s reflection library throws the checked &lt;code&gt;IllegalAccessException&lt;/code&gt; and &lt;code&gt;InvocationTargetException&lt;/code&gt; whenever you try to &lt;code&gt;invoke()&lt;/code&gt; a method, neither of which are expected errors. And &lt;code&gt;Thread.sleep()&lt;/code&gt; throws the checked &lt;code&gt;InterruptedException&lt;/code&gt;. Now &lt;code&gt;IOException&lt;/code&gt;, thrown by all I/O functions, is legitimately a checked exception because it is an expected exception.&lt;a href=&quot;#fnref:5&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:6&quot;&gt;
&lt;p&gt;Instead of documenting the guarantees after failure for individual functions, it also common to document an overall failure handling strategy for the entire system. For example most databases are documented as generally operating in a transactional fashion, with failed operations leaving the database in its original state. Of course some functions may deviate from the general policy, in which case the deviation should be documented.&lt;a href=&quot;#fnref:6&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:7&quot;&gt;
&lt;p&gt;Unexpected and fatal exceptions, on the other hand, are &lt;em&gt;not&lt;/em&gt; typically part of a function&amp;rsquo;s API. As such, callers should not write exception handlers that depend on them.&lt;a href=&quot;#fnref:7&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:8&quot;&gt;
&lt;p&gt;In this circumstance a caller is forced to guess the exception type by parsing the exception&amp;rsquo;s message. However this solution is brittle since the message isn&amp;rsquo;t part of the API and could change in the future or vary depending on the current locale.&lt;a href=&quot;#fnref:8&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

</description>
    </item>
    
    
    <item>
      <title>Handling Text Correctly</title>
      <link>http://dafoster.net/articles/2013/06/01/handling-text-correctly/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Sat, 01 Jun 2013 00:00:00 -0700</pubDate>
      <guid>http://dafoster.net/articles/2013/06/01/handling-text-correctly</guid>
      <description>&lt;p&gt;A remarkable number of programs do not handle text in a reasonable fashion, which causes those programs to break when confronted with non-English characters and symbols. Even the standard libraries of most programming languages are not immune.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;This chapter describes the foundation of how text handling works in software and gives examples of common pitfalls when working with text in real code. Upon completion you should be able to evaluate your favorite programming environment&amp;rsquo;s built-in support for handling text and be able to write programs that handle text correctly and consistently across operating systems.&lt;/p&gt;

&lt;div class=&quot;toc&quot;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;#characters-sets-and-encodings&quot;&gt;Characters, Sets, and Encodings&lt;/a&gt;&lt;/li&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#important-character-sets&quot;&gt;Important Character Sets&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#unicode&quot;&gt;Unicode&lt;/a&gt;&lt;/li&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;#unicode-character-encodings&quot;&gt;Unicode Character Encodings&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/ul&gt;
    &lt;li&gt;&lt;a href=&quot;#common-mistakes-and-practical-tips&quot;&gt;Common Mistakes &amp;amp; Practical Tips&lt;/a&gt;&lt;/li&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#you-cannot-interpret-a-byte-array-as-a-string-without-knowing-its-encoding&quot;&gt;You cannot interpret a byte array as a string without knowing its encoding.&lt;/a&gt;&lt;/li&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;#reading-text-files&quot;&gt;Reading Text Files&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#converting-between-bytes-and-strings&quot;&gt;Converting Between Bytes and Strings&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;li&gt;&lt;a href=&quot;#a-char-in-your-favorite-language-is-probably-not-a-character&quot;&gt;A &quot;char&quot; (in your favorite language) is probably not a character.&lt;/a&gt;&lt;/li&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;#8-bit-chars&quot;&gt;8-bit chars&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#16-bit-chars&quot;&gt;16-bit chars&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#32-bit-chars&quot;&gt;32-bit chars and variable-bit chars&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/ul&gt;
    &lt;li&gt;&lt;a href=&quot;#end-of-line-sequences&quot;&gt;End of Line Sequences&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a id=&quot;characters-sets-and-encodings&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Characters, Sets, and Encodings&lt;/h2&gt;

&lt;p&gt;Text is made up of multiple &lt;strong&gt;characters&lt;/strong&gt; (or &lt;strong&gt;codepoints&lt;/strong&gt;&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;), each of which represents a different letter, symbol or punctuation mark. The word &amp;ldquo;Hello&amp;rdquo;, for example is made of the characters &amp;ldquo;H&amp;rdquo;, &amp;ldquo;e&amp;rdquo;, &amp;ldquo;l&amp;rdquo;, &amp;ldquo;l&amp;rdquo;, and &amp;ldquo;o&amp;rdquo;. This collection of characters is called a &lt;strong&gt;string&lt;/strong&gt;. Each character is assigned a number using a &lt;strong&gt;character set&lt;/strong&gt; (sometimes called a &lt;em&gt;code page&lt;/em&gt; or a &lt;em&gt;charset&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;For example the &lt;strong&gt;ASCII&lt;/strong&gt; character set assigns numbers in the range (0-127) for characters in most Western European languages.&lt;/p&gt;

&lt;div style=&quot;font-size: 20px; margin-left: 3em; font-family: monospace; margin-bottom: 12px; line-height: 1.1em;&quot;&gt;
H &amp;rarr; 72&lt;br/&gt;
e &amp;rarr; 101&lt;br/&gt; 
l &amp;rarr; 76&lt;br/&gt;
l &amp;rarr; 76&lt;br/&gt;
o &amp;rarr; 111
&lt;/div&gt;


&lt;p&gt;ASCII is one of the oldest character sets. Most other sets use the same mappings as ASCII, while defining additional mappings of their own for numbers above 127.&lt;/p&gt;

&lt;p&gt;After mapping a character to a number, that number is converted to an actual byte sequence for storage. The entire process of converting a character to a byte sequence is defined by a &lt;strong&gt;character encoding&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Since many character sets provide mappings to numbers in the range 0-255 (which fit in 8-bit bytes), you can output the character number as a single byte. For example, to output &amp;ldquo;Hello&amp;rdquo; in ASCII, you would emit the byte sequence:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;H  &lt;/th&gt;
&lt;th&gt; e   &lt;/th&gt;
&lt;th&gt; l  &lt;/th&gt;
&lt;th&gt; l  &lt;/th&gt;
&lt;th&gt; o&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;72 &lt;/td&gt;
&lt;td&gt; 101 &lt;/td&gt;
&lt;td&gt; 76 &lt;/td&gt;
&lt;td&gt; 76 &lt;/td&gt;
&lt;td&gt; 111&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;Many English-speakers, being only familiar with the Western European character sets which are always encoded with individual 8-bits bytes, often use the terms &lt;em&gt;character set&lt;/em&gt; and &lt;em&gt;character encoding&lt;/em&gt; interchangably.&lt;/p&gt;

&lt;p&gt;However the East Asian languages such as Chinese, Japanese, and Korean (CJK) have many more than 256 characters, making it impossible to fit them in only 8-bit bytes. Therefore each character must be encoded using multiple bytes, possibly a variable number of bytes. Thus either a fixed-width encoding (often 16-bits per character) or a variable width encoding (with differing numbers of bytes per character) may be used.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;important-character-sets&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Important Character Sets&lt;/h3&gt;

&lt;p&gt;The following are the most prevalent non-Unicode character sets you are likely to encounter. All of these character sets are encoded with a single byte per character.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Character Set                   &lt;/th&gt;
&lt;th&gt; Character Encoding&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ASCII                           &lt;/td&gt;
&lt;td&gt; single byte (7-bit)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Windows-1252 (Windows Latin 1)  &lt;/td&gt;
&lt;td&gt; single byte&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ISO 8859-1 (ISO Latin 1)        &lt;/td&gt;
&lt;td&gt; single byte&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mac OS Roman                    &lt;/td&gt;
&lt;td&gt; single byte&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;Informally (and in practice), these may also be described as character encodings. So a text file &amp;ldquo;in ASCII encoding&amp;rdquo; refers to a file in the ASCII character set with its standard single-byte encoding.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ASCII&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;7-bit character set for representing characters common to most Western European languages.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;⚠ Many programs and APIs that claim to input or output &amp;ldquo;ASCII&amp;rdquo; (or &amp;ldquo;ANSI&amp;rdquo;&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;) are actually unaware of character sets and will accept strings in whatever the operating system&amp;rsquo;s default character set happens to be (often Windows-1252).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Windows-1252&lt;/strong&gt; (AKA &lt;strong&gt;Windows Latin 1&lt;/strong&gt;)

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This is the default character set on English Windows systems.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ISO 8859-1&lt;/strong&gt; (AKA &lt;strong&gt;ISO Latin 1&lt;/strong&gt;)

&lt;ul&gt;
&lt;li&gt;The default character set for web pages and other HTTP traffic.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;⚠ In practice this is &lt;em&gt;very&lt;/em&gt; frequently confused with &lt;b&gt;Windows-1252&lt;/b&gt;, which differs in only a handful of characters. In fact this confusion is to such a degree that the draft HTML 5 specification requires that documents advertised as ISO-8859-1 actually be parsed as Windows-1252.&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mac OS Roman&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;This is the default character set on most Macintosh systems prior to Mac OS X.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Not every character set can represent every character in the world. For example Windows-1252 cannot represent any Chinese or Japanese characters, although GBK and Shift JIS respectively can. This means that you cannot in general mix text from two sources that uses a different character sets without converting to a new character set (that can represent all characters in both sets). Typically the Unicode character set (discussed below) is used for this purpose.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Character Set                           &lt;/th&gt;
&lt;th&gt; Character Encoding&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Windows-932 (&amp;ldquo;Shift JIS&amp;rdquo;)&lt;!--[^WStd]--&gt; &lt;/td&gt;
&lt;td&gt; variable width, 1-2 bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Windows-936 (&amp;ldquo;GBK&amp;rdquo;)                     &lt;/td&gt;
&lt;td&gt; variable width, 1-2 bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;!--
[^WStd]: It should be noted that that the official Shift JIS and GBK specifications differ from their implementations in Windows. However it is the Windows implementations that have become the de-facto standards. Therefore if you see an unqualified reference to &quot;Shift JIS&quot;, it most likely refers to Windows-932 instead of the official standard.
--&gt;


&lt;p&gt;&lt;a id=&quot;unicode&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Unicode&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Unicode&lt;/strong&gt; is a character set just like ASCII or Windows-1252: it maps characters to numbers.&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; However it is sufficiently important to justify special mention.&lt;/p&gt;

&lt;p&gt;The Unicode character set is designed to support all characters in all character sets that came before it, plus many more. If you can think of a character, it&amp;rsquo;s almost certainly in Unicode. (And if it isn&amp;rsquo;t, it&amp;rsquo;s likely not in any character set.) In this sense, Unicode can be viewed as the universal character set.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Any program written today that wishes to represent characters correctly should be using the Unicode character set and one of its associated encodings.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Originally, Unicode mapped characters to numbers in the range 0x0000-0xFFFF, requiring only 16 bits to represent each character. At that time it was possible to encode each Unicode character using a 2-byte fixed width encoding, known as &lt;strong&gt;UCS-2&lt;/strong&gt;. Many early Unicode-aware systems, such as Java, were designed around this original specification.&lt;/p&gt;

&lt;p&gt;In 1996, Unicode was extended to map characters to numbers in the larger range of 0x00000-0x10FFFF, requiring up to 20 bits per character. Thus UCS-2, being limited to 16-bits, was no longer capable of representing all Unicode characters. In its place arose the &lt;strong&gt;UTF-16&lt;/strong&gt; encoding which, like UCS-2, uses a single 16-bit value to represent characters in range 0x0000-0xFFFF (the &lt;strong&gt;basic multilingual plane&lt;/strong&gt;) and two 16-bit values to represent characters in range 0x10000-0x10FFFF (the &lt;strong&gt;supplemental planes&lt;/strong&gt;). And so many UCS-2 systems were retroactively upgraded to use UTF-16 in place of UCS-2.&lt;/p&gt;

&lt;p&gt;Today, UTF-16 is the most common in-memory representation for Unicode strings. However, many programs incorrectly treat individual 16-bit values from UTF-16 directly as characters, due to ignorance of UTF-16&amp;rsquo;s variable-width nature. In many cases this causes no problems, since most programs operate on strings and substrings opaquely, as opposed to working with individual characters. However problems will arise if unaware programs attempt to manipulate characters directly, such as by counting the number of characters in a string or by filtering individual characters.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;unicode-character-encodings&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Unicode Character Encodings&lt;/h4&gt;

&lt;p&gt;Unlike the other character sets discussed previously, the Unicode character set has &lt;em&gt;multiple&lt;/em&gt; different encodings.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Character Set   &lt;/th&gt;
&lt;th&gt; Character Encoding    &lt;/th&gt;
&lt;th&gt; Character Encoding Scheme&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Unicode         &lt;/td&gt;
&lt;td&gt; UTF-8                 &lt;/td&gt;
&lt;td&gt; variable width, 1-4 bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; UCS-2                 &lt;/td&gt;
&lt;td&gt; fixed width, 2 bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; UTF-16                &lt;/td&gt;
&lt;td&gt; variable width, 2 or 4 bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; UTF-32 / UCS-4        &lt;/td&gt;
&lt;td&gt; fixed width, 4 bytes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;UTF-8&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;This is the default on-disk encoding for most modern Unicode-aware programs.

&lt;ul&gt;
&lt;li&gt;Many text editors save in this format by default.&lt;/li&gt;
&lt;li&gt;Python 2.5+ source files are assumed to be UTF-8 by default.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;It can represent any character in the Unicode character set, and thus any character in the world.&lt;/li&gt;
&lt;li&gt;It is compact, representing all ASCII characters as single bytes and most other characters as two bytes.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;⚠ Programs may optionally prepend a &lt;strong&gt;byte-order-mark (BOM)&lt;/strong&gt; at the beginning of a file to mark it as UTF-8. Most Windows programs do this, for example. Programs that input &lt;span class=&quot;nobr&quot;&gt;UTF-8&lt;/span&gt; files should be prepared to handle BOMs.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UCS-2&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;This is the native encoding used by early Unicode-aware systems, such as Java 1.4 and below.&lt;/li&gt;
&lt;li&gt;It can only represent Unicode characters in the basic plane (0x0000-0xFFFF), but no higher.&lt;br/&gt;
In particular &lt;strong&gt;supplementary characters&lt;/strong&gt; in the supplementary planes (0x10000-0x10FFFF) cannot be represented. These are sometimes called &lt;strong&gt;astral characters&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Many APIs that originally only supported UCS-2 were retroactively upgraded to use &lt;span class=&quot;nobr&quot;&gt;UTF-16&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UTF-16&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;This is the default in-memory encoding for most modern Unicode-aware systems, including Windows, Mac OS X, the Java 1.5+ runtime&lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;#fn:6&quot; rel=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;, the .NET runtime (including C#), and Python 2.x&lt;sup id=&quot;fnref:7&quot;&gt;&lt;a href=&quot;#fn:7&quot; rel=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;It can represent any character in the Unicode character set.&lt;/li&gt;
&lt;li&gt;Characters in the basic plane (0x0000-0xFFFF) are encoded as a single 16-bit value.&lt;br/&gt;
Supplementary characters (0x10000-0x10FFFF) are encoded as two 16-bit &lt;strong&gt;surrogate&lt;/strong&gt; values.&lt;/li&gt;
&lt;li&gt;⚠ It is common for code to incorrectly manipulate UTF-16 data as if it were fixed-width &lt;span class=&quot;nobr&quot;&gt;UCS-2&lt;span&gt; instead.&lt;/li&gt;
&lt;li&gt;⚠ Programs may optionally prepend a &lt;em&gt;byte-order-mark (BOM)&lt;/em&gt; at the beginning of a file to mark it as UTF-16 or to specify a byte-ordering other than big-endian. Programs that input &lt;span class=&quot;nobr&quot;&gt;UTF-16&lt;span&gt; files should be prepared to handle BOMs.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;⚠ Some outdated documentation and APIs may refer to the UTF-16 encoding as the &amp;ldquo;Unicode encoding&amp;rdquo;. Notably C#&amp;rsquo;s &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.text.unicodeencoding.aspx&quot;&gt;UnicodeEncoding&lt;/a&gt;, Mac OS X&amp;rsquo;s &lt;a href=&quot;http://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/Reference/NSString.html#//apple_ref/doc/c_ref/NSUnicodeStringEncoding&quot;&gt;NSUnicodeStringEncoding&lt;/a&gt; or Python 2.2-3.2&amp;rsquo;s &lt;code&gt;unicode&lt;/code&gt; type on &amp;ldquo;narrow&amp;rdquo; builds, which are the default.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UTF-32 / UCS-4&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;This is a fixed width encoding capable of representing any Unicode character directly as a 32-bit value.&lt;/li&gt;
&lt;li&gt;Because it is space inefficient, this encoding is rarely seen in practice.

&lt;ul&gt;
&lt;li&gt;Python 2.2-3.2 offers &amp;ldquo;wide&amp;rdquo; builds that use UTF-32.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;⚠ Programs may optionally prepend a &lt;em&gt;byte-order-mark (BOM)&lt;/em&gt; at the beginning of a file to mark it as UTF-32 or to specify a byte-ordering other than big-endian. Programs that input &lt;span class=&quot;nobr&quot;&gt;UTF-32&lt;/span&gt; files should be prepared to handle BOMs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;common-mistakes-and-practical-tips&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Common Mistakes &amp;amp; Practical Tips&lt;/h2&gt;

&lt;p&gt;&lt;a id=&quot;you-cannot-interpret-a-byte-array-as-a-string-without-knowing-its-encoding&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;You cannot interpret a byte array as a string without knowing its encoding.&lt;/h3&gt;

&lt;p&gt;&lt;a id=&quot;reading-text-files&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Reading Text Files&lt;/h4&gt;

&lt;p&gt;You cannot read a text file correctly without knowing its encoding.&lt;/p&gt;

&lt;p&gt;If you do not specify an encoding explicitly when opening a text file, your language&amp;rsquo;s standard library or operating system will usually pick a default encoding, which depends on the spoken language it is running in, among other factors.&lt;/p&gt;

&lt;p&gt;Unfortunately most filesystems do not store the encoding of a text file.&lt;sup id=&quot;fnref:8&quot;&gt;&lt;a href=&quot;#fn:8&quot; rel=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt; So there are a few options for determining an encoding:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Define a particular encoding as the expected input.&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;For example, a receipt-processing program may explicitly document UTF-8 as the encoding for its input files.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Look at the contents of the input file to auto-detect the encoding:&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;You could detect UTF byte-order-marks at the beginning of a file to automatically assume one of the UTF encodings.&lt;/li&gt;
&lt;li&gt;You could define a special syntax at the beginning of the input files to indicate the encoding.

&lt;ul&gt;
&lt;li&gt;XML uses a prelude at the top of a file to indicate what encoding it uses. For example &lt;code&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;windows-1252&quot;?&amp;gt;&lt;/code&gt; specifies that the document is in Window-1252 encoding. (Of course to even read this initial text, you have to make the working assumption that the top of the file is some encoding that is a superset of ASCII.)&lt;/li&gt;
&lt;li&gt;Python source files use a line such as &lt;code&gt;# -*- coding: utf-8 -*-&lt;/code&gt; to indicate the encoding is other than the default. (Python 2.0-2.4 uses Windows Latin 1 as the default encoding; Python 2.5-2.7 uses ASCII, Python 3.x uses UTF-8.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Failing these options, you could fall back to a defined encoding (such as ASCII for Python source files) or to the operating system&amp;rsquo;s default encoding (which can vary).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Always use the operating system&amp;rsquo;s default encoding.&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;This is often the behavior if you use your favorite programming language&amp;rsquo;s default mechanism for reading a file, such as Java&amp;rsquo;s &lt;code&gt;FileReader&lt;/code&gt; class. (Interestingly, C#&amp;rsquo;s &lt;code&gt;StreamReader&lt;/code&gt; and &lt;code&gt;StreamWriter&lt;/code&gt; classes always use UTF-8 instead of the operating system default.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;converting-between-bytes-and-strings&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Converting Between Bytes and Strings&lt;/h4&gt;

&lt;p&gt;You cannot correctly convert a byte array to a string without specifying the encoding to use.&lt;/p&gt;

&lt;p&gt;Unfortunately many languages allow you to omit the encoding, and then will try to guess the encoding (usually incorrectly) if you fail to specify it.&lt;/p&gt;

&lt;p&gt;Consider the following Java program:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;byte[] footBytes = {'f', 'u', (byte)0xC3, (byte)0x9F};
String footString = new String(footBytes);                    // WRONG: OS-dependent
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This program will decode different strings on different operating systems! On Mac OS X and Linux where the platform&amp;rsquo;s default encoding is UTF-8, the correct result (&amp;ldquo;fuß&amp;rdquo;) will be obtained since the original bytes were encoded in UTF-8. However on Windows the bogus result &amp;ldquo;fuÃŸ&amp;rdquo; will be decoded because the default encoding is Windows-1252.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the fixed program, which specifies the UTF-8 encoding explicitly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;byte[] footBytes = {'f', 'u', (byte)0xC3, (byte)0x9F};
String footString = new String(footBytes, &quot;UTF-8&quot;);           // CORRECT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As another example, consider the Java &lt;code&gt;InputStreamReader&lt;/code&gt; and &lt;code&gt;FileReader&lt;/code&gt; classes, both of which convert from byte streams to character streams.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;byte[] footBytes = {'f', 'u', (byte)0xC3, (byte)0x9F};
InputStream footStream = new ByteArrayInputStream(footBytes);
Reader footReader = new InputStreamReader(footStream);        // WRONG: OS-dependent
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or the even more innocent-looking:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Reader footReader = new FileReader(&quot;foot.txt&quot;);               // WRONG: OS-dependent
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Both of these examples are wrong for the same reason: they don&amp;rsquo;t specify the encoding.&lt;/p&gt;

&lt;p&gt;The former example can be fixed by adding &lt;code&gt;&quot;UTF-8&quot;&lt;/code&gt; as the second constructor argument:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;byte[] footBytes = {'f', 'u', (byte)0xC3, (byte)0x9F};
InputStream footStream = new ByteArrayInputStream(footBytes);
Reader footReader = new InputStreamReader(footStream, &quot;UTF-8&quot;);    // CORRECT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fixing the second example unfortunately requires using an entirely different class since &lt;code&gt;FileReader&lt;/code&gt; has no constructer with an encoding parameter.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Reader footReader = new InputStreamReader(
    new FileInputStream(&quot;foot.txt&quot;), &quot;UTF-8&quot;);                // CORRECT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course the same problems happen when encoding a string to a byte stream:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;String footString = &quot;fu\u00DF&quot;;
byte[] footBytes = footString.getBytes();                     // WRONG: OS-dependent
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And when encoding a character stream to a byte stream:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ByteArrayOutputStream footStream = new ByteArrayOutputStream();
Writer footWriter = new OutputStreamWriter(footStream);       // WRONG: OS-dependent
footWriter.write(&quot;fu\u00DF&quot;);
byte[] footBytes = footStream.toByteArray();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And when writing to text files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Writer footWriter = new FileWriter(&quot;foot.txt&quot;);               // WRONG: OS-dependent
footWriter.write(&quot;fu\u00DF&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a id=&quot;a-char-in-your-favorite-language-is-probably-not-a-character&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;A &amp;ldquo;char&amp;rdquo; (in your favorite language) is probably not a character.&lt;/h3&gt;

&lt;p&gt;Many programming languages have a &amp;ldquo;char&amp;rdquo; datatype that is intended for representing a character. Usually this &amp;ldquo;char&amp;rdquo; datatype could do this effectively at the time the language was written but not in the present day, as the notion of a character has been extended over time.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;8-bit-chars&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;8-bit chars (C/C++)&lt;/h4&gt;

&lt;p&gt;In C/C++, a &amp;ldquo;char&amp;rdquo; holds one byte. When C was first invented, 8-bit fixed-width character encodings were the norm. Therefore a single &amp;ldquo;char&amp;rdquo; was able to represent a single character precisely. However with the advent of CJK languages and multi-byte encodings, this no longer worked. Therefore a C string by itself today can only be safely interpreted as a raw byte stream. As mentioned above, you can only process it properly if you know what encoding it is in.&lt;/p&gt;

&lt;p&gt;Without any further information, C string is often assumed to be in the operating system&amp;rsquo;s default encoding, although you cannot be sure. The correct encoding to use depends on where the string was input from.&lt;/p&gt;

&lt;p&gt;A program can work with strings in a few ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Choose a particular in-memory encoding that all functions should use.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;All foreign strings will be converted to this encoding at the time of input (regardless of source). And upon output, strings will be converted to the appropriate proper output encoding.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UTF-8 and UTF-16 are both good candidates for such an in-memory encoding since they can both represent the full repertoire of Unicode characters. Therefore you won&amp;rsquo;t lose any data by converting to/from them.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;UTF-8 is compact and a superset of ASCII, so you can pass UTF-8 strings to brain-dead functions that are encoding unaware and get correct behavior as long as only ASCII characters are being used.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UTF-16 is convenient because functions that are unaware of supplementary characters will still get correct behavior as long as basic-plane Unicode characters are used, which are the most common.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pass around the text encoding around with the underlying byte array, possibly with a custom string datatype.&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;No encoding conversion overhead with reading the input stream.&lt;/li&gt;
&lt;li&gt;Cannot mix text with different encodings.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ruby takes this approach with its built-in &lt;code&gt;String&lt;/code&gt; type.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Blithely ignore encoding issues altogether and get unexpected results when working with international characters.&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Many programs written in languages where the default string type is not Unicode take this option out of ignorance. In particular this includes many programs in C, PHP, and &lt;span class=&quot;nobr&quot;&gt;Python 2.x&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Gotchas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Beware of methods that take exactly one &lt;code&gt;char&lt;/code&gt; or return exactly one &lt;code&gt;char&lt;/code&gt;.

&lt;ul&gt;
&lt;li&gt;They almost certainly aren&amp;rsquo;t aware of non-ASCII or Unicode characters.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Beware of any libraries that don&amp;rsquo;t document what text encoding it assumes.

&lt;ul&gt;
&lt;li&gt;They almost certainly aren&amp;rsquo;t aware of non-ASCII or Unicode characters.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;16-bit-chars&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;16-bit chars (Java, C#, Objective-C, Python 2.2-3.2, C/C++&amp;rsquo;s &lt;code&gt;wchar&lt;/code&gt;)&lt;/h4&gt;

&lt;p&gt;Java and C#&amp;rsquo;s &lt;code&gt;char&lt;/code&gt; are 16-bits wide. So are C/C++&amp;rsquo;s &lt;code&gt;wchar&lt;/code&gt; and Mac OS X&amp;rsquo;s &lt;code&gt;unichar&lt;/code&gt;. And so are the elements of a Python 2.x string when it is compiled in the default &amp;ldquo;narrow&amp;rdquo; mode.&lt;/p&gt;

&lt;p&gt;16-bits is sufficient to hold a Unicode character in the basic plane (0x0000-0xFFFF) but not an supplementary character in a supplemental plane (0x10000-0x10FFFF). In the case of these languages, a &lt;code&gt;char&lt;/code&gt; represents a single UTF-16 code unit (i.e. either a character in the basic plane or a surrogate) as opposed to an actual character.&lt;/p&gt;

&lt;p&gt;Therefore text-aware programs in these languages need to be particularly careful to deal with supplementary characters correctly, since those characters cannot fit into a single &lt;code&gt;char&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;Here is a typical Java program that is unaware of supplementary characters:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;String str = &quot;Hello&quot;;
for (int i=0, n=str.length(); i&amp;lt;n; i++) {
    // WRONG: Does not handle characters outside the basic plane (0x0000-0xFFFF)
    char c = str.charAt(i);

    // ... Do something with the character, like filtering out invalid characters.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is a much-longer but correct version that correctly identifies surrogates and decodes them to supplementary characters correctly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;String str = &quot;Hello&quot;;
for (int i=0, n=str.length(); i&amp;lt;n; i++) {
    char c1 = str.charAt(i);

    // CORRECT. Handles all Unicode characters.
    int codepoint;
    if (Character.isHighSurrogate(c1)) {
        if (i+1 &amp;lt; n) {
            char c2 = str.charAt(i+1);
            if (Character.isLowSurrogate(c2)) {
                // Surrogate pair
                codepoint = Character.toCodePoint(c1, c2);

                i++;
            } else {
                // High-surrogate alone
                codepoint = (int) c1;
            }
        } else {
            // High-surrogate alone at end of string
            codepoint = (int) c1;
        }
    } else {
        // Not a surrogate pair
        codepoint = (int) c1;
    }

    // ... Do something with the character, like filtering out invalid characters.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gotchas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Beware of methods that take exactly one &lt;code&gt;char&lt;/code&gt; or return exactly one &lt;code&gt;char&lt;/code&gt;.

&lt;ul&gt;
&lt;li&gt;They almost certainly aren&amp;rsquo;t aware of supplementary characters.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You can&amp;rsquo;t iterate over the characters in a &amp;ldquo;string&amp;rdquo; by iterating over the &lt;code&gt;char&lt;/code&gt;s.

&lt;ul&gt;
&lt;li&gt;Instead you have to use a loop like the above to iterate over the true characters.&lt;br/&gt;
This example stores the true character in the &lt;code&gt;codepoint&lt;/code&gt; variable.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You can&amp;rsquo;t get the i&lt;sup&gt;th&lt;/sup&gt; character of a &amp;ldquo;string&amp;rdquo; by getting the i&lt;sup&gt;th&lt;/sup&gt; &lt;code&gt;char&lt;/code&gt;.

&lt;ul&gt;
&lt;li&gt;No general workaround.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;32-bit-chars&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;32-bit chars and variable-bit chars (Python 3.3+, Haskell)&lt;/h4&gt;

&lt;p&gt;If you&amp;rsquo;re fortunate enough to work in an environment with 32-bit or variable-bit chars then your &lt;code&gt;char&lt;/code&gt; is in fact a character. Horray!&lt;/p&gt;

&lt;p&gt;The only popular environment I know of with real characters is Python 3.3+, or Python 2.2-3.2 when configured to be in &amp;ldquo;wide&amp;rdquo; mode (which is not the default).&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;end-of-line-sequences&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;End of Line Sequences&lt;/h2&gt;

&lt;p&gt;Improper handling of end-of-line (EOL) sequences is not uncommon.&lt;/p&gt;

&lt;p&gt;There are three common ways to end a line:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Linux: &lt;code&gt;\n&lt;/code&gt; (line feed alone)&lt;/li&gt;
&lt;li&gt;Windows: &lt;code&gt;\r\n&lt;/code&gt; (carriage return + line feed)&lt;/li&gt;
&lt;li&gt;Mac OS 9: &lt;code&gt;\r&lt;/code&gt; (carriage return alone)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It is possible for multiple styles to occur in the same file or string.&lt;/p&gt;

&lt;p&gt;It should also be noted that the last line in a file or string might or might not be followed by an EOL sequence. Therefore you can&amp;rsquo;t assume that every line ends with an EOL sequence.&lt;/p&gt;

&lt;p&gt;As the following examples demonstrate, you need to read your language&amp;rsquo;s documentation carefully if you want to process lines in a consistent fashion.&lt;/p&gt;

&lt;h4&gt;Java Line Reader Example&lt;/h4&gt;

&lt;p&gt;Consider the following Java program:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Prints the specified file to standard output.
public static void main(String[] args) {
    String filePath = args[0];
    BufferedReader lineReader =
        new BufferedReader(new FileReader(filePath, &quot;UTF-8&quot;));
    try {
        String nextLine;
        while ((nextLine = lineReader.readLine()) != null) {
            System.out.println(nextLine);
        }
    } finally {
        lineReader.close();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;BufferedReader&lt;/code&gt; class can deal with all end-of-line sequences. Therefore this program is resilient against mixed input.&lt;/p&gt;

&lt;p&gt;However &lt;code&gt;println&lt;/code&gt; (in the &lt;code&gt;PrintWriter&lt;/code&gt; class) emits the OS-specific end-of-line sequence, which means that this program will have different output on different operating systems. Not necessarily what you&amp;rsquo;d expect.&lt;/p&gt;

&lt;h4&gt;Python 2.x Line Reader Example&lt;/h4&gt;

&lt;p&gt;Consider the following Python 2.x program:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import codecs

file_path = sys.argv[1]
with codecs.open(file_path, 'rb', 'utf-8') as stream:
    for line_with_terminator in stream:
        line = line_with_terminator.rstrip(u'\r\n')    # remove any trailing '\r' and '\n's
        print line
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that in the Python version it is necessary to explicitly remove the &lt;code&gt;\r&lt;/code&gt; and &lt;code&gt;\n&lt;/code&gt; characters, since Python&amp;rsquo;s line iteration behavior is to return the entire line plus the end-of-line sequence (if available).&lt;/p&gt;

&lt;p&gt;Python&amp;rsquo;s &lt;code&gt;print&lt;/code&gt; statement always uses &lt;code&gt;\n&lt;/code&gt; as the end-of-line sequence, regardless of what OS it is running on. It&amp;rsquo;s nice that this is a consistent behavior, but it might not be what you expect if you are developing on Windows.&lt;/p&gt;

&lt;p&gt;Here is perhaps a more typical program that fails to handle the last line correctly if it doesn&amp;rsquo;t end with an EOL sequence:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import codecs

file_path = sys.argv[1]
with open(file_path, 'rU') as stream:     # the U mode converts all line endings to '\n'
    for line_with_terminator in stream:
        # WRONG: If last line lack an EOL this will chop off its trailing character improperly
        line = line_with_terminator[:-1]  # remove trailing '\n'
        # WRONG: Treating a bytestring as if it were a Unicode string
        print line
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Errors like this explain why lots of Unix programs warn about or get confused by files that don&amp;rsquo;t end with a final EOL.&lt;/p&gt;

&lt;p&gt;And here is another typical variation that does not handle end-of-line sequences properly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import codecs

file_path = sys.argv[1]
with open(file_path, 'rb') as stream:
    for line_with_terminator in stream:
        # WRONG: Assumes EOL is one byte long, which is incorrect on Windows
        line = line_with_terminator[:-1]  # remove trailing '\n'
        # WRONG: Treating a bytestring as if it were a Unicode string
        print line
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This kind of program will get extra &lt;code&gt;\r&lt;/code&gt; characters on the end of each line when run on Windows. It also fails to handle final lines that lack an EOL.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;summary&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;Working with text is tricky. Your programming language probably has default handling that isn&amp;rsquo;t quite what you want (or expect) so always read the documentation carefully. And if your program is intended to be usable in multiple languages, you actually should write tests that check for proper handling of Unicode characters.&lt;/p&gt;

&lt;div style=&quot;padding: .8em 1em .8em; margin-bottom: 1em; border: 1px solid #94da3a;&quot;&gt;
    &lt;p style=&quot;font-weight: bold; color: #487858;&quot;&gt;
        Series
    &lt;/p&gt;
    &lt;p style=&quot;margin-bottom: 0em;&quot;&gt;
        This article is part of the &lt;a href=&quot;/articles/2013/05/11/book-outline/&quot;&gt;Programming for Perfectionists&lt;/a&gt; series.
    &lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Updates:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2014-01-01:

&lt;ul&gt;
&lt;li&gt;Add introduction.&lt;/li&gt;
&lt;li&gt;Spell out how to add encoding parameter to &lt;code&gt;FileReader&lt;/code&gt; and &lt;code&gt;InputStreamReader&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;Specific examples of how the standard libraries of various languages mishandle text, see &lt;a href=&quot;http://mortoray.com/2013/11/27/the-string-type-is-broken/&quot;&gt;The String Type is Broken&lt;/a&gt;.&lt;a href=&quot;#fnref:1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;To be precise, the definition of &lt;em&gt;character&lt;/em&gt; used here is exactly the same as a &lt;em&gt;Unicode codepoint&lt;/em&gt;, for those readers who are already familiar with Unicode.&lt;a href=&quot;#fnref:2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:3&quot;&gt;
&lt;p&gt;Windows documentation often refers to the default character set (or sometimes the ASCII character set) as the &amp;ldquo;ANSI encoding&amp;rdquo;. This is misleading since this is not a single concrete encoding and has nothing to do with the ANSI standards body. For example, the Save dialog in Windows Notepad (in Windows 7) and &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc231241(v=prot.10).aspx&quot;&gt;Unicode Versus ANSI String Representations&lt;/a&gt; use &amp;ldquo;ANSI&amp;rdquo; to refer to the default encoding, whereas &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/aa368046(v=vs.85).aspx&quot;&gt;Copy a Unicode File to an ANSI File&lt;/a&gt; uses &amp;ldquo;ANSI&amp;rdquo; to refer to the ASCII encoding.&lt;a href=&quot;#fnref:3&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:4&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://dev.w3.org/html5/spec/Overview.html#character-encodings-0&quot;&gt;HTML 5 Draft Recommendation — 12 April 2010, 8.1 Character encodings&lt;/a&gt;, retrieved 2010-04-12.&lt;a href=&quot;#fnref:4&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:5&quot;&gt;
&lt;p&gt;The full Unicode standard also covers a wide variety of rules related to handling characters, such as sorting, rendering, and other operations. For our purposes though, we are only concerned with the Unicode character set.&lt;a href=&quot;#fnref:5&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:6&quot;&gt;
&lt;p&gt;Compare the documentation for java.lang.String between &lt;a href=&quot;http://docs.oracle.com/javase/1.4.2/docs/api/java/lang/String.html&quot;&gt;Java 1.4&lt;/a&gt; and &lt;a href=&quot;http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/String.html&quot;&gt;Java 1.5&lt;/a&gt;. The 1.5 documentation clearly states UTF-16 as the internal string encoding.&lt;a href=&quot;#fnref:6&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:7&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://www.python.org/dev/peps/pep-0261/&quot;&gt;PEP 261&lt;/a&gt; describes Python 2.x&amp;rsquo;s Unicode handling with respect to characters in the supplementary planes. &amp;ldquo;Narrow&amp;rdquo; Python builds (the default) use UTF-16 internally; &amp;ldquo;wide&amp;rdquo; Python builds use UTF-32 internally. (The distinction between narrow and wide builds disappeared in Python 3.3.)&lt;a href=&quot;#fnref:7&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:8&quot;&gt;
&lt;p&gt;The HFS filesystem used in Mac OS 9 and Mac OS X is one of the few filesystems that stores the encoding of text files as file metadata. However I think almost no modern OS X program is aware of this.&lt;a href=&quot;#fnref:8&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

</description>
    </item>
    
    
    <item>
      <title>RDiscount 2.1.6 released</title>
      <link>http://dafoster.net/articles/2013/05/28/rdiscount-2.1.6-released/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Tue, 28 May 2013 00:00:00 -0700</pubDate>
      <guid>http://dafoster.net/articles/2013/05/28/rdiscount-2.1.6-released</guid>
      <description>&lt;p&gt;There are several new features in &lt;a href=&quot;/projects/rdiscount/&quot;&gt;RDiscount&lt;/a&gt; 2.1.6. My favorite is fenced code blocks.&lt;/p&gt;

&lt;p&gt;Update to the latest version with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem update rdiscount
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RDiscount now has feature parity with the latest Discount release.&lt;/p&gt;

&lt;h2&gt;What&amp;rsquo;s New?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Fenced code blocks

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://github.github.com/github-flavored-markdown/&quot;&gt;backtick-delimited&lt;/a&gt; - from &lt;em&gt;GitHub Flavored Markdown&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://michelf.ca/projects/php-markdown/extra/#fenced-code-blocks&quot;&gt;tilde-delimited&lt;/a&gt; - from &lt;em&gt;PHP Markdown Extra&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;New extensions:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:no_superscript&lt;/code&gt; - Disables superscript processing.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:no_strikethrough&lt;/code&gt; - Disables strikethrough processing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;License changed from 4-clause BSD to the more-permissive 3-clause BSD.&lt;/li&gt;
&lt;li&gt;Fix &lt;code&gt;--&lt;/code&gt; and &lt;code&gt;---&lt;/code&gt; to be converted to &lt;code&gt;&amp;amp;ndash;&lt;/code&gt; and &lt;code&gt;&amp;amp;mdash;&lt;/code&gt; correctly.&lt;/li&gt;
&lt;li&gt;Fix handling of tables that have leading and trailing pipe characters.&lt;/li&gt;
&lt;li&gt;Fix generated table of contents to be valid HTML.&lt;br/&gt;
Handling of special characters in headings is also improved.&lt;/li&gt;
&lt;li&gt;Fix recognition of HTML tags that contain &lt;code&gt;-&lt;/code&gt; or &lt;code&gt;_&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;What&amp;rsquo;s Next?&lt;/h2&gt;

&lt;p&gt;Only David Loren Parsons knows.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; :-)&lt;/p&gt;

&lt;h3&gt;&lt;em&gt;Related Articles&lt;/em&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/articles/2013/02/02/rdiscount-2.0.7-released/&quot;&gt;RDiscount 2.0.7 released&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Release notes for the previous release of RDiscount.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/articles/2012/12/16/why-i-no-longer-use-drupal/&quot;&gt;Why I no longer use Drupal&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Why Jekyll (and not Drupal) is awesome for making a personal website or blog.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Jekyll can use RDiscount for Markdown rendering.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;David Loren Parsons is the author and maintainer of the Discount library underlying RDiscount.&lt;a href=&quot;#fnref:1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

</description>
    </item>
    
    
    <item>
      <title>Implicit Partial Application Considered Harmful</title>
      <link>http://dafoster.net/articles/2013/05/12/implicit-partial-application-and-currying-considered-harmful/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Sun, 12 May 2013 00:00:00 -0700</pubDate>
      <guid>http://dafoster.net/articles/2013/05/12/implicit-partial-application-and-currying-considered-harmful</guid>
      <description>&lt;!--
&lt;div style=&quot;padding: .8em 1em .8em; margin-bottom: 1em; border: 1px solid #94da3a;&quot;&gt;
    &lt;p style=&quot;font-weight: bold; color: #487858;&quot;&gt;
        Audience
    &lt;/p&gt;
    &lt;p style=&quot;margin-bottom: 0em;&quot;&gt;
        I assume familiarity with the Haskell programming language or some other language that supports calling a function with less arguments than the function's signature requires. In academic-speak, this is called &quot;partial application of a function&quot;.
    &lt;/p&gt;
&lt;/div&gt;
--&gt;




&lt;div style=&quot;padding: .8em 1em .8em; margin-bottom: 1em; border: 1px solid #94da3a;&quot;&gt;
    &lt;p style=&quot;font-weight: bold; color: #487858;&quot;&gt;
        Purpose
    &lt;/p&gt;
    &lt;p&gt;
        This article is intended to convey my confusion and minor frustration
        with trying to understand part of Haskell's syntax as I currently
        learn Haskell.
    &lt;/p&gt;
    &lt;p style=&quot;margin-bottom: 0em;&quot;&gt;
        Since Haskell has many unfamilar concepts relative to other languages
        I know well, I am likely to make some terminology mistakes here. I am
        learning and welcome corrections. Please see the discussion on
        &lt;a href=&quot;http://www.reddit.com/r/haskell/comments/1elklu/currying_considered_harmful/&quot;&gt;Reddit&lt;/a&gt;.
    &lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;Consider the following function-call expression in Haskell:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(alpha beta gamma)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What can be deduced?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alpha&lt;/code&gt; is a function (either imported or in a variable).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In most languages (that disallow implicit partial application) you could additionally deduce:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alpha&lt;/code&gt; takes exactly 2 arguments&lt;/li&gt;
&lt;li&gt;The expression&amp;rsquo;s return type matches that of &lt;code&gt;alpha&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Neither of those two properties are necessarily true in Haskell.&lt;/p&gt;

&lt;h3&gt;Case 1: alpha takes exactly 2 arguments&lt;/h3&gt;

&lt;p&gt;In this case, the expression behaves as you&amp;rsquo;d expect in any other language. In particular:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alpha&lt;/code&gt; takes exactly 2 arguments&lt;/li&gt;
&lt;li&gt;The expression&amp;rsquo;s return type matches that of &lt;code&gt;alpha&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Case 2: alpha takes more than 2 arguments&lt;/h3&gt;

&lt;p&gt;In this case, the expression is a partial application of &lt;code&gt;alpha&lt;/code&gt;, and would be perhaps better read as:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(\ ... -&amp;gt; alpha beta gamma ...)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Or, in a more C-like notation:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;function (...) { return alpha(beta, gamma, ...); }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Thus:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alpha&lt;/code&gt; takes exactly 2+K arguments, for some unknown K.&lt;/li&gt;
&lt;li&gt;The expression returns a function of K arguments.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Case 3: alpha takes less than 2 arguments&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s say &lt;code&gt;alpha&lt;/code&gt; takes 1 argument. This would be intuitively read as:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;((alpha beta) gamma)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After this reformulation you need to recursively examine the new expression.&lt;/p&gt;

&lt;p&gt;In this example, we can deduce:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(alpha beta)&lt;/code&gt; returns an anonymous function of (at least) 1 argument.&lt;/li&gt;
&lt;li&gt;If this anonymous function takes 1 argument, then it is just called with &lt;code&gt;gamma&lt;/code&gt;, and the original expression&amp;rsquo;s return type matches the return type of the anonymous function.&lt;/li&gt;
&lt;li&gt;If this anonymous function takes more than one argument (1+K), then it is partially applied to &lt;code&gt;gamma&lt;/code&gt;, and yet another anonymous function (that takes K parameters) is returned as the result of the original expression.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Summary&lt;/h3&gt;

&lt;p&gt;What a mess. If &lt;code&gt;alpha&lt;/code&gt; does not in fact take two arguments then I have to exert non-trivial effort to derive the type of the expression - or even what the expression semantics are.&lt;/p&gt;

&lt;h2&gt;Reducing the Ambiguity&lt;/h2&gt;

&lt;p&gt;There are two ways I can see to simplify these weird cases:&lt;/p&gt;

&lt;h3&gt;Make partial application &lt;em&gt;explicit&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Then we would see syntax like:&lt;/p&gt;

&lt;pre&gt;
-- alpha takes 2 arguments
-- return type matches that of alpha
(alpha beta gamma)

-- alpha takes 2+K arguments;
-- return type is a partially applied K-argument function
(alpha beta gamma ...)   

-- alpha takes 1 argument and returns a 1-argument function;
-- expression's return type matches that of the 1-argument function
((alpha beta) gamma)

-- alpha takes 1 argument and returns a (1+K)-argument function;
-- expression's return type is a partially applied K-argument function
((alpha beta) gamma ...)
&lt;/pre&gt;


&lt;p&gt;Notice that each conceptually different case now has a unique syntactic representation - it&amp;rsquo;s no longer just &lt;code&gt;(alpha beta gamma)&lt;/code&gt; for all cases.&lt;/p&gt;

&lt;h3&gt;Use a grouping operator for function application&lt;/h3&gt;

&lt;p&gt;For example parentheses could be used instead of a space to signify function calls.&lt;/p&gt;

&lt;p&gt;Using a grouping operator syntactically prohibits relying on the left-associativity of space for partial function application, since a grouping operator doesn&amp;rsquo;t have associativity.&lt;/p&gt;

&lt;p&gt;If you combined this suggestion with the explicit syntax extension above, you would get syntax like:&lt;/p&gt;

&lt;pre&gt;
-- alpha takes 2 arguments
-- return type matches that of alpha
alpha(beta, gamma)

-- alpha takes 2+K arguments;
-- return type is a partially applied K-argument function
alpha(beta, gamma, ...)   

-- alpha takes 1 argument and returns a 1-argument function;
-- expression's return type matches that of the 1-argument function
alpha(beta)(gamma)

-- alpha takes 1 argument and returns a (1+K)-argument function;
-- expression's return type is a partially applied K-argument function
alpha(beta)(gamma, ...)
&lt;/pre&gt;


&lt;p&gt;This more C-like (or ALGOL-like) notation is a lot more readable to mainstream programmers than the original Haskell syntax.&lt;/p&gt;

&lt;h3&gt;&lt;em&gt;Related Articles&lt;/em&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/articles/2013/01/29/unique-features-of-various-programming-languages/&quot;&gt;Unique Features of Various Programming Languages&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Describes several other programming languages and their unique features.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/articles/2013/02/20/visual-guide-to-programming-language-properties/&quot;&gt;Visual Guide to Programming Language Properties&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Visualizes how various programming language properties interact.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Appendix&lt;/h2&gt;

&lt;p&gt;I originally got bitten by this syntactic ambiguity when trying to decipher the meaning of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(flip (/) 20)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I was not previously familar with &lt;code&gt;flip&lt;/code&gt; and so I assumed that it took two arguments, a function (namely &lt;code&gt;(/)&lt;/code&gt;) and a non-function (namely &lt;code&gt;20&lt;/code&gt;). And that it probably returned a function, since its surrounding context expected a function.&lt;/p&gt;

&lt;p&gt;In fact &lt;code&gt;flip&lt;/code&gt; takes only one argument and thus is more clearly written as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;((flip (/)) 20)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And inlined further to be the lower-order:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(\x -&amp;gt; x / 20)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, if desired, further rewritten to be the more-compact:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(/ 20)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This last form uses partial application to fill in the first argument of &lt;code&gt;/&lt;/code&gt;, which is obvious since &lt;code&gt;/&lt;/code&gt; is a well-known built-in infix operator that requires an unspecified left argument.&lt;/p&gt;
</description>
    </item>
    
    
    <item>
      <title>Programming for Perfectionists (P4P): A Book Outline</title>
      <link>http://dafoster.net/articles/2013/05/11/book-outline/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Sat, 11 May 2013 00:00:00 -0700</pubDate>
      <guid>http://dafoster.net/articles/2013/05/11/book-outline</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve read a lot of programming books. Many focus on teaching a particular language or tool, or are for teaching beginner developers the ropes. Precious few are designed to bring intermediate developers up to an advanced level. It&amp;rsquo;s time to change that.&lt;/p&gt;

&lt;p&gt;Here is an outline of a book I would like to write. I will probably try writing some of these sections and chapters as future article posts. When that happens, each section below will be replaced with a link to the associated article.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Programming for Perfectionists&amp;rdquo; is the working title for the book and may be revised later.&lt;/p&gt;

&lt;div class=&quot;toc&quot;&gt;
  &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#fundamentals&quot;&gt;Fundamentals&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#representations&quot;&gt;Representations&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#numbers&quot;&gt;Numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#text&quot;&gt;Text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#color&quot;&gt;Color&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#pictures&quot;&gt;Pictures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sound&quot;&gt;Sound&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#time&quot;&gt;Time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#video&quot;&gt;Video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#collections&quot;&gt;Collections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#error-handling&quot;&gt;Error Handling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#concurrency&quot;&gt;Concurrency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#memory-management&quot;&gt;Memory Management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#languages&quot;&gt;Languages&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#comparing-programming-languages&quot;&gt;Comparing Programming Languages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#programming-paradigms&quot;&gt;Programming Paradigms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#process&quot;&gt;Process&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#collaborative-software-development&quot;&gt;Collaborative Software Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#code-conventions&quot;&gt;Code Conventions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#communicating-software-designs&quot;&gt;Communicating Software Designs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#detecting-defects-early&quot;&gt;Detecting Defects Early (Testing)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#improving-code-quality&quot;&gt;Improving Code Quality (Basic Refactoring)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#debugging-techniques&quot;&gt;Debugging Techniques&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#profiling-instrumentation&quot;&gt;Profiling/Instrumentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#maintaining-legacy-code-safely&quot;&gt;Maintaining Legacy Code Safely (Advanced Refactoring)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#other&quot;&gt;Other&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#persistence&quot;&gt;Persistence&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#comments&quot;&gt;Comments?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#progress&quot;&gt;Progress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/div&gt;


&lt;p&gt;&lt;a id=&quot;introduction&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The purpose of this book is to provide a &lt;em&gt;wide and shallow&lt;/em&gt; overview of important concepts in real-world software development. As such the treatment of various topics will not be comprehensive. Entire books have been written on the topic of each chapter, and appropriate references will be provided where appropriate.&lt;/p&gt;

&lt;p&gt;This book will not teach specific tools, languages, or programs in depth. It deals in concepts and patterns. However references to specific tools and languages will be provided liberally in concrete examples.&lt;/p&gt;

&lt;p&gt;Many concepts presented here are ones that I feel are missing from the traditional &amp;ldquo;computer science&amp;rdquo; curriculum, yet which I feel to be vital to understand when working with real-world software.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;fundamentals&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Fundamentals&lt;/h2&gt;

&lt;p&gt;&lt;a id=&quot;representations&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Representations&lt;/h3&gt;

&lt;p&gt;Many developers do not understand the common ways of representing various kinds of real-world data, such as text, integers, color, and time. This leads to errors such as munging of international characters, integer overflow vulnerabilities, ignorance of color correction, and bugs that only trigger at midnight on leap years.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a id=&quot;numbers&quot;&gt;&lt;/a&gt;&lt;strong&gt;Numbers&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Integers

&lt;ul&gt;
&lt;li&gt;Fixed-precision 2&amp;rsquo;s complement&lt;/li&gt;
&lt;li&gt;Arbitrary Precision Integers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Decimals

&lt;ul&gt;
&lt;li&gt;Floating Point&lt;/li&gt;
&lt;li&gt;Fixed Point&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id=&quot;text&quot;&gt;&lt;/a&gt;&lt;a href=&quot;/articles/2013/06/01/handling-text-correctly/&quot;&gt;&lt;strong&gt;Text&lt;/strong&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Characters and Codepoints&lt;/li&gt;
&lt;li&gt;Text Encodings

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;ANSI&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unicode, UTF-8, UCS-2, UTF-16

&lt;ul&gt;
&lt;li&gt;Basic Multilingual Plane, Astral Characters&lt;/li&gt;
&lt;li&gt;BOM&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Characters&amp;rdquo; and &amp;ldquo;Strings&amp;rdquo; in popular programming languages&lt;/li&gt;
&lt;li&gt;Line-ending sequences&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id=&quot;color&quot;&gt;&lt;/a&gt;&lt;strong&gt;Color&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Color Models, &amp;ldquo;RGB&amp;rdquo;, Colorspaces, CIE, Gamma&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id=&quot;pictures&quot;&gt;&lt;/a&gt;&lt;strong&gt;Pictures&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Resolution

&lt;ul&gt;
&lt;li&gt;Magic: 72 dpi and 96 dpi&lt;/li&gt;
&lt;li&gt;Resolution Independence&lt;/li&gt;
&lt;li&gt;Pixel Doubling&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Non-Square Pixels (ex: NTSC)&lt;/li&gt;
&lt;li&gt;Anamorphic Projections&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id=&quot;sound&quot;&gt;&lt;/a&gt;&lt;strong&gt;Sound&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id=&quot;time&quot;&gt;&lt;/a&gt;&lt;strong&gt;Time&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id=&quot;video&quot;&gt;&lt;/a&gt;&lt;strong&gt;Video&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;collections&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Collections&lt;/h3&gt;

&lt;p&gt;Collections are the backbone for representing compound data in any programming language. Specific implementations are covered in great detail in most any traditional CS textbook. However there are a number of more advanced collections which are useful for tough problems.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Basic Collections&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Arrays

&lt;ul&gt;
&lt;li&gt;Bit Vectors&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lists

&lt;ul&gt;
&lt;li&gt;Array lists&lt;/li&gt;
&lt;li&gt;Linked lists&lt;/li&gt;
&lt;li&gt;Linked lists of arbitrary objects&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sets

&lt;ul&gt;
&lt;li&gt;Hash set&lt;/li&gt;
&lt;li&gt;Linked hash set&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sorted Sets

&lt;ul&gt;
&lt;li&gt;Red &amp;amp; black trees&lt;/li&gt;
&lt;li&gt;Heaps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Maps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Advanced Collections&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Bags

&lt;ul&gt;
&lt;li&gt;Counted Bags&lt;/li&gt;
&lt;li&gt;Partitioning Bags&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multimaps&lt;/li&gt;
&lt;li&gt;Bidi Multimaps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Advanced Data Structures&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Trees&lt;/li&gt;
&lt;li&gt;Graphs (including: directed, multi)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;error-handling&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;/articles/2013/07/13/error-handling/&quot;&gt;Error Handling&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;There are many more ways for a program to fail than succeed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Signaling (Error Codes vs. Exceptions vs. Sentinels)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Sentinels - null, 0, -1, false&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Guarantees after failure&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;In original state (Atomic, Transactional)&lt;/li&gt;
&lt;li&gt;In different but valid state&lt;/li&gt;
&lt;li&gt;In different and potentially illegal state&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Behaviors upon failure&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Delegate to caller&lt;/li&gt;
&lt;li&gt;Handle internally

&lt;ul&gt;
&lt;li&gt;Aside: Minix is the extreme of this approach.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Exit program

&lt;ul&gt;
&lt;li&gt;Linux Kernel: panic()&lt;/li&gt;
&lt;li&gt;Python, PHP: die()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Display to user&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Error Locality &amp;amp; Failing Fast&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Assertions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Designing Error Messages&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Error Seriousness&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Expected - &lt;code&gt;Exception&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Unexpected - &lt;code&gt;RuntimeException&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fatal - &lt;code&gt;Error&lt;/code&gt; (esp. &lt;code&gt;OutOfMemoryError&lt;/code&gt;)

&lt;ul&gt;
&lt;li&gt;Aside: Certain programs are actually designed to handle OOM errors (ex: SQLite). Most are not.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Bonus:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Checked Exceptions&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exception Wrapping&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;concurrency&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Concurrency&lt;/h3&gt;

&lt;p&gt;Early languages like C pretend that threads don&amp;rsquo;t even exist. And even amidst the multi-core systems today, many programmers would like to pretend that concurrent execution doesn&amp;rsquo;t exist. A huge number of concurrency-related bugs are found in production code today.&lt;/p&gt;

&lt;p&gt;Many developers are familiar with the &amp;ldquo;shared memory &amp;amp; locks&amp;rdquo; model used by most mainstream programming languages for working with concurrency. This model unfortunately makes it very easy to introduce bugs, and these bugs are often difficult to detect since they depend on the precise ordering of randomly-ordered events. Deadlocks and livelocks also lurk to trip the unwary. This and other more-robust models will be presented here.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Terminology&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Processes, Threads, and Green Threads&lt;/li&gt;
&lt;li&gt;Concurrency vs. Parallelism&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shared Memory &amp;amp; Locks Model&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Thread Safe vs. Thread Unsafe vs. Thread Hostile&lt;/li&gt;
&lt;li&gt;Deadlocks, Livelocks, and Lock Hierarchies&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Apartment Threading&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Thread Affinity&lt;/li&gt;
&lt;li&gt;Run Loops&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Actor Model&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Immutability&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Read-Copy-Update&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;memory-management&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Memory Management&lt;/h3&gt;

&lt;p&gt;Tradeoffs should be described for each of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Manual Memory Management&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Ownership - &amp;ldquo;Own &amp;amp; Borrow&amp;rdquo; Model&lt;/li&gt;
&lt;li&gt;Hierarchy, Composites vs. Aggregates&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reference Counting&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Automatic Reference Counting&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Garbage Collection&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Generational Collectors&lt;/li&gt;
&lt;li&gt;Mark &amp;amp; Sweep&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Bonus:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Special-Purpose Memory Allocators&lt;/strong&gt; (to reduce calls to system&amp;rsquo;s malloc)

&lt;ul&gt;
&lt;li&gt;Slab Allocaters&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;languages&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Languages&lt;/h2&gt;

&lt;p&gt;&lt;a id=&quot;comparing-programming-languages&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Comparing Programming Languages &lt;small&gt;(The Right Tool for the Right Job)&lt;/small&gt;&lt;/h3&gt;

&lt;p&gt;A programming language is a tool for getting work done. Some tools are better at certain tasks than others. Thus picking your tool wisely for the task at hand will save you effort down the road.&lt;/p&gt;

&lt;p&gt;It should also be noted that a programming language does not stand alone; it comes with an entire ecosystem of tools and people along with it. Such ecosystems often cater to a particular domain and make it easier to work with programs in that domain.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Native Development (Desktop, Mobile, and Embedded)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;C/C++ - lingua franca; easiest to bind to OS; hand-optimized performance-critical code&lt;/li&gt;
&lt;li&gt;Java - rich cross-platform development (including GUIs); server programming&lt;/li&gt;
&lt;li&gt;Python - rich cross-platform CLI scripting; text &amp;amp; data processing&lt;/li&gt;
&lt;li&gt;C# - rich Windows app programming&lt;/li&gt;
&lt;li&gt;Objective-C - native OS X development; native iOS development&lt;/li&gt;
&lt;li&gt;PowerShell - Windows CLI scripting&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Web Development (Server-Side)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;PHP - web application prototyping; most widely deployed server-side scripting language

&lt;ul&gt;
&lt;li&gt;Java &amp;amp; JSP - Java&amp;rsquo;s clone of PHP&lt;/li&gt;
&lt;li&gt;C# &amp;amp; ASP.NET - Microsoft&amp;rsquo;s clone of PHP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ruby &amp;amp; Ruby on Rails - bleeding-edge full-stack web framework&lt;/li&gt;
&lt;li&gt;Python &amp;amp; Django - mature full-stack web framework; rapid development; excellent ORM&lt;/li&gt;
&lt;li&gt;Python &amp;amp; web2py - mature full-stack web framework

&lt;ul&gt;
&lt;li&gt;Anecdotal evidence suggests PHP refugees prefer web2py over Django,
probably because it uses implicit behavior (i.e. magic) to avoid boilerplate.
In contrast Django&amp;rsquo;s philosophy is &amp;ldquo;explicit is better than implicit&amp;rdquo;,
which is more in line with general Python philosophy.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python &amp;amp; (lots of choices) - lightweight web framework; for maximum control

&lt;ul&gt;
&lt;li&gt;Pyramid&lt;/li&gt;
&lt;li&gt;Flask&lt;/li&gt;
&lt;li&gt;web.py&lt;/li&gt;
&lt;li&gt;CherryPy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Web Development (Client-Side)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;HTML, CSS, JavaScript - assembly languages&lt;/li&gt;
&lt;li&gt;Haml, Sass, CoffeeScript - 2nd-order languages&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Special-Purpose Languages&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Fortran - high-performance numerical programming&lt;/li&gt;
&lt;li&gt;Lua - embedded game programming (ex: game mods, AIs)&lt;/li&gt;
&lt;li&gt;Lisp (Racket) - academic programming&lt;sup&gt;AcadProg&lt;/sup&gt;; dynamic; great for embedded DSLs&lt;/li&gt;
&lt;li&gt;Haskell - academic programming&lt;sup&gt;AcadProg&lt;/sup&gt;; static; better compile-time safety than any mainstream language&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;span style=&quot;font-variant: small-caps;&quot;&gt;AcadProg&lt;/span&gt;: This language tends to be used in academia, especially by programming language researchers. Thus it also gets various cutting-edge programming language features before mainstream languages.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;programming-paradigms&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Programming Paradigms &lt;small&gt;(Ideas that Change the World)&lt;/small&gt;&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;The following paradigms are presented in chronological order by their recognition in the wider programming community.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;(Ye Olde) Structured Programming (ALGOL)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;ban &lt;code&gt;goto&lt;/code&gt; &amp;ndash; GOTO Considered Harmful&lt;/li&gt;
&lt;li&gt;single entry, single exit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Declarative Programming (Prolog, SQL, and other DSLs)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Tell me what you want to do and I&amp;rsquo;ll figure out how to actually do it.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Object-Oriented Programming (Smalltalk &amp;amp; Java)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Decomposing the behavior of a large system into smart modules that interact with each other through interfaces.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Functional Programming (Lisp &amp;amp; Haskell)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Higher-order functions.&lt;/li&gt;
&lt;li&gt;Building complex data structures out of simple primitive collections (especially lists).&lt;/li&gt;
&lt;li&gt;Constrained side effects.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;process&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Process&lt;/h2&gt;

&lt;p&gt;&lt;a id=&quot;collaborative-software-development&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Collaborative Software Development&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Open Source&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Stand on the shoulders of giants. Learn new techniques.&lt;/li&gt;
&lt;li&gt;Work on projects you&amp;rsquo;re passionate about.&lt;/li&gt;
&lt;li&gt;Start your own projects to get free development resources from the community.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Version Control Systems&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Centralized (CVS, SVN, Perforce)&lt;/li&gt;
&lt;li&gt;Distributed (Git, Mercurial)&lt;/li&gt;
&lt;li&gt;Patches - create, view, apply, submit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automated Build Systems&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;configure, make (C&lt;wbr/&gt;)&lt;/li&gt;
&lt;li&gt;Ant (Java)&lt;/li&gt;
&lt;li&gt;Rake (Ruby)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dependency Management&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Versioning

&lt;ul&gt;
&lt;li&gt;Semantic Versioning&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Package Managers, Environment Isolators&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;code-conventions&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Code Conventions&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Philosophy&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Clarity is paramount.&lt;/li&gt;
&lt;li&gt;Consistency is a close second.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Indentation&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;2 columns vs. 4 columns&lt;/li&gt;
&lt;li&gt;Tabs vs. spaces&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;80 column lines&lt;/strong&gt; (or max 100)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Brace positioning&lt;/strong&gt; (when applicable)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Whitespace around operators&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Method ordering and grouping&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Blank lines and paragraphs&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;communicating-software-designs&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Communicating Software Designs &lt;small&gt;(UML &amp;amp; Other Diagrammatic Notations)&lt;/small&gt;&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Most of the following diagram notations assume the use of object-oriented programming. Non-OO languages do not have any standard diagram types, to my knowledge.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;(Ye Olde) Flow Chart&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Class Diagrams&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;State Charts&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sequence &amp;amp; Communication Diagrams&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use Cases (Fully Dressed)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CRC Cards&lt;/strong&gt; (designing classes with responsibilities in mind)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;detecting-defects-early&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Detecting Defects Early &lt;small&gt;(Testing)&lt;/small&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Unit Testing, Code Coverage, Continuous Integration&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Static Analysis&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Compiler

&lt;ul&gt;
&lt;li&gt;Strong static typing&lt;/li&gt;
&lt;li&gt;Enabling extra warnings (&lt;code&gt;-Wall&lt;/code&gt;, &lt;code&gt;-Weverything&lt;/code&gt;, &lt;code&gt;-Werror&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lint&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dynamic Analysis&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Valgrind&lt;/li&gt;
&lt;li&gt;Fault Injection&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Test Matrixes, Environment Isolators, Virtual Machines&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ldquo;Large Hammers&amp;rdquo;&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Fuzzing&lt;/li&gt;
&lt;li&gt;Stress Testing&lt;/li&gt;
&lt;li&gt;Longhaul Testing&lt;/li&gt;
&lt;li&gt;(many more)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;improving-code-quality&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Improving Code Quality &lt;small&gt;(Basic Refactoring)&lt;/small&gt;&lt;/h3&gt;

&lt;p&gt;Transforming the structure of existing code to improve it while maintaining its original behavior is a process called refactoring. Regularly applying refactoring to your code will greatly extend its maintainable life.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Rename Method or Variable&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Extract Method&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Introduce Explaining Variable&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Replace Magic Number with Symbolic Constant&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Replace Nested Conditional with Guard Clauses&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Meta:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Duplication is the root of all evil.&lt;/li&gt;
&lt;li&gt;Prefer delegation over inheritance.&lt;/li&gt;
&lt;li&gt;Prefer interfaces over abstract classes.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;debugging-techniques&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Debugging Techniques &lt;small&gt;(When It Breaks)&lt;/small&gt;&lt;/h3&gt;

&lt;p&gt;No program is perfect. Even if one were, requirement changes will break it soon enough.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Print Statements, Logging&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Debuggers&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Breakpoints, Catchpoints&lt;/li&gt;
&lt;li&gt;Conditional Breakpoints &amp;amp; Watching variables&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Heap Analyzers&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;profiling-instrumentation&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Profiling/Instrumentation &lt;small&gt;(Making It Faster)&lt;/small&gt;&lt;/h3&gt;

&lt;p&gt;Meta:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Premature optimization is frequently a waste of time.

&lt;ul&gt;
&lt;li&gt;Programmer time is more valuable that machine time.&lt;/li&gt;
&lt;li&gt;Algorithm choice has a larger impact on performance than almost any manual tweaking.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;maintaining-legacy-code-safely&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Maintaining Legacy Code Safely &lt;small&gt;(Advanced Refactoring)&lt;/small&gt;&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Although the concept of refactoring can be applied to any code, not just legacy code, the &lt;/em&gt;deliberate and careful&lt;em&gt; application of refactoring techniques is mostly restricted to legacy code.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is covered in great detail in the &amp;ldquo;Refactoring&amp;rdquo; book by Martin Fowler.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;other&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Other&lt;/h2&gt;

&lt;p&gt;The topics in this section don&amp;rsquo;t fit in any of the other major topics. Should these extra topics not form a cohesive whole, they will not be included in the book.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;persistence&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Persistence&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Prefer the use of a standard metaformat instead of rolling your own format.&lt;br/&gt;
You&amp;rsquo;ll save a ton of time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Standard Metaformats&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;XML&lt;/li&gt;
&lt;li&gt;JSON&lt;/li&gt;
&lt;li&gt;YAML&lt;/li&gt;
&lt;li&gt;Config files

&lt;ul&gt;
&lt;li&gt;UNIX config file&lt;/li&gt;
&lt;li&gt;Windows INI file&lt;/li&gt;
&lt;li&gt;Mac Plist file&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SQLite database&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Considerations with custom formats&lt;/strong&gt;:

&lt;ul&gt;
&lt;li&gt;Text vs. Binary&lt;/li&gt;
&lt;li&gt;Backward Compatibility, Forward Compatibility, Version Numbers&lt;/li&gt;
&lt;li&gt;Extensibility&lt;/li&gt;
&lt;li&gt;In-place Modifications &amp;amp; Appendability

&lt;ul&gt;
&lt;li&gt;For text formats, this means the preservation of comments and whitespace.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Partially-loadable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Examples of custom formats&lt;/strong&gt;:

&lt;ul&gt;
&lt;li&gt;Hotline protocol - highly extensible, featureful, binary protocol&lt;/li&gt;
&lt;li&gt;Mac resource fork format - partially-loadable appendable binary file format&lt;/li&gt;
&lt;li&gt;QuickTime video container - highly extensible binary file format&lt;/li&gt;
&lt;li&gt;Matroska video container - highly extensible binary file format&lt;/li&gt;
&lt;li&gt;ZIP file format&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bundles&lt;/strong&gt; - a means for combining multiple subfiles into a single virtual file&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;comments&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Comments?&lt;/h2&gt;

&lt;p&gt;Does any of this content sound interesting to you? If so, &lt;a href=&quot;/contact/&quot;&gt;drop me a line&lt;/a&gt;. I may add/remove content and/or modify the order that I write the chapters based on feedback.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;progress&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Progress&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;2013-07-13&lt;/strong&gt;: Added the &lt;a href=&quot;/articles/2013/07/13/error-handling/&quot;&gt;Error Handling&lt;/a&gt; chapter.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2013-06-01&lt;/strong&gt;: Added the &lt;a href=&quot;/articles/2013/06/01/handling-text-correctly/&quot;&gt;Text&lt;/a&gt; chapter.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;For example, the early appearance of the Ruby on Rails web framework in the Ruby language caused a lot of the Ruby ecosystem to cater to web development needs. Subsequently Ruby gained the &amp;ldquo;move fast and break things&amp;rdquo; web mentality, along with the necessary tooling to support that mentality: heavy-duty testing, continuous integration, semantic versioning, package management, etc.&lt;a href=&quot;#fnref:1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

</description>
    </item>
    
    
    <item>
      <title>Avoid feeling like a port on the Mac</title>
      <link>http://dafoster.net/articles/2013/05/07/avoid-feeling-like-a-port-on-the-mac/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Tue, 07 May 2013 00:00:00 -0700</pubDate>
      <guid>http://dafoster.net/articles/2013/05/07/avoid-feeling-like-a-port-on-the-mac</guid>
      <description>&lt;p&gt;Mac users get rather annoyed when using programs that feel like they&amp;rsquo;re just a port from another OS (usually Windows).&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s are a few important points for making your Mac app feel like a native app:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The user should never have to refresh local information that an application is viewing. Refresh should happen automatically when needed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Exception:&lt;/em&gt; Web browsers. (The HTTP protocol provides no means to detect whether a web page requires refresh while it is being viewed.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Common violation:&lt;/em&gt; Wait for an application to close, without auto-refreshing the application list. [&lt;em&gt;violated by Adobe Flash Updater&lt;/em&gt;]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Common violation:&lt;/em&gt; Wait for disk to be inserted, without auto-refreshing the disk list.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When altering settings, change take effect &lt;em&gt;immediately&lt;/em&gt;. If these settings are presented in a dialog, the changes can be reverted by pressing Cancel.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Common violation:&lt;/em&gt; Settings dialogs that have an &amp;ldquo;Apply&amp;rdquo; button in addition to &amp;ldquo;OK&amp;rdquo; and &amp;ldquo;Cancel&amp;rdquo;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When dialogs are used to present information, the buttons in the dialog should have titles that are useful and easy to interpret. The default action should be presented as the right-most button.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt; The Log Out action presents a dialog asking the user to confirm whether they want to log out, with buttons &amp;ldquo;Cancel&amp;rdquo; and &amp;ldquo;Log Out&amp;rdquo;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Common violation:&lt;/em&gt; Any dialog with &amp;ldquo;Yes&amp;rdquo;, &amp;ldquo;No&amp;rdquo;, and &amp;ldquo;Cancel&amp;rdquo; buttons.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don&amp;rsquo;t ask the user any information that can be detected automatically with high confidence.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Common violation:&lt;/em&gt; Asking the user what language to use. [&lt;em&gt;Some installers&lt;/em&gt;]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Common violation:&lt;/em&gt; Web pages for downloading software that prompt the user to select 32-bit vs. 64-bit architecture or an OS version.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Aesthetics are important. If you make an ugly app, it probably won&amp;rsquo;t be used.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Drag &amp;amp; drop should be supported whenever it seems like it should make sense.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;And now for some nitpicks related to command key shortcuts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Common command key shortcuts must be supported and not modified:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Command-Shift-Z = Redo [&lt;em&gt;violated by all Microsoft programs&lt;/em&gt;]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Command-Left/Right = Move to beginning and end of line [&lt;em&gt;violated by all Microsoft programs&lt;/em&gt;]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Command-F = Find [&lt;em&gt;violated by Microsoft Outlook&lt;/em&gt;]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Command-P = Print [&lt;em&gt;violated by Sublime Text&lt;/em&gt;]&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All command key shortcuts must include the command key. That is neither Control nor Option (Alt) can be the primary modifier for a shortcut sequence.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do not make shortcuts with the function keys (F1 - F15). They are hard to remember.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All command key shortcuts must be tied to a menu item.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt; Command-Option-Escape (Force Quit), which is analogous to Control-Alt-Delete on Windows, can actually be found in the Apple menu.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Exception:&lt;/em&gt; Command-Shift-3 and Command-Shift-4 are legacy shortcuts that take screenshots.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is no such thing as the Apple key. You probably meant the Command key.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is no such thing as the Backspace key. You probably meant the Delete key - which is not to be confused with the Forward Delete key, which most Windows users just call Delete.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not all users have a right mouse button. In that case, you must instruct the user to Control-click instead of right-click.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Exemplar:&lt;/em&gt; The game Black and White detects whether the primary mouse is a single-button or a multi-button mouse and provides different instructions (and mouse graphics) for each case.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For all other issues, including other philosphical concerns to consider, read and follow the OS X &lt;a href=&quot;https://developer.apple.com/library/mac/#documentation/UserExperience/Conceptual/AppleHIGuidelines/Intro/Intro.html&quot;&gt;Human Interface Guidelines&lt;/a&gt;&amp;nbsp;(HIG). This is one of the best descriptions of the &amp;ldquo;Zen of the Mac&amp;rdquo;. Every Mac developer should reread this every few years.&lt;/p&gt;
</description>
    </item>
    
    
    <item>
      <title>Copyrights and Licenses for Software</title>
      <link>http://dafoster.net/articles/2013/04/30/copyrights-and-licenses-for-software/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Tue, 30 Apr 2013 00:00:00 -0700</pubDate>
      <guid>http://dafoster.net/articles/2013/04/30/copyrights-and-licenses-for-software</guid>
      <description>&lt;p&gt;This is a quick overview of copyrights and licenses for software developers who may not know their rights under United States law. I cannot speak for international copyright law.&lt;/p&gt;

&lt;div style=&quot;padding: .8em 1em .8em; margin-bottom: 1em; border: 1px solid #94da3a;&quot;&gt;
    &lt;p style=&quot;font-weight: bold; color: #487858;&quot;&gt;
        Disclaimer
    &lt;/p&gt;
    &lt;p style=&quot;margin-bottom: 0em;&quot;&gt;
        This article presents legal information but does not provide legal advise. Although all information is correct to the best of my knowledge, I will not be held responsible for the consequences of actions you take based on information found to be incorrect or misleading.
    &lt;/p&gt;
&lt;/div&gt;


&lt;h2&gt;Copyrights&lt;/h2&gt;

&lt;p&gt;The first time that a piece of software is published, whether it be in binary or source form, it automatically gains copyright status. This is true even if you don&amp;rsquo;t include the magic words &lt;code&gt;Copyright (c) 2013 David Foster&lt;/code&gt;.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h3&gt;Copyright grants the author certain exclusive rights.&lt;/h3&gt;

&lt;p&gt;That is, other people don&amp;rsquo;t get these rights. Such rights include (but are not limited to):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The right to &lt;em&gt;distribute&lt;/em&gt; the software, even for free.&lt;/li&gt;
&lt;li&gt;The right to &lt;em&gt;sell&lt;/em&gt; the software.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;But then you might ask how download sites like Download.com can operate: If by default only the original author has the right to distribute the software they create, a download site would need to get special permission (i.e. a &lt;em&gt;license&lt;/em&gt;) to distribute most programs on their site, which would be time consuming (and therefore expensive).&lt;/p&gt;

&lt;p&gt;In reality, download sites generally rely on software authors to not &lt;em&gt;enforce&lt;/em&gt; their copyrights. Which brings us to another point:&lt;/p&gt;

&lt;h3&gt;Copyrights are useless unless they are enforced.&lt;/h3&gt;

&lt;p&gt;Enforcement takes the form of the copyright holder actively looking for &lt;em&gt;infringers&lt;/em&gt;: other people who are distributing or selling the software without permission.&lt;/p&gt;

&lt;p&gt;For example, the MPAA may issue a DMCA takedown request to a YouTube user who has (without permission) posted an episode of a TV show that MPAA owns. If the user does not comply with the takedown, the MPAA may sue the user for infringement.&lt;/p&gt;

&lt;h2&gt;Licenses&lt;/h2&gt;

&lt;h3&gt;A copyright holder may waive or share some rights by issuing a &lt;em&gt;license&lt;/em&gt;.&lt;/h3&gt;

&lt;p&gt;Licenses may be issued to individuals or companies. For example  a particular distributor may be granted the right to market and sell the software on behalf of the original developer.&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;For open source software, licenses are typically granted to the community as a whole (i.e. every recipient of the program). This is typically done by including a file called &lt;code&gt;LICENSE&lt;/code&gt; or &lt;code&gt;COPYING&lt;/code&gt; with the software. A license may also be found in the software&amp;rsquo;s &lt;code&gt;README&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can write your own custom license (if you feel comfortable writing in legalese). Or you can use one of the more common existing licenses from the community. (See &lt;a href=&quot;#common_licenses&quot;&gt;Common Licenses&lt;/a&gt; below for a list.)&lt;/p&gt;

&lt;h3&gt;Dual Licensing&lt;/h3&gt;

&lt;p&gt;Sometimes the same piece of software is offered under multiple licenses.&lt;/p&gt;

&lt;p&gt;For example the Qt GUI toolkit has been available under both the GPL license and (with payment) a commercial closed-source license for a long time. Since companies don&amp;rsquo;t like basing their own closed source software on GPL-licensed original software, this gives them an option to use a more corporate-friendly commercial license.&lt;/p&gt;

&lt;p&gt;When creating a new piece of software that is based on or uses dual-licensed software, you should document which license the original software is being used under.&lt;/p&gt;

&lt;p&gt;If you are the original author of a piece of software, you can issue a new version of the software under additional licenses.&lt;/p&gt;

&lt;h3&gt;Changing a Software&amp;rsquo;s License&lt;/h3&gt;

&lt;p&gt;Under rare circumstances, the license provided with software can change.&lt;/p&gt;

&lt;p&gt;As the copyright holder of a piece of software, you may decide to release a new version with a different set of licenses than prior versions. For example you could change the license offered from &lt;a href=&quot;#bsd&quot;&gt;BSD&lt;/a&gt; to &lt;a href=&quot;#gpl&quot;&gt;GPL&lt;/a&gt;, a rather radical change. Such a change would only be in effect for the newly released version - it would have no effect on older released versions.&lt;/p&gt;

&lt;p&gt;If you are not the copyright holder of a piece of software, you cannot change the license(s) under which it is offered.&lt;/p&gt;

&lt;p&gt;If there are contributors beyond the original author whose changes have been incorporated into the software, they become partial copyright holders in the software as well unless they explicitly waive their copyright interests via a Contributor Agreeement or similar document. In the event of multiple copyright holders, all holders must agree to any proposed changes in the set of licenses under which the software is offered. Since there may be a large number of contributors (and thus copyright holders), it may be impossible to get permission from everyone, thereby making a license change infeasible.&lt;/p&gt;

&lt;p&gt;Projects that are particularly aware of copyright concerns may require all contributors to sign a Contributor Agreement that either waives all copyright interests or explicitly assigns the copyright associated with all contributions to the original author.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h3&gt;No Warranty&lt;/h3&gt;

&lt;p&gt;All software licenses I have seen explicitly disclaim all warranties. Meaning that if the software harms someone, you can&amp;rsquo;t sue the developer for it. This is great for software developers but in my opinion bad for society.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;common_licenses&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Common Licenses&lt;/h3&gt;

&lt;p&gt;Here are the most common open source licenses, arranged generally from most permissive to most restrictive.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t care about the details and only want to know when to use which license, skip to the &lt;a href=&quot;#license_summary&quot;&gt;summary&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;mit&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Public Domain&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; &lt;small&gt;&amp;mdash; ultimately permissive&lt;/small&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Do whatever you want with this software.&lt;/li&gt;
&lt;li&gt;This software cannot ever be placed under copyright or any license.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a name=&quot;mit&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;MIT License &lt;small&gt;&amp;mdash; super permissive, simple&lt;/small&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Do whatever you want with this software.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a name=&quot;bsd&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;BSD License &lt;small&gt;&amp;mdash; permissive, simple&lt;/small&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;You can redistribute this software.&lt;/li&gt;
&lt;li&gt;(Other rights are not expressedly waived.)&lt;/li&gt;
&lt;li&gt;There are several &lt;a href=&quot;http://en.wikipedia.org/w/index.php?title=BSD_licenses&amp;amp;oldid=539421860&quot;&gt;variants&lt;/a&gt; of this license.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a name=&quot;apache&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Apache 2.0 License &lt;small&gt;&amp;mdash; permissive, complex&lt;/small&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;You can do anything normally restricted by copyright.&lt;/li&gt;
&lt;li&gt;You can do anything normally restricted by patent rights.&lt;/li&gt;
&lt;li&gt;Redistribution must be done under certain terms.&lt;/li&gt;
&lt;li&gt;Submissions by contributors automatically fall under
this license unless specified otherwise.&lt;/li&gt;
&lt;li&gt;You may NOT use trademarks related to this software
(except in a few special cases).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a name=&quot;lgpl&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;LGPL License 2.1 &lt;small&gt;&amp;mdash; restrictive, complex&lt;/small&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;You can redistribute this software.&lt;/li&gt;
&lt;li&gt;You can modify this software and distribute the derived work. However the derived work must also be LGPL-licensed.&lt;/li&gt;
&lt;li&gt;You can relicense a copy of this software under the GPL. (This is an irreversible action for works derived from the new copy.)&lt;/li&gt;
&lt;li&gt;If you create your own software that uses this LGPL-software, the license of your source code is unaffected. However the resulting &lt;em&gt;executable&lt;/em&gt; and (sometimes) the &lt;em&gt;object code&lt;/em&gt; must satisfy the following terms:

&lt;ul&gt;
&lt;li&gt;Modification of the executable and object code is permitted for personal use.&lt;/li&gt;
&lt;li&gt;Reverse engineering of the executable and object code is permitted.&lt;/li&gt;
&lt;li&gt;You must give notice that the executable and object code uses this software and that this software is licensed under the LGPL. You must also provide a copy of the LGPL license text.&lt;/li&gt;
&lt;li&gt;If the software displays copyright notices during its operation (such as in an About box), the LGPL copyright notice for this software must be included and a reference to the full LGPL license text must be provided.&lt;/li&gt;
&lt;li&gt;Either:

&lt;ul&gt;
&lt;li&gt;(1) Include the source code for this software (including any modifications you made to it) when distributing the executable and object code.&lt;/li&gt;
&lt;li&gt;(2) Require that the user of the executable or object code have this software installed locally already, and use shared library mechanisms to link the executable against the (unmodified) local copy of this software.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If distributing an executable, the nondistributed form of your software must include any data or utility programs necessary to compile the executable.&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a name=&quot;gpl&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;GPL License 2.0 &lt;small&gt;&amp;mdash; restrictive, complex, &amp;ldquo;viral&amp;rdquo;&lt;/small&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;You can redistribute the source code of this software.&lt;/li&gt;
&lt;li&gt;You can modify this software and distribute the derived work.  However the derived work must also be GPL-licensed.&lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;#fn:6&quot; rel=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;You can distribute this software or any software you create based on it, in executable or object code form, provided that you also distribute the corresponding source code (or provide a written offer to do so).&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;No License &lt;small&gt;&amp;mdash; ultimately restrictive&lt;/small&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;You cannot redistribute or sell this software.&lt;/li&gt;
&lt;li&gt;You cannot create new software that is based on this software (i.e. derivative works).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a name=&quot;license_summary&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Choosing a License&lt;/h3&gt;

&lt;p&gt;It is best to pick the license whose terms convey the message you want to send:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Public Domain&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Do anything you want with this software. It is free forever.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MIT&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Do anything you want with this software. (Although I might change my mind later.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BSD (4-clause)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Do anything you want with this software, although I want to be attributed (i.e. mentioned as the original author). But I don&amp;rsquo;t want my name used to promote other things.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Apache&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;You can do most things with this software.&lt;br/&gt;
(And my lawyers want a precise definition of what &amp;ldquo;most things&amp;rdquo; means.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LGPL&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;I want the source code for this software library (and any derived software) to be freely available forever. I also want to enforce that all improvements to this software library that are incorporated into other products be available for independent inspection.&lt;/li&gt;
&lt;li&gt;I don&amp;rsquo;t care if these extra terms made it burdensome for commercial entities to use my library, although I would like to make it possible for them to still use it if desired.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GPL&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;I want the source code for this software library and any external software that uses it to be freely available forever.&lt;/li&gt;
&lt;li&gt;I don&amp;rsquo;t care if this means that my software will never be incorporated into a commercial product.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Copyright Notice; No License&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t even think about incorporating this software into another product, or selling it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No Copyright Notice; No License&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;I don&amp;rsquo;t know about copyright or licenses. Ask me if you want to do something with my software.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Now that I&amp;rsquo;ve figured all of this out, it&amp;rsquo;s time to update the licenses I&amp;rsquo;m using for &lt;a href=&quot;https://github.com/davidfstr?tab=repositories&quot;&gt;my own open source projects&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;However if you &lt;em&gt;do&lt;/em&gt; include the magic words &lt;code&gt;Copyright (c) 2013 David Foster&lt;/code&gt; it is easier to demonstrate &lt;em&gt;willful&lt;/em&gt; infringement when you sue someone for infringing your copyright. Willful infringment entitles the copyright owner to higher &lt;em&gt;damages&lt;/em&gt; (i.e. payments from the infringer) than vanilla infringement.&lt;a href=&quot;#fnref:1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;If you sell any apps on the App Store, you signed an agreement giving Apple such marketing rights.&lt;a href=&quot;#fnref:2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:3&quot;&gt;
&lt;p&gt;For example my present company Splunk requires that all contributors to its open source projects sign a Contributor Agreement of this type.&lt;a href=&quot;#fnref:3&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:4&quot;&gt;
&lt;p&gt;Technically the state of being in the &amp;ldquo;public domain&amp;rdquo; is not a license. Any work explicitly released into the public domain is not subject to copyright law at all. In particular there is no copyright holder and can never be a copyright holder in the future.&lt;a href=&quot;#fnref:4&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:5&quot;&gt;
&lt;p&gt;At face value this doesn&amp;rsquo;t actually seem like a restriction. However the LGPL text cautions, &amp;ldquo;It may happen that this requirement contradicts the license restrictions of other proprietary libraries that do not normally accompany the operating system. Such a contradiction means you cannot use both them and the Library together in an executable that you distribute.&amp;rdquo;&lt;a href=&quot;#fnref:5&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:6&quot;&gt;
&lt;p&gt;The GPL is ambiguous with respect to whether a piece of software that you create based on the GPL-licensed software (including merely linking to it) should be considered a derivative work or not. If so, then the GPL is truly &amp;ldquo;viral&amp;rdquo;: any piece of code that interfaces with GPL-licensed software must also be licensed under the GPL. If not, the GPL still specifies unambiguously that programs based on GPL-licensed software must be distributed with all accompanying source code. Neither proposition is tolerable for most corporate software entities.&lt;a href=&quot;#fnref:6&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

</description>
    </item>
    
    
    <item>
      <title>Exploring Onionland: The Tor .onion Darknet</title>
      <link>http://dafoster.net/articles/2013/04/21/exploring-onionland-the-tor-onion-darknet/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Sun, 21 Apr 2013 00:00:00 -0700</pubDate>
      <guid>http://dafoster.net/articles/2013/04/21/exploring-onionland-the-tor-onion-darknet</guid>
      <description>&lt;p&gt;Today I decided to explore the realm of Tor Hidden Services, which can be identified via URLs that appear to be on an &lt;code&gt;.onion&lt;/code&gt; top-level domain.&lt;/p&gt;

&lt;p&gt;The first hurdle is getting to your first site, since all domains have gibberish-looking names:&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Core.onion&lt;/strong&gt; (&lt;a href=&quot;http://eqt5g4fuenphqinx.onion/&quot;&gt;eqt5g4fuenphqinx.onion&lt;/a&gt;)

&lt;ul&gt;
&lt;li&gt;The original starting point for many users since 2007.&lt;/li&gt;
&lt;li&gt;I began my exploration here.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Finding Things&lt;/h2&gt;

&lt;p&gt;The first thing you realize is that there are &lt;em&gt;no search engines&lt;/em&gt;.&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; Instead you have to resort to the primitive method of recursively following links from previous sites you found. Bookmarks are essential. It&amp;rsquo;s like 1995 all over again.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Directory service sites exist with the sole purpose of listing links to other sites:&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TorDir&lt;/strong&gt; (&lt;a href=&quot;http://dppmfxaacucguzpc.onion/&quot;&gt;dppmfxaacucguzpc.onion&lt;/a&gt;)

&lt;ul&gt;
&lt;li&gt;The original directory site (to my knowledge) since 2007.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Hidden Wiki&lt;/strong&gt; (&lt;a href=&quot;http://kpvz7ki2v5agwt35.onion/wiki/index.php/Main_Page&quot;&gt;kpvz7ki2v5agwt35.onion&lt;/a&gt;)

&lt;ul&gt;
&lt;li&gt;The original popular wiki, running the same Mediawiki software as Wikipedia.&lt;/li&gt;
&lt;li&gt;The main purpose seems to be acting as a directory, although there are a few other interesting articles as well. &lt;!-- http://kpvz7ki2v5agwt35.onion/wiki/index.php/The_Matrix --&gt;&lt;/li&gt;
&lt;li&gt;Sadly the moderators seem to be losing against spammers, who repeated change links on the home page to redirect through a certain &lt;code&gt;coinurl.com&lt;/code&gt; site. Thus it is necessary to go through &lt;a href=&quot;http://kpvz7ki2v5agwt35.onion/wiki/index.php?title=Main_Page&amp;amp;oldid=52408&quot;&gt;older revisions of the main page&lt;/a&gt; to get anything useful.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;And also:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TorList&lt;/strong&gt; (&lt;a href=&quot;http://torlinkbgs6aabns.onion/&quot;&gt;torlinkbgs6aabns.onion&lt;/a&gt;)

&lt;ul&gt;
&lt;li&gt;A newer, more limited, and less organized directory. Moderated.&lt;/li&gt;
&lt;li&gt;Useful because all its links fit on a single page, so it is a decent starting point.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Edit:&lt;/strong&gt; &lt;em&gt;Link updated. Was previously pointing to a non-authoritative clone. Possibly a spammer. In case you&amp;rsquo;d like to compare, here is the &lt;a href=&quot;http://torlinksysgthcbz.onion/&quot; rel=&quot;nofollow&quot;&gt;old link&lt;/a&gt;.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Parallel Worlds&lt;/h2&gt;

&lt;p&gt;For most popular websites on the public internet, there is a clone in Onionland.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Twitter -&gt; &lt;strong&gt;TorStatusNet&lt;/strong&gt; (&lt;a href=&quot;http://lotjbov3gzzf23hc.onion/&quot;&gt;lotjbov3gzzf23hc.onion&lt;/a&gt;)

&lt;ul&gt;
&lt;li&gt;Microblogging.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Gmail / Hotmail -&gt; &lt;strong&gt;Tor Mail&lt;/strong&gt; (&lt;a href=&quot;http://jhiwjjlqpyawmpjx.onion/&quot;&gt;jhiwjjlqpyawmpjx.onion&lt;/a&gt;)

&lt;ul&gt;
&lt;li&gt;Free email service.&lt;/li&gt;
&lt;li&gt;Can communicate with regular email addresses too.&lt;/li&gt;
&lt;li&gt;Although rumored to be unreliable. &lt;!-- http://utup22qsb6ebeejs.onion/?p=149 --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;4chan -&gt; &lt;strong&gt;TorChan&lt;/strong&gt; (&lt;a href=&quot;http://zw3crggtadila2sg.onion/imageboard/&quot;&gt;zw3crggtadila2sg.onion&lt;/a&gt;)

&lt;ul&gt;
&lt;li&gt;Imageboard. NSFW.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I can only assume human wants must be fairly consistent.&lt;/p&gt;

&lt;h2&gt;Commerce&lt;/h2&gt;

&lt;p&gt;The universal currency for making transactions is &lt;a href=&quot;http://bitcoin.org/en/&quot;&gt;BitCoin&lt;/a&gt;, probably because it is far less traceable than standard currency.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s really surprising and a bit disturbing what can be purchased: drugs, weapons, assassinations&amp;nbsp;(!!!), among other things. &lt;!-- (No links for you!) --&gt;&lt;/p&gt;

&lt;h2&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;It feels really weird being in a part of the internet that is completely unreachable from Google (or any normal search engine). Much like visiting another country the laws, norms, and aesthetics are different.&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; It is an interesting place to visit, but perhaps not the most desirable place to live.&lt;/p&gt;

&lt;h3&gt;Related Links&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.reddit.com/r/onions&quot;&gt;/r/onions&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Reddit&amp;rsquo;s collection of onion links.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;Since domain names basically consist of gibberish, it is not practical to verify whether you are at the authentic URL for a domain, since it is hard to remember and recognize the domain name. Thus it relatively easy to get redirected to a spoofed version of a website and not be aware of it. Certain sites like &lt;strong&gt;Black Market&lt;/strong&gt;, which I can only assume have been spoofed a lot in the past, take special measures such as putting the (gibberish) domain name in the site logo and instructing visitors on the main home page to check the domain name explicitly. Hardly a reliable solution.&lt;a href=&quot;#fnref:1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;Okay, there are are few search engines such as &lt;strong&gt;DeepSearch&lt;/strong&gt; (&lt;a href=&quot;http://hpuuigeld2cz2fd3.onion/&quot;&gt;hpuuigeld2cz2fd3.onion&lt;/a&gt;) and &lt;strong&gt;The Abyss&lt;/strong&gt; (&lt;a href=&quot;http://nstmo7lvh4l32epo.onion/&quot;&gt;nstmo7lvh4l32epo.onion&lt;/a&gt;), but they&amp;rsquo;re about as effective as WebCrawler was back in the day.&lt;a href=&quot;#fnref:2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:3&quot;&gt;
&lt;p&gt;If your corporate intranet or wiki has no decent search facility (likely), it&amp;rsquo;s the same feeling of not being able to find anything. The only company I&amp;rsquo;ve worked for that had &lt;em&gt;good&lt;/em&gt; internal search was Google (circa 2008). Microsoft sure didn&amp;rsquo;t (circa 2011), although they were using some third-party engine internally, not Bing.&lt;a href=&quot;#fnref:3&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:4&quot;&gt;
&lt;p&gt;The only directory services site on the public web I still know of is the &lt;a href=&quot;http://www.dmoz.org&quot;&gt;Open Directory Project&lt;/a&gt;. It&amp;rsquo;s been a long time since I&amp;rsquo;ve used them.&lt;a href=&quot;#fnref:4&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:5&quot;&gt;
&lt;p&gt;Instead of travelling to another country physically, you can try browsing the internet in a different language, which is similarly partitioned from the English internet. For example Germany&amp;rsquo;s Facebook is &lt;a href=&quot;http://www.studivz.net/&quot;&gt;studiVZ&lt;/a&gt;. China&amp;rsquo;s Google is &lt;a href=&quot;http://www.baidu.com&quot;&gt;Baidu&lt;/a&gt;. Naturally you need to be able to read the language in question to try this exercise seriously.&lt;a href=&quot;#fnref:5&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

</description>
    </item>
    
    
    <item>
      <title>Making an Existing Python Program Unicode Aware</title>
      <link>http://dafoster.net/articles/2013/04/09/making-an-existing-python-program-unicode-aware/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Tue, 09 Apr 2013 00:00:00 -0700</pubDate>
      <guid>http://dafoster.net/articles/2013/04/09/making-an-existing-python-program-unicode-aware</guid>
      <description>&lt;p&gt;Last week I decided to update one of my larger Python 2.7 projects to support Unicode fully
and to run under Python 3.&lt;/p&gt;

&lt;p&gt;Here are the steps that I took and some gotchas I ran into along the way.&lt;/p&gt;

&lt;h2&gt;General Strategy&lt;/h2&gt;

&lt;p&gt;Create and fully automate the unit test suite:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is important to detect any unexpected breakage from the Unicode-related changes you&amp;rsquo;ll be making soon.&lt;/li&gt;
&lt;li&gt;Make sure your code coverage is good since tests can&amp;rsquo;t protect you from mistakes introduced in uncovered code.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Identify all boundaries where data is being exchanged between the program and the outside environment. In my case:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Direct I/O (i.e. &lt;code&gt;read&lt;/code&gt; and &lt;code&gt;write&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Filesystem access (i.e. &lt;code&gt;open&lt;/code&gt; and file paths)&lt;/li&gt;
&lt;li&gt;Process manipulation (via the &lt;code&gt;subprocess&lt;/code&gt; module)&lt;/li&gt;
&lt;li&gt;Command-line arguments (via &lt;code&gt;sys.argv&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Time access (via the &lt;code&gt;time&lt;/code&gt; module)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;At boundaries:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reads should decode bytestrings to unicode using the proper encoding. You may need to do research to determine what the correct encoding is or how to determine the correct encoding at runtime.

&lt;ul&gt;
&lt;li&gt;Since my program did a lot of direct I/O on classic Mac OS data structures, the correct encoding was typically MacRoman.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sys.getfilesystemencoding()&lt;/code&gt; is sometimes appropriate. Be sure to test on Windows, where this value is typically not UTF-8.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Writes should encode unicode (or ASCII bytestring literals) to bytestrings using the proper encoding.&lt;/li&gt;
&lt;li&gt;Ensure files and streams explicitly use either binary mode (i.e. &lt;code&gt;rb&lt;/code&gt; or &lt;code&gt;wb&lt;/code&gt;) or text mode (i.e. &lt;code&gt;rt&lt;/code&gt; or &lt;code&gt;wt&lt;/code&gt;).

&lt;ul&gt;
&lt;li&gt;UsuBytesIOally you want binary mode.&lt;/li&gt;
&lt;li&gt;Text mode is required for certain cases, such as the output of the &lt;code&gt;json&lt;/code&gt; module. Even then, it&amp;rsquo;s a good idea to restrict text-based output to the ASCII character set since the native text encoding may not support the full Unicode set, particularly on Windows.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Finally:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Run the &lt;code&gt;2to3&lt;/code&gt; converter on your program so that it can be run by Python 3.&lt;/li&gt;
&lt;li&gt;Run your new Python 3 source code in a Python 3 interpreter, perhaps inside a fresh Linux VM.&lt;/li&gt;
&lt;li&gt;Run your test suite under the Python 3 interpreter. It should find any Unicode mistakes that still need to be fixed.&lt;/li&gt;
&lt;li&gt;You will probably need to repeat this convert-test-fix cycle a couple of times.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Special Cases&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Most uses of &lt;code&gt;StringIO&lt;/code&gt; need to be migrated to &lt;code&gt;BytesIO&lt;/code&gt;, when used as a byte buffer. If used as a string buffer, the &lt;code&gt;StringIO&lt;/code&gt; uses need to be left at &lt;code&gt;StringIO&lt;/code&gt;.

&lt;ul&gt;
&lt;li&gt;Here&amp;rsquo;s the shim I used to support &lt;code&gt;BytesIO&lt;/code&gt; and &lt;code&gt;StringIO&lt;/code&gt; in both Python 2 and 3. I put it in a utility module and the rest of the program imports the shims instead of using the standard library.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;pre&gt;
# BytesIO presents a stream interface to an in-memory bytestring.
# 
# This is equivalent to StringIO in Python 2 and to BytesIO in Python 3.
try:
    from io import BytesIO              # Python 3
except ImportError:
    from StringIO import StringIO as BytesIO

# StringIO presents a stream interface to an in-memory string
# (which is a bytestring in Python 2 and a unicode string in Python 3).
# 
# This is equivalent to StringIO in both Python 2 and 3.
try:
    from StringIO import StringIO
except ImportError:
    from io import StringIO             # Python 3
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;When writing to a binary stream, replace uses of &lt;code&gt;output.write(chr(byte_ordinal))&lt;/code&gt; with &lt;code&gt;output.write(bchr(byte_ordinal))&lt;/code&gt; and use the following shim for &lt;code&gt;bchr&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;


&lt;pre&gt;
# bchr() converts the specified byte integer value to a single character
# bytestring.
# 
# This is equivalent to chr() in Python 2 but requires special handling in
# Python 3.
if bytes == str:
    def bchr(byte_ordinal):
        return chr(byte_ordinal)
else:
    def bchr(byte_ordinal):
        return bytes([byte_ordinal])    # Python 3
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;Beware of comparisons with &lt;code&gt;''&lt;/code&gt;. Some of them probably need to be converted to comparisons with &lt;code&gt;b''&lt;/code&gt;. For example, I had to adjust my &lt;code&gt;at_eof&lt;/code&gt; utility function:&lt;/li&gt;
&lt;/ul&gt;


&lt;pre&gt;
def at_eof(input):
    &quot;&quot;&quot;
    Returns whether the specified input stream is at EOF.
    &quot;&quot;&quot;
    with save_stream_position(input):
        at_eof = input.read(1) == b''
    return at_eof
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;If your program uses human-readable ASCII bytestring literals, such as FourCC codes, make sure they are marked with the &lt;code&gt;b&lt;/code&gt; prefix appropriately.&lt;/li&gt;
&lt;/ul&gt;


&lt;pre&gt;
if type_code == b'APPL':
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;Iteration over bytestrings works differently in Python 2 vs Python 3.

&lt;ul&gt;
&lt;li&gt;The code &lt;code&gt;for c in data:&lt;/code&gt; will give back single-character bytestrings in Python 2 but byte ordinals in Python 3.&lt;/li&gt;
&lt;li&gt;Here&amp;rsquo;s my shim to let &lt;code&gt;for b in iterord(data):&lt;/code&gt; always iterate over byte ordinals:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;pre&gt;
# iterord() iterates over the integer values of the bytes in the specified
# bytestring.
if bytes == str:
    def iterord(bytes_value):           # Python 2
        for b in bytes_value:
            yield ord(b)
else:
    def iterord(bytes_value):           # Python 3
        return bytes_value
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;time.strftime&lt;/code&gt; returns a bytestring in Python 2 and a Unicode string in Python 3. Usually you want a Unicode string. I didn&amp;rsquo;t create a shim for this since I only had one use of &lt;code&gt;strftime&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;pre&gt;
now_string = time.strftime('%b %d %H:%M', time.localtime(now))
if not isinstance(now_string, unicode):
    now_string = now_string.decode('ascii')
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Regular expressions that are intended to apply to bytestrings instead of Unicode strings may need updating.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For example the pattern &lt;code&gt;re.compile(r'^Volume name is &quot;(.*)&quot;$')&lt;/code&gt; which is designed to be applied to a MacRoman-encoded bytestring would need to be updated to read &lt;code&gt;re.compile(br'^Volume name is &quot;(.*)&quot;$')&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don&amp;rsquo;t forget to update your documentation to specify where Unicode (or ASCII bytestring literals) are expected.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    
    
    <item>
      <title>Beautiful Code: SQLite</title>
      <link>http://dafoster.net/articles/2013/04/07/beautiful-code-sqlite/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Sun, 07 Apr 2013 00:00:00 -0700</pubDate>
      <guid>http://dafoster.net/articles/2013/04/07/beautiful-code-sqlite</guid>
      <description>&lt;p&gt;It has been said that you can learn a lot from reading other people&amp;rsquo;s high-quality software. So I gave it a try this weekend by reading the SQLite source.&lt;/p&gt;

&lt;p&gt;SQLite is a lightweight embedded database that does not require a standalone server. It is designed to be reliable, highly portable, and require minimal administration.&lt;/p&gt;

&lt;p&gt;SQLite has some of the &lt;a href=&quot;https://www.sqlite.org/testing.html&quot;&gt;most rigorous testing methodology&lt;/a&gt; I have seen in an open source project. Thus its true defect count is likely to be extremely low, making it high quality.&lt;/p&gt;

&lt;p&gt;Such a high quality product probably contains useful patterns and techniques, some of which I could reuse in my own programs. So I decided to dive into the SQLite source and see what gems I could pull out. Here are my notes:&lt;/p&gt;

&lt;h2&gt;Architecture &amp;amp; Design&lt;/h2&gt;

&lt;p&gt;I started by reading the high-level design documentation. SQLite has exceptionally good documentation of this type.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.sqlite.org/docs.html&quot;&gt;Documentation Index&lt;/a&gt; - &lt;em&gt;Root of all documentation.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.sqlite.org/arch.html&quot;&gt;Architecture Documentation&lt;/a&gt; - &lt;em&gt;Excellent overview of the architecture.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Query Planner Documentation - &lt;em&gt;Describes how prepared statements are executed.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sqlite.org/vdbe.html&quot;&gt;The Virtual Database Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sqlite.org/opcode.html&quot;&gt;Virtual Machine Opcodes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Internal Tools of Note&lt;/h3&gt;

&lt;h4&gt;&lt;a href=&quot;http://www.fossil-scm.org/index.html/doc/trunk/www/index.wiki&quot;&gt;Fossil&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Distributed version control system used by SQLite. I&amp;rsquo;ve never heard of this. Beyond version control also provides bug tracking, a wiki, and a blog.&lt;/p&gt;

&lt;h4&gt;&lt;a href=&quot;http://www.sqlite.org/src/doc/trunk/doc/lemon.html&quot;&gt;Lemon&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;A custom parser generator used by SQLite. Alternative to the old bison/yacc combination which has some improvements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Syntax that is less error-prone.&lt;/li&gt;
&lt;li&gt;Fast. Reentrant. Thread-safe.&lt;/li&gt;
&lt;li&gt;Easier to write parsers that avoid leaking memory upon error conditions.

&lt;ul&gt;
&lt;li&gt;Important since SQLite is serious about handling out of memory conditions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;&lt;a href=&quot;http://www.sqlite.org/vfs.html&quot;&gt;VFS&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;OS abstraction layer. Despite the acronym (Virtual Filesystem), it is more than just filesystem manipulation routines.&lt;/p&gt;

&lt;h2&gt;Implementation Notes&lt;/h2&gt;

&lt;h3&gt;table.c (sqlite3_get_table)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This is the main entry point into the SQLite API.
It executes a SQL statement and returns the result.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;First impression is that most methods have a lot of malloc-failed handling. And indeed if you read the testing procedures, they involve causing random malloc errors throughout the code, so there has to be handling for such errors.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hungarion notation is used as well. Ick. But at least it is consistent.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;z = string&lt;/li&gt;
&lt;li&gt;a = array&lt;/li&gt;
&lt;li&gt;p = object pointer&lt;/li&gt;
&lt;li&gt;n = int&lt;/li&gt;
&lt;li&gt;x = function pointer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;/* Assume 32-bit assignment is atomic */&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Interesting that such a property would be &lt;em&gt;consciously&lt;/em&gt; relied on.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;legacy.c (sqlite3_exec)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This is the legacy entry point into the SQLite API.
It still exists and is actually used internally by the currently
recommended API entry point (&lt;code&gt;sqlite3_get_table&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are some odd syntactic conventions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Multi-line comments use double-stars to prefix middle lines.&lt;/li&gt;
&lt;li&gt;No space before closing &lt;code&gt;{&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Spaces inside outer parentheses for most statements
(&lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;assert&lt;/code&gt;) but not all (&lt;code&gt;for&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It appears that functions that begin with &lt;code&gt;sqlite3_&lt;/code&gt; are public,
whereas functions starting with &lt;code&gt;sqlite3&lt;/code&gt; (no underscore) are private.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;vdbeapi.c (sqlite3_step)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This function executes one or more instructions from the instruction list
inside of a prepared SQL statement. The instruction is executed inside
of the SQLite virtual database engine (VDBE), which is a virtual machine.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It has a lot of support code for EXPLAIN and profiling callbacks.&lt;/li&gt;
&lt;li&gt;The meat of instruction execution is done by &lt;code&gt;sqlite3VdbeExec&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Contains own mutex implementation. (&lt;code&gt;sqlite3_mutex_enter&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deals with a somewhat crazy circumstance: If the database schema changes
in the middle of executing a (prepared) SQL statement, the statement is
reprepared and rerun automatically.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generally there is good commenting for weird and backward-compatibility
behaviors.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Practically every function can fail. They all return an integer error code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Some functions that operate on an in-out data structure will
additionally store an error code (and message) in that structure.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;vdbe.c (sqlite3VdbeExec)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;This function executes as many instructions as possible from a prepared
SQL statement. It contains the monsterous switch statement that
enumerates every possible opcode that can be executed.

&lt;ul&gt;
&lt;li&gt;Related reference documentation: &lt;a href=&quot;http://www.sqlite.org/opcode.html&quot;&gt;Virtual Machine Opcodes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Related guide documentation: &lt;a href=&quot;http://www.sqlite.org/vdbe.html&quot;&gt;The Virtual Database Engine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Future&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;If I were to continue reading into the implementation,
I think the opcodes that manipulate B-trees would likely be
the most interesting ones to look at.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;This is a very high-quality C library.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Internal commenting is good.&lt;/li&gt;
&lt;li&gt;Consistent syntax is used, despite being a bit odd IMHO.&lt;/li&gt;
&lt;li&gt;The guide-level documentation is wonderful.&lt;/li&gt;
&lt;li&gt;Error handling is air-tight and enforced by crazy amounts of test code.&lt;/li&gt;
&lt;li&gt;The architecture provides good separation of roles and is easy to understand.&lt;/li&gt;
&lt;li&gt;Once again, the documentation is excellent.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;And its design requirements show through in the implementation:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reliable&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There is more than 1000 times as much test code as there is product code.&lt;/li&gt;
&lt;li&gt;100% branch coverage. That&amp;rsquo;s insanely good.&lt;/li&gt;
&lt;li&gt;Very crazy error classes such as out of memory errors, crashes, integer overflow are all considered and tested for.

&lt;ul&gt;
&lt;li&gt;Malloc checks are prevalent and handled.&lt;/li&gt;
&lt;li&gt;Transactions, journaling, and related testing deal with crashes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;Portable&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The chosen language is C, which is highly portable when written in the appropriate style.&lt;/li&gt;
&lt;li&gt;The so-called VFS layer provides an OS abstraction. Thus porting to an OS mainly just involves writing a new implementation of this abstraction.&lt;/li&gt;
&lt;li&gt;All C files are combined into one giant C file before being sent to the compiler, which provides for better compile-time optimizations for dumber C compilers, which may occur on embedded systems.&lt;/li&gt;
&lt;li&gt;The database format does not depend on endianness or native data type sizes, making it suitable for cross-platform use.&lt;/li&gt;
&lt;li&gt;Very low memory configurations are available, making SQLite suitable for use on embedded devices such as cellphones.&lt;/li&gt;
&lt;li&gt;The code is in the public domain, which removes any licensing barriers.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;Simple&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SQLite is embedded into the program that uses it, requiring no separate server. And no administration for such a server.&lt;/li&gt;
&lt;li&gt;Minimal schema is imposed by SQLite, distinguishing only between integers, reals, text, and blobs at a low level. And even so, a column&amp;rsquo;s type is advisory only - you can store a value of any type in any column (except an &lt;code&gt;INTEGER PRIMARY KEY&lt;/code&gt; column).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Of course being simple sacrifices certain other properties such as high concurrency and the ability to perform fine-grained access control (which requires administrability).&lt;/p&gt;
</description>
    </item>
    
    
    <item>
      <title>Migrating from BBEdit to Sublime Text</title>
      <link>http://dafoster.net/articles/2013/03/22/migrating-from-bbedit-to-sublime-text/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Fri, 22 Mar 2013 00:00:00 -0700</pubDate>
      <guid>http://dafoster.net/articles/2013/03/22/migrating-from-bbedit-to-sublime-text</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been using &lt;a href=&quot;http://www.barebones.com/products/bbedit/index.html&quot;&gt;BBEdit&lt;/a&gt; as my primary text editor on the Mac for over 10 years. It is an extremely capable and mature editor with just about all the bells and whistles you can imagine. However the use of Sublime Text has been spreading throughout my workplace at Splunk&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; so I decided I&amp;rsquo;d give it a try.&lt;/p&gt;

&lt;p&gt;My initial impression was &amp;ldquo;BBEdit can do everything that Sublime can, what&amp;rsquo;s the deal?&amp;rdquo; But after using Sublime full-time for about a week, I&amp;rsquo;m starting to come around to it.&lt;/p&gt;

&lt;p&gt;Although it is true that both have comparable feature sets, Sublime&amp;rsquo;s implementation feels more polished - not just eyecandy, but actually better usability.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Incremental find

&lt;ul&gt;
&lt;li&gt;As you start typing the substring you want to find, it automatically starts searching within the current document. Frequently you don&amp;rsquo;t have to finish typing the substring in order to get the result you want.&lt;/li&gt;
&lt;li&gt;This saves a surprising amount of time compared to BBEdit where you have to finish providing a full substring (that you think is long enough) before kicking off the search.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Edit:&lt;/strong&gt; &lt;em&gt;This is actually available in BBEdit under the &amp;ldquo;Live Search&amp;rdquo; command, but this is not part of the default Find experience and not advertised.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;View a file without &amp;ldquo;opening&amp;rdquo; it (as a persistent tab)

&lt;ul&gt;
&lt;li&gt;Sublime keeps files of current interest available as tabs in the main window. If you just click on a file, it is shown in the editor but no tab is created by default. If you decide this is an important file, you can double-click on the file name to create an actual tab for it, which makes the file easy to return to.

&lt;ul&gt;
&lt;li&gt;Most &amp;ldquo;Goto X&amp;rdquo; actions in Sublime both show a file and create an actual tab for it, which usually is what you want.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If you click on any file at all in BBEdit, it is &amp;ldquo;opened&amp;rdquo; and added to the &amp;ldquo;Currently Open Documents&amp;rdquo; section, which is analogous to Sublime&amp;rsquo;s set of open tabs. This can result in the &amp;ldquo;Currently Open Documents&amp;rdquo; section getting rather cluttered when rummaging around for a particular document, making it less useful.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Minidocument view on the right side of an open file.

&lt;ul&gt;
&lt;li&gt;This makes it easier to get a bird&amp;rsquo;s eye view of where you are in a long function or file.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Additionally, Sublime&amp;rsquo;s marketing has some a much better job of exposing advanced features that turn out to be useful in daily use.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Goto Anything&amp;rdquo;

&lt;ul&gt;
&lt;li&gt;BBEdit has similar &amp;ldquo;Open File by Name&amp;rdquo;, but it&amp;rsquo;s slower, doesn&amp;rsquo;t have as expressive syntax, and isn&amp;rsquo;t incremental.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Open Folder&amp;rdquo;

&lt;ul&gt;
&lt;li&gt;This is equivalent to a BBEdit project.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Plugins!

&lt;ul&gt;
&lt;li&gt;This is barely advertised on the BBEdit side but hugely promoted on the Sublime side. Thus lots of people are writing (publicly available) plugins for Sublime but not so many for BBEdit.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Some features in Sublime are named more obviously:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Convert Indentation to Spaces. Convert Indentation to Tabs.

&lt;ul&gt;
&lt;li&gt;BBEdit calls these operations &amp;ldquo;Detab&amp;rdquo; and &amp;ldquo;Entab&amp;rdquo; respectively.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Some features in Sublime are easier to access:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Change the displayed tab width.

&lt;ul&gt;
&lt;li&gt;To change this for a single file in BBEdit, you have to go to &amp;ldquo;Show Fonts&amp;rdquo;, which I find completely nonintuitive.&lt;/li&gt;
&lt;li&gt;BBEdit also allows you to change the default tab spacing &lt;em&gt;per source language&lt;/em&gt; in its preferences, which makes sense given that different languages have different conventions.&lt;/li&gt;
&lt;li&gt;However BBEdit does not permit you to change the tab width on a per project/folder basis, which is usually what you want when working on someone else&amp;rsquo;s open source project.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Access the function list. (&amp;ldquo;Goto Symbol&amp;hellip;&amp;rdquo;)

&lt;ul&gt;
&lt;li&gt;This can be done in Sublime entirely through the keyboard.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Sublime also has a few features lacking in BBEdit:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cross-platform support

&lt;ul&gt;
&lt;li&gt;This is huge when working in a mixed OS environment. You can use the same editor everywhere.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;BBEdit still is better in a few areas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Multi-file search and replace can be done without confirming (or saving) each modified file.&lt;/li&gt;
&lt;li&gt;Robust on slow filesystems, particularly network filesystems.

&lt;ul&gt;
&lt;li&gt;Sublime (2.0.1) acts very poorly: times out on directory listings, silently fails searches in &amp;ldquo;Goto Anything&amp;rdquo;, and probably has other issues.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Can edit preferences in a GUI without mucking about in text files.&lt;/li&gt;
&lt;li&gt;Can quickly split a single file vertically to edit distant sections simultaneously.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Zap Gremlins&amp;hellip;&amp;rdquo;

&lt;ul&gt;
&lt;li&gt;Deletes or replaces ASCII control characters and other nasties. Very useful for text pasted from web browsers, Word, or other less-than-pure sources of text.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Process Duplicate Lines&amp;hellip;&amp;rdquo;

&lt;ul&gt;
&lt;li&gt;Eliminate duplicate lines in a file. This is often useful after performing a series of text transformations.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Process Lines Containing&amp;hellip;&amp;rdquo;

&lt;ul&gt;
&lt;li&gt;Delete (or preserve) all lines containing a subexpression. Exactly like the &lt;code&gt;grep&lt;/code&gt; command-line tool.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Can edit files on an FTP/SFTP server directly.&lt;/li&gt;
&lt;li&gt;Customer support I&amp;rsquo;ve heard is top-notch.&lt;/li&gt;
&lt;li&gt;It can print.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I think I&amp;rsquo;m going to continue using Sublime Text. Featurewise it&amp;rsquo;s about the same as BBEdit, but the cross-platform support&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, active plugin community, and general polish &lt;!-- &amp; attention to usability --&gt; are winning me over.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;May 2013 Update:&lt;/strong&gt; I have now switched to Sublime for my daily programming tasks. Its superior &amp;ldquo;Goto Anything&amp;rdquo; functionality is a killer feature for navigating around large projects. And its cross-platform nature is killer when operating in a mixed OS environment. Occasionally I still need to pull out BBEdit to do a large multi-file search &amp;amp; replace, but otherwise I don&amp;rsquo;t use it that frequently.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;Splunk makes tools for analyzing large time-series datasets, such as log files. For details see the 3 minute &lt;a href=&quot;http://www.splunk.com/view/SP-CAAAHG6&quot;&gt;Splunk Product Overview&lt;/a&gt;. I work on the Developer Platform, making it easy for other developers to build neat things on top of the Splunk core.&lt;a href=&quot;#fnref:1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;It is extremely useful to be able to use the same full-featured text editor on any platform I use. I currently maintain a few open source projects that require testing, debugging, and development on multiple platforms (notably the &lt;a href=&quot;/projects/rdiscount/&quot;&gt;RDiscount&lt;/a&gt; Markdown processor) and it&amp;rsquo;s nice being able to use the same editor everywhere.&lt;a href=&quot;#fnref:2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

</description>
    </item>
    
    
    <item>
      <title>Introducing p4status: A status command for Perforce</title>
      <link>http://dafoster.net/articles/2013/03/16/introducing-p4status-a-status-command-for-perforce/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Sat, 16 Mar 2013 00:00:00 -0700</pubDate>
      <guid>http://dafoster.net/articles/2013/03/16/introducing-p4status-a-status-command-for-perforce</guid>
      <description>&lt;p&gt;&lt;strong&gt;p4status&lt;/strong&gt; works like &lt;code&gt;git status&lt;/code&gt; (or &lt;code&gt;svn status&lt;/code&gt;), but works in Perforce.&lt;/p&gt;

&lt;p&gt;It will list changelist files and locally modified files that haven&amp;rsquo;t been added to any changelist (including unadded files) in a readable format.&lt;/p&gt;

&lt;div style=&quot;padding: .8em 1em .8em; margin-bottom: 1em; border: 1px solid #94da3a;&quot;&gt;
    &lt;p style=&quot;font-weight: bold; color: #487858;&quot;&gt;
        Note
    &lt;/p&gt;
    &lt;p style=&quot;margin-bottom: 0em;&quot;&gt;
        The 2012 version of Perforce has an official
        &lt;b&gt;p4 status&lt;/b&gt; command. However this command is only available if 
        your corporate Perforce server has been upgraded to 2012. If your 
        company, like mine, has not upgraded their server, this script will 
        make your life easier.
    &lt;/p&gt;
&lt;/div&gt;


&lt;h3&gt;Example&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[dfoster ~/dev/p4/mybranch/path/to/myproject]$ p4status
# On changelist 154055
# 
# Changes to be committed in changelist default:
#   (use &quot;p4 revert &amp;lt;file&amp;gt;...&quot; to discard changes in working directory)
# 
#       deleted:    server/apps/setupfx/splunkd/default/extract.conf
# 
# Changes to be committed in changelist 154076:
#   (use &quot;p4 revert &amp;lt;file&amp;gt;...&quot; to discard changes in working directory)
# 
#       new file:   server/apps/setupfx/splunkd/default/inputs-NEW.conf
#       modified:   server/apps/setupfx/splunkd/default/inputs.conf
# 
# Changes not staged for commit:
#   (use &quot;p4 add/edit/delete &amp;lt;file&amp;gt;...&quot; to update what will be committed)
#   (use &quot;p4 sync -f &amp;lt;file&amp;gt;...&quot; to discard changes in working directory)
# 
#       new file:   server/apps/setupfx/splunkd/default/inputs-NEW2.conf
# 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Installation&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Download to your local &lt;code&gt;bin&lt;/code&gt; directory:
&lt;a href=&quot;https://github.com/davidfstr/dotfiles/blob/master/bin/p4status&quot;&gt;https://github.com/davidfstr/dotfiles/blob/master/bin/p4status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mark as executable with &lt;code&gt;chmod a+x p4status&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Usage&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cd&lt;/code&gt; to the primary directory that you&amp;rsquo;ll be working under.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;p4status&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Limitations&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Only detects unstaged files under the directory in which the command is run. Therefore it is best to reserve a terminal window that is &lt;code&gt;cd&lt;/code&gt;-ed to the correct place where this command can be run safely.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This command is too slow to run from the root of very large branches.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Alternatives&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use the excellent Git-to-Perforce bridge, &lt;a href=&quot;http://git-scm.com/docs/git-p4&quot;&gt;git-p4&lt;/a&gt;.

&lt;ul&gt;
&lt;li&gt;This allows you to work with your Perforce repository as if it were a Git repository. And you can use Git&amp;rsquo;s very fast &lt;code&gt;git status&lt;/code&gt; command.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Convince your Perforce server administrator to upgrade to the 2012 version. This may take some time, depending on the size of your company.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;&lt;em&gt;Related Projects&lt;/em&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/davidfstr/dotfiles&quot;&gt;dotfiles&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;My command-line shortcuts, including several for working with Git, particularly in an OS X environment.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    
    
    <item>
      <title>Killer apps for software platforms</title>
      <link>http://dafoster.net/articles/2013/03/10/killer-apps-for-software-platforms/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Sun, 10 Mar 2013 00:00:00 -0800</pubDate>
      <guid>http://dafoster.net/articles/2013/03/10/killer-apps-for-software-platforms</guid>
      <description>&lt;p&gt;A &lt;em&gt;killer app&lt;/em&gt; is any product that is so desirable that it fuels the sale/adoption of a larger technology that the product depends on.&lt;/p&gt;

&lt;p&gt;The gaming industry has been aware of the power of killer apps for a while, and often seeks to create launch titles for their new gaming systems that are killer apps. Microsoft, for example, deliberately created the first Halo game at same time as their Xbox console. And Nintendo has repeatedly introduced new Mario titles with its new consoles.&lt;/p&gt;

&lt;!-- Similarly, some of the classic examples of killer apps were the first entrants in new software categories: word processors (WordStar) and spreadsheets (VisiCalc and Lotus 1-2-3). --&gt;


&lt;p&gt;However what may not be so obvious is that killer apps exist for learning new software platforms as well, such as for APIs, SDKs, and programming languages.&lt;/p&gt;

&lt;p&gt;Learning a new platform (along with the associated tools and ecosystem) takes a large investment of &lt;em&gt;time&lt;/em&gt;, and so there is a similar barrier to adoption as, say, the monetary cost of buying a new game console.&lt;/p&gt;

&lt;p&gt;I think the platform-builders in the software industry could learn from the gaming industry and strategically introduce killer apps alongside new platform offerings.  I can think of no prior case where this was done deliberately (see the Appendix below), so I think our industry (i.e. software) is really missing out.&lt;/p&gt;

&lt;h3&gt;Appendix&lt;/h3&gt;

&lt;h4&gt;Examples for Programming Languages&lt;/h4&gt;

&lt;p&gt;Killer apps for languages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ruby on Rails -&gt; &lt;strong&gt;Ruby&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Django -&gt; &lt;strong&gt;Python&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Emacs -&gt; &lt;strong&gt;Lisp&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Killer ecosystems for languages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;iPhone -&gt; &lt;strong&gt;Objective-C&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Android -&gt; &lt;strong&gt;Java&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;embedded scripting in games&lt;/em&gt; -&gt; &lt;strong&gt;Lua&lt;/strong&gt;&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Killer features for languages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;interface with OS natively&lt;/em&gt; -&gt; &lt;strong&gt;C&lt;/strong&gt;, &lt;strong&gt;Objective-C&lt;/strong&gt; (OS X)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;garbage collection&lt;/em&gt; -&gt; &lt;strong&gt;Java&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;hack together a deployable dynamic website fast&lt;/em&gt; -&gt; &lt;strong&gt;PHP&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;general-purpose scripting&lt;/em&gt; -&gt; &lt;strong&gt;Python&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;interprocess scripting on OS X&lt;/em&gt; -&gt; &lt;strong&gt;AppleScript&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;Other Software Examples&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;GitHub -&gt; &lt;strong&gt;Git&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Outlook -&gt; &lt;strong&gt;Windows&lt;/strong&gt;&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;&lt;em&gt;Related Articles&lt;/em&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/articles/2013/01/08/programming-is-fun-but-what-matters-is-solving-a-real-problem/&quot;&gt;Programming is Fun. But What Matters is Solving a Real Problem.&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;More thoughts on business considerations as applied to software.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;More information about the adoption of Lua in the gaming industry on StackOverflow: &lt;a href=&quot;http://stackoverflow.com/questions/38338/why-is-lua-considered-a-game-language&quot;&gt;Why is Lua considered a game language?&lt;/a&gt;&lt;a href=&quot;#fnref:1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;Although Microsoft has finally created a version of Outlook for the Mac, it is buggy and missing a number of advanced features of the Windows version. Thus two of my colleagues &lt;!-- Neeraj and Dee --&gt; who do a lot of planning run Outlook specifically on Windows despite the workplace being otherwise Mac-oriented.&lt;a href=&quot;#fnref:2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

</description>
    </item>
    
    
    <item>
      <title>Notes on Racket (PLT-Scheme)</title>
      <link>http://dafoster.net/articles/2013/03/01/notes-on-racket/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Fri, 01 Mar 2013 00:00:00 -0800</pubDate>
      <guid>http://dafoster.net/articles/2013/03/01/notes-on-racket</guid>
      <description>&lt;p&gt;Generally &lt;a href=&quot;http://racket-lang.org&quot;&gt;Racket&lt;/a&gt; appears to be a very usable dialect of Lisp/Scheme.&lt;/p&gt;

&lt;p&gt;Racket is particularly well suited for those who want to develop their own programming language (including those not based on S-expressions), given that the creators of Racket are programming language researchers. For example, a number of Racket subsets have been created to assist students who are learning Racket/Scheme via the &lt;a href=&quot;http://htdp.org&quot;&gt;How to Design Programs&lt;/a&gt; book.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; The Arc language by Paul Graham is also implemented in the Racket environment.&lt;/p&gt;

&lt;p&gt;Racket&amp;rsquo;s developers wanted to make sure it was a &lt;em&gt;practical&lt;/em&gt; language. To that end, there is a bundled IDE (DrRacket) with syntax highlighting, parentheses matching, and integrated debugging. There is also a package management system (PLaneT).&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; And built-in libraries for working with several real-world systems, such as GUIs, networking, databases, JSON/XML, etc. A cross-platform executable can easily be built. And everything is well documented.&lt;/p&gt;

&lt;p&gt;Graphics and GUI programs are supported better than the average language. For example pictures are rendered natively in the Racket REPL, including their use within expressions. And the built-in Racket GUI library is fairly decent.&lt;/p&gt;

&lt;p&gt;The combination of a decent built-in GUI library along with the ability to compile cross-platform executables makes Racket useful for writing cross-platform GUI applications.&lt;/p&gt;

&lt;h2&gt;Racket&amp;rsquo;s GUI library (RacketGUI)&lt;/h2&gt;

&lt;p&gt;The original version of Racket&amp;rsquo;s GUI library was implemented on top of wxWidgets.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; Thus some of wxWidget&amp;rsquo;s poor design decisions leak through:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A visual component is called a &amp;ldquo;window&amp;rdquo;, not a control.&lt;/li&gt;
&lt;li&gt;Visual components must be associated with their parent container at creation time.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;However, some fixes were made too:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There is no notion of a wxWidgets &amp;ldquo;sizer&amp;rdquo; as distinct from a &amp;ldquo;container window&amp;rdquo;.

&lt;ul&gt;
&lt;li&gt;This simplifies the mental model considerably, since it is no longer necessary to keep track of both a &amp;ldquo;window&amp;rdquo; hierarchy and a sizer hierarchy.&lt;/li&gt;
&lt;li&gt;Instead, a wxWidgets &amp;ldquo;sizer&amp;rdquo; is represented as a lightweight RacketGUI &amp;ldquo;pane&amp;rdquo;, which can be nested naturally inside containers along with other components.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The event handling loop is managed in the background automatically.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Sadly, RacketGUI lacks some advanced controls I often want:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;trees&lt;/li&gt;
&lt;li&gt;tables containing controls in cells

&lt;ul&gt;
&lt;li&gt;However the &lt;code&gt;list-box%&lt;/code&gt; control supports cells that only contain text.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tree-tables&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is not surprising since these controls are hard to implement and are not well-supported by the original underlying wxWidgets library:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The wxWidgets tree interface (wxTreeCtrl) is annoying for dynamically generated trees.&lt;/li&gt;
&lt;li&gt;Tables (wxListCtrl) only support text and image cells, not controls as cells.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;&lt;em&gt;Related Articles&lt;/em&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/articles/2013/01/29/unique-features-of-various-programming-languages/&quot;&gt;Unique Features of Various Programming Languages&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Describes several other programming languages and their unique features.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/articles/2013/02/25/notes-on-prolog/&quot;&gt;Notes on Prolog&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Describes Prolog, a highly declarative language. Useful for verification of proofs.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;http://htdp.org&quot;&gt;HtDP&lt;/a&gt; book uses the dialects &amp;ldquo;Beginning Student&amp;rdquo;, &amp;ldquo;Intermediate Student&amp;rdquo;, and &amp;ldquo;Advanced Student&amp;rdquo;. These sublanguages restrict the use of certain language features (such as using functions as objects) and can provide better error messages (which avoid mentioning advanced features not supported by the sublanguage).&lt;a href=&quot;#fnref:1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;It is possible to import modules directly from the PLaneT repository, which will automatically download and install the module if it isn&amp;rsquo;t already present. Neat!&lt;a href=&quot;#fnref:2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:3&quot;&gt;
&lt;p&gt;Racket&amp;rsquo;s GUI layer has apparently been redone a couple of times. Originally it was based on wxWidgets. Later it was rewritten to about 200,000 lines of C++ glue to Xt, Win32, and Carbon. Then in Racket 5.1 it was replaced with about 80,000 lines of Racket glue to Gtk, Win32, Cocoa, Cairo, and Pango. That&amp;rsquo;s a 60% reduction in code! More details on the &lt;a href=&quot;http://blog.racket-lang.org/2010/12/racket-version-5.html&quot;&gt;Racket blog&lt;/a&gt;.&lt;a href=&quot;#fnref:3&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

</description>
    </item>
    
    
    <item>
      <title>Notes on Prolog</title>
      <link>http://dafoster.net/articles/2013/02/25/notes-on-prolog/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Mon, 25 Feb 2013 00:00:00 -0800</pubDate>
      <guid>http://dafoster.net/articles/2013/02/25/notes-on-prolog</guid>
      <description>&lt;h2&gt;What is Prolog?&lt;/h2&gt;

&lt;p&gt;Prolog is a declarative programming language that, given a list of axioms and a list of implication rules, can deduce the truth (or falsehood) of a logical statement.&lt;/p&gt;

&lt;p&gt;For example, given the following knowledge base (AKA &lt;em&gt;database&lt;/em&gt;):&lt;/p&gt;

&lt;pre&gt;
% Axiom: Mary likes Ted.
likes(mary,ted).
% Axiom: Jane likes Ted.
likes(jane,ted).
% Rule: X is jealous of Y if they both like Z (and are not the same person).
jealous(X,Y) :- likes(X,Z), likes(Y,Z), X \= Y.
&lt;/pre&gt;


&lt;p&gt;I can ask the question &lt;code&gt;jealous(mary,jane)&lt;/code&gt; and get the affirmation &lt;code&gt;true&lt;/code&gt;.
Or I can ask the question &lt;code&gt;jealous(mary,mary)&lt;/code&gt; and get the denial &lt;code&gt;false&lt;/code&gt;.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;I can also ask a more complicated question containing variables and Prolog will derive the possible values (and relations) the variables must have in order to make the question posed to be true.&lt;/p&gt;

&lt;p&gt;For example, asking the question &lt;code&gt;jealous(X,Y)&lt;/code&gt; will give the results:&lt;/p&gt;

&lt;pre&gt;
X = mary,
Y = jane ;
X = jane,
Y = mary
&lt;/pre&gt;


&lt;p&gt;As another (more interesting) example, consider the knowledge base:&lt;/p&gt;

&lt;pre&gt;
% Rule: A line is horizontal if its points have the same Y coordinate.
horizontal(line( point(_,Y), point(_,Y) )).
% Rule: A line is vertical if its points have the same X coordinate.
vertical(line( point(X,_), point(X,_) )).
&lt;/pre&gt;


&lt;p&gt;And the questions:&lt;/p&gt;

&lt;pre&gt;
(1) horizontal(line( point(0,0), point(X,Y) )).  ==&gt;  Y = 0.
(2) horizontal(line( point(0,0), P2 )).          ==&gt;  P2 = point(_G327, 0).
&lt;/pre&gt;


&lt;p&gt;The second question is particularly interesting because it gave back a fairly complicated answer: &lt;code&gt;P2&lt;/code&gt; must be a &lt;code&gt;point&lt;/code&gt;, its X coordinate can be anything, but its Y coordinate must be zero. I think it&amp;rsquo;s particularly cool that Prolog can deduce that P2 must be a point. &lt;!-- LPN §2.1 --&gt;&lt;/p&gt;

&lt;p&gt;As a final example of a simple problem solvable by Prolog, consider the &lt;a href=&quot;http://www.learnprolognow.org/lpnpage.php?pagetype=html&amp;amp;pageid=lpn-htmlse7&quot;&gt;crossword puzzle&lt;/a&gt; in Exercise 2.4 of &amp;ldquo;Learn Prolog Now!&amp;rdquo;. You can write a Prolog program to solve crossword puzzles!&lt;/p&gt;

&lt;h2&gt;When is Prolog useful?&lt;/h2&gt;

&lt;p&gt;Prolog&amp;rsquo;s deduction capabilities makes it useful for answering questions and making deductions within systems whose concepts can be expressed in a formal hierarchy. &lt;!-- LPN §2.1 --&gt;&lt;/p&gt;

&lt;p&gt;In academia, for example, Prolog has been used to investigate natural language formalizations and expert systems in artificial intelligence. &lt;!-- LPN §2.1 --&gt;&lt;/p&gt;

&lt;h3&gt;Case Study: Java bytecode verifier&lt;/h3&gt;

&lt;p&gt;As a more practical example, Prolog has also been used to define the semantics of the Java bytecode verifier&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; for Java 6.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; Prior versions of Java had a verifier whose semantics were defined by a textual specification only (namely the Java Virtual Machine Specification).&lt;/p&gt;

&lt;p&gt;There are a few advantages to having the verifier defined in terms of Prolog:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The specification becomes formal (and thereby unambiguous and more likely to be error-free).&lt;/li&gt;
&lt;li&gt;The execution model for performing the verification becomes well-defined (since it would use Prolog&amp;rsquo;s) and fast (since Prolog&amp;rsquo;s core unification algorithm is fast&lt;!-- LPN §2.1 --&gt;).&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Writing Programs&lt;/h2&gt;

&lt;h3&gt;Functions as Rules&lt;/h3&gt;

&lt;p&gt;So how do you actually write something resembling a &lt;em&gt;program&lt;/em&gt; in Prolog? Until now we&amp;rsquo;ve been talking about axioms, rules, and questions. But in most languages a program consists of a series of expressions that are evaluated.&lt;/p&gt;

&lt;p&gt;For example in Python, you might write:&lt;/p&gt;

&lt;pre&gt;
def add(x, y):
    return x + y

print add(5, 3)    # prints 8
&lt;/pre&gt;


&lt;p&gt;In Prolog, you can do something similar by defining a rule where one of the variables in the rule (typically the last one) is its &amp;ldquo;output&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;
add(X, Y, Result) :- Result is X + Y.
&lt;/pre&gt;


&lt;p&gt;To actually evaluate this &amp;ldquo;function&amp;rdquo; with 5 and 3 you would ask the question &lt;code&gt;add(5, 3, Result)&lt;/code&gt; which would yield &lt;code&gt;Result = 8&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, don&amp;rsquo;t get trapped into the idea that such as rule always needs to be evaluated in one direction. In Prolog you have the additional power to ask what the &amp;ldquo;inputs&amp;rdquo; of the function has to be to yield an already-known &amp;ldquo;output&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;For example, you could ask the question &lt;code&gt;add(X, 3, 8)&lt;/code&gt; to deduce that &amp;ldquo;input&amp;rdquo; X must be 5.&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; You could even try asking &lt;code&gt;add(X, Y, 8)&lt;/code&gt; to find all values of X and Y that yield 8 as a result (although there are an infinite number of such combinations in this example).&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;This power to flip functions on their head is a unique quality of Prolog. (And it blows my mind.)&lt;/p&gt;

&lt;p&gt;Ultimately a rule specifies a set of relationships between its arguments. Thus arguments can be &amp;ldquo;inputs&amp;rdquo;, &amp;ldquo;outputs&amp;rdquo;, or even temporary variables (like accumulators).&lt;/p&gt;

&lt;h3&gt;Processing Recursive Data Structures&lt;/h3&gt;

&lt;p&gt;Processing recursive data structures such as lists and trees is mind bending&amp;hellip; For examples see:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.learnprolognow.org/lpnpage.php?pagetype=html&amp;amp;pageid=lpn-htmlse24&quot;&gt;LPN §6.1 &amp;ldquo;Append&amp;rdquo;&lt;/a&gt; and&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.learnprolognow.org/lpnpage.php?pagetype=html&amp;amp;pageid=lpn-htmlse25&quot;&gt;LPN §6.2 &amp;ldquo;Reversing a List&amp;rdquo;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Interactive Use (as a REPL)&lt;/h2&gt;

&lt;p&gt;It is possible to run Prolog in an interactive fashion by using the &lt;code&gt;assert&lt;/code&gt; special rule at runtime to define new statements (i.e. axioms and rules). And &lt;code&gt;listing&lt;/code&gt; will display the set of statements that have been defined. Finally &lt;code&gt;retract&lt;/code&gt; and &lt;code&gt;retractall&lt;/code&gt; can be used to undefine statements.&lt;/p&gt;

&lt;p&gt;These special rules, however, are not restricted to use in the interpreter - they can also be used at runtime by rules in programs. For example memoization&lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;#fn:6&quot; rel=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; is a good use for dynamic calls to &lt;code&gt;assert&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Question Evaluation &lt;small&gt;(Unification, Backtracking)&lt;/small&gt;&lt;/h2&gt;

&lt;p&gt;When evaluating a question, Prolog takes the question expression and matches it against the axioms and rules in the input knowledge base. The algorithm used for matching is called &lt;em&gt;unification&lt;/em&gt;. While performing unification, Prolog makes guesses about what values should be assigned to each variable in the question expression. If it encounters a contradiction, it &lt;em&gt;backtracks&lt;/em&gt; to one of its previous guesses and revises the guess. This process is described graphically in &lt;a href=&quot;http://www.learnprolognow.org/lpnpage.php?pagetype=html&amp;amp;pageid=lpn-htmlse6&quot;&gt;LPN §2.2 &amp;ldquo;Proof Search&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Although Prolog is a declarative language, the precise behavior of evaluating queries depends on the order that rules and clauses are defined. In particular the performance of the same program can vary significantly depending on ordering. As another gotcha, if you define rules in a left-recursive fashion (as opposed to a right-recursive one), Prolog will go into an infinite loop when evaluating the rule.&lt;/p&gt;

&lt;p&gt;It is possible to debug (and step through) the evaluation of a question expression using the &lt;strong&gt;trace&lt;/strong&gt; command, which is described in &lt;a href=&quot;http://www.learnprolognow.org/lpnpage.php?pagetype=html&amp;amp;pageid=lpn-htmlse8&quot;&gt;LPN §2.4 &amp;ldquo;Practical Session&amp;rdquo;&lt;/a&gt;. This is useful for investigating performance issues.&lt;/p&gt;

&lt;h3&gt;Cuts&lt;/h3&gt;

&lt;p&gt;It is possible to optimize the execution of a Prolog rule by adding a &lt;strong&gt;cut&lt;/strong&gt; as a clause. This is written as a bang (&lt;code&gt;!&lt;/code&gt;). Unfortunately to use cuts effectively (and correctly), you have to understand the exact execution model used by Prolog. It is quite easy to unwittingly insert a cut that actually changes the semantics of the original rule. &lt;!-- LPN §10.1, §10.2 --&gt;&lt;/p&gt;

&lt;p&gt;There are even hacks you can do with cuts such as implementing &amp;ldquo;negation as failure&amp;rdquo; (&lt;code&gt;\+&lt;/code&gt;). But again you have to be very careful since cuts can change your knowledge base&amp;rsquo;s semantics. &lt;!-- LPN §10.3 --&gt;&lt;/p&gt;

&lt;h2&gt;Side Effects &amp;amp; I/O&lt;/h2&gt;

&lt;p&gt;Some built-in clauses trigger side effects when they are examined by the unification algorithm. Programs take advantage of such &amp;ldquo;impure predicates&amp;rdquo; to do I/O and other types of side-effecting work.&lt;/p&gt;

&lt;p&gt;For example asking the question &lt;code&gt;print('Hello')&lt;/code&gt; will print &lt;code&gt;Hello&lt;/code&gt; to the screen.&lt;sup id=&quot;fnref:7&quot;&gt;&lt;a href=&quot;#fn:7&quot; rel=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;To write to a file you might define:&lt;/p&gt;

&lt;pre&gt;
printfile(Filename, Text) :-
    open(Filename, write, Stream),
    write(Stream, Text), nl(Stream),
    close(Stream).
&lt;/pre&gt;


&lt;p&gt;And then pose the question &lt;code&gt;printfile('hogwarts.txt', 'Hogwarts')&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;During evaluation, the &lt;code&gt;printfile&lt;/code&gt; is rewritten to &lt;code&gt;open(...) AND write(...) AND nl(...) AND close(...)&lt;/code&gt;. Each of those subclauses is then each evaluated to &lt;code&gt;true&lt;/code&gt; (performing the associated side effect) and the overall clause becomes just &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;&lt;em&gt;References&lt;/em&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;LPN: &lt;a href=&quot;http://www.learnprolognow.org/lpnpage.php?pageid=online&quot;&gt;Learn Prolog Now!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;&lt;em&gt;Related Articles&lt;/em&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/articles/2013/01/29/unique-features-of-various-programming-languages/&quot;&gt;Unique Features of Various Programming Languages&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Describes several other programming languages and their unique features.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;When posing a question in the Prolog interpreter, you must include a trailing period at the end of the question.&lt;a href=&quot;#fnref:1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;The job of the Java bytecode verifier is to examine a compiled Java program and check whether it is well-structured and therefore (reasonably) safe for the Java virtual machine to execute. For example the verifier would reject a Java program containing a command to jump to an instruction location outside of the current method.&lt;a href=&quot;#fnref:2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:3&quot;&gt;
&lt;p&gt;See the &lt;a href=&quot;http://docs.oracle.com/javase/specs/jvms/se7/html/index.html&quot;&gt;Java Virtual Machine Specification&lt;/a&gt;. Particularly &amp;ldquo;Preface to the Java SE 7 Edition&amp;rdquo; and §4.10 &amp;ldquo;Verification of class Files&amp;rdquo;.&lt;a href=&quot;#fnref:3&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:4&quot;&gt;
&lt;p&gt;Unfortunately the &lt;code&gt;is&lt;/code&gt; clause in this example cannot be run &amp;ldquo;backwards&amp;rdquo;, so this particular question will fail. (I am not sure why this particular restriction on &lt;code&gt;is&lt;/code&gt; exists.)&lt;a href=&quot;#fnref:4&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:5&quot;&gt;
&lt;p&gt;A Prolog &lt;em&gt;program&lt;/em&gt; that wanted to collect all combinations of inputs in this fashion (as opposed to a user at the interpreter) would probably use a combination of the &lt;code&gt;findall&lt;/code&gt;, &lt;code&gt;bagof&lt;/code&gt;, and &lt;code&gt;setof&lt;/code&gt; special rules. See &lt;a href=&quot;http://www.learnprolognow.org/lpnpage.php?pagetype=html&amp;amp;pageid=lpn-htmlse49&quot;&gt;LPN §11.2 &amp;ldquo;Collecting Solutions&amp;rdquo;&lt;/a&gt; for more information.&lt;a href=&quot;#fnref:5&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:6&quot;&gt;
&lt;p&gt;Memoization is where a function that computes a value caches the result of the computation so that repeated invocations with the same input can immediately return the saved result. This can speed of performance in certain applications. See &lt;a href=&quot;http://www.learnprolognow.org/lpnpage.php?pagetype=html&amp;amp;pageid=lpn-htmlse48&quot;&gt;LPM §11.1 &amp;ldquo;Database Manipulation&amp;rdquo;&lt;/a&gt; for an example.&lt;a href=&quot;#fnref:6&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:7&quot;&gt;
&lt;p&gt;Note that &lt;code&gt;'Hello'&lt;/code&gt; (with single quotes) is a variable, not a string. The string &lt;code&gt;&quot;Hello&quot;&lt;/code&gt; (with double quotes) is equivalent to a list of codepoints (&lt;code&gt;[72, 101, 108, 108, 111]&lt;/code&gt;).&lt;a href=&quot;#fnref:7&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

</description>
    </item>
    
    
    <item>
      <title>Visual Guide to Programming Language Properties</title>
      <link>http://dafoster.net/articles/2013/02/20/visual-guide-to-programming-language-properties/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Wed, 20 Feb 2013 00:00:00 -0800</pubDate>
      <guid>http://dafoster.net/articles/2013/02/20/visual-guide-to-programming-language-properties</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s an interactive chart showing high-level properties of various programming languages.&lt;br/&gt;
You can filter the chart to only show the properties that your favorite language supports.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/articles/2013/02/20/visual-guide-to-programming-language-properties/&quot;&gt;Read more&amp;hellip;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    
    <item>
      <title>RDiscount 2.0.7 released</title>
      <link>http://dafoster.net/articles/2013/02/02/rdiscount-2.0.7-released/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Sat, 02 Feb 2013 00:00:00 -0800</pubDate>
      <guid>http://dafoster.net/articles/2013/02/02/rdiscount-2.0.7-released</guid>
      <description>&lt;p&gt;It has been just over two years since &lt;a href=&quot;/projects/rdiscount/&quot;&gt;RDiscount&lt;/a&gt; 1.6.8 (the previous version) was posted.&lt;br/&gt;
As the new maintainer, I intend to provide updates a bit more frequently. :-)&lt;/p&gt;

&lt;p&gt;Update to the latest version with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem update rdiscount
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;What&amp;rsquo;s New?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://michelf.ca/projects/php-markdown/extra/#footnotes&quot;&gt;Footnotes&lt;/a&gt; - from &lt;em&gt;PHP Markdown Extra&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Superscript tweaks

&lt;ul&gt;
&lt;li&gt;Be more picky about what comes before a ^ if we’re superscripting.&lt;/li&gt;
&lt;li&gt;Modify superscript grabbing so that it grabs parenthetical and alphanumeric blocks.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other bug fixes

&lt;ul&gt;
&lt;li&gt;Table-of-contents generation will no longer crash for header items containing links.&lt;/li&gt;
&lt;li&gt;Adjacent new-style [link]s are no longer incorrectly combined.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;What&amp;rsquo;s Next?&lt;/h2&gt;

&lt;p&gt;RDiscount 2.1.5 will be the next release of RDiscount. Planned features include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fenced code blocks

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://github.github.com/github-flavored-markdown/&quot;&gt;backtick-delimited&lt;/a&gt; - from &lt;em&gt;GitHub Flavored Markdown&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://michelf.ca/projects/php-markdown/extra/#fenced-code-blocks&quot;&gt;tilde-delimited&lt;/a&gt; - from &lt;em&gt;PHP Markdown Extra&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Who am I?&lt;/h2&gt;

&lt;p&gt;I should also introduce myself: I am &lt;a href=&quot;/about/&quot;&gt;David Foster&lt;/a&gt;, the new maintainer for RDiscount.&lt;/p&gt;

&lt;p&gt;Since I am using RDiscount on my personal website, you can expect continued updates as major new features are introduced in the underlying &lt;a href=&quot;http://www.pell.portland.or.us/~orc/Code/discount/&quot;&gt;Discount&lt;/a&gt; library.&lt;/p&gt;

&lt;h3&gt;&lt;em&gt;Related Articles&lt;/em&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/articles/2012/12/16/why-i-no-longer-use-drupal/&quot;&gt;Why I no longer use Drupal&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Why Jekyll (and not Drupal) is awesome for making a personal website or blog.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Jekyll can use RDiscount for Markdown rendering.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    
    
    <item>
      <title>Learnings from SICP (and Lisp)</title>
      <link>http://dafoster.net/articles/2013/02/02/learnings-from-sicp/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Sat, 02 Feb 2013 00:00:00 -0800</pubDate>
      <guid>http://dafoster.net/articles/2013/02/02/learnings-from-sicp</guid>
      <description>&lt;p&gt;&lt;img src=&quot;/assets/2013/sicp_cover.jpg&quot;
  alt=&quot;Cover of The Structure and Interpretation of Computer Programs&quot;
  style=&quot;float: right;&quot;
  width=&quot;170&quot; height=&quot;246&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Recently I took the liberty of reading one of the defining books in the domain of computer science: &lt;a href=&quot;http://mitpress.mit.edu/sicp/&quot;&gt;The Structure and Interpretation of Computer Programs&lt;/a&gt;, often abbreviated as SICP.&lt;/p&gt;

&lt;p&gt;SICP is the computer science textbook given to undergraduates at MIT. It serves as an advanced text on software design and as an introductory text for the Lisp programming language.&lt;/p&gt;

&lt;p&gt;Here are some interesting things I learned:&lt;/p&gt;

&lt;div class=&quot;toc&quot;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;#role-of-programming-languages&quot;&gt;Role of Programming Languages&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#abstract-data-types&quot;&gt;Abstract Data Types&lt;/a&gt;&lt;/li&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#lisp-vs-pascal-design-philosophies&quot;&gt;Lisp vs. Pascal Design Philosophies&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#polymorphism&quot;&gt;Polymorphism&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#cross-type-operations&quot;&gt;Cross-Type Operations&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;li&gt;&lt;a href=&quot;#assignments-mutable-state-and-side-effects&quot;&gt;Assignments, Mutable State, and Side Effects&lt;/a&gt;&lt;/li&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#lazy-evaluation&quot;&gt;Lazy Evaluation&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;li&gt;&lt;a href=&quot;#declarative-languages&quot;&gt;Declarative Languages&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a id=&quot;role-of-programming-languages&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Role of Programming Languages&lt;/h2&gt;

&lt;p&gt;Languages should:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;provide the means for &lt;strong&gt;combining simple ideas to form complex ideas&lt;/strong&gt;,&lt;/li&gt;
&lt;li&gt;provide the means for &lt;strong&gt;abstracting units of computation&lt;/strong&gt;, and&lt;/li&gt;
&lt;li&gt;serve as a framework within which we &lt;strong&gt;organize our ideas about processes&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Units of computation can be abstracted in several forms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;procedure&lt;/strong&gt; - &lt;em&gt;Assigns names to common patterns, allowing you to work in terms of the named abstractions directly.&lt;/em&gt;

&lt;ul&gt;
&lt;li&gt;AKA function, method&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;abstract data type&lt;/strong&gt; - &lt;em&gt;Allows the choice of representation (i.e. the implementation) to vary separately from the API (i.e. the interface).&lt;/em&gt;&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;

&lt;ul&gt;
&lt;li&gt;Built-in language support is often provided in the form of &lt;strong&gt;classes&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;See also: LISP constructors

&lt;ul&gt;
&lt;li&gt;AKA &lt;strong&gt;constructor&lt;/strong&gt; or &lt;strong&gt;static factory method&lt;/strong&gt; in other languages&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;See also: LISP selectors

&lt;ul&gt;
&lt;li&gt;AKA &lt;strong&gt;accessors&lt;/strong&gt;, mutators, or &lt;strong&gt;properties&lt;/strong&gt; in other languages&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;module&lt;/strong&gt;&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; - &lt;em&gt;Groups several procedures and data types into a namespace independent from other modules.&lt;/em&gt;

&lt;ul&gt;
&lt;li&gt;AKA package (Java), namespace (C++), module (Python)&lt;/li&gt;
&lt;li&gt;Languages that don&amp;rsquo;t have built-in support for this concept typically use prefixes to create de-facto namespaces. (C, Objective-C, PHP &amp;lt; 5.3.0)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;assembly&lt;/strong&gt; - &lt;em&gt;Groups several modules together in a single versioned &lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; package. Assemblies can depend on other assemblies, often from separate vendors.&lt;/em&gt;

&lt;ul&gt;
&lt;li&gt;AKA &lt;strong&gt;shared library&lt;/strong&gt; (C, C++), gem (Ruby), egg (Python)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;abstract-data-types&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Abstract Data Types&lt;/h2&gt;

&lt;p&gt;&lt;a id=&quot;lisp-vs-pascal-design-philosophies&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Lisp vs. Pascal Design Philosophies&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;For you youngin&amp;rsquo;s that have never used Pascal, just replace &amp;ldquo;Pascal&amp;rdquo; with &amp;ldquo;Java&amp;rdquo; in this section and you should get the right idea.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Two design philosophies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Lisp-school&lt;/strong&gt;: Create abstract data types by combining a &lt;em&gt;small&lt;/em&gt; set of general-purpose data types (particularly collections). These complex structures can then be manipulated using operations on these general-purpose types.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&amp;ldquo;Lisp is for building organisms -­ imposing, breathtaking, dynamic structures built by squads fitting fluctuating myriads of simpler organisms into place.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&amp;ldquo;Lisp programs inflate libraries with functions whose utility transcends the application that produced them.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pascal-school&lt;/strong&gt;: Create &lt;em&gt;many&lt;/em&gt; special-purpose data types (i.e. classes) and specialized operations to manipulate them.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&amp;ldquo;Pascal is for building pyramids -­ imposing, breathtaking, static structures built by armies pushing heavy blocks into place.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&amp;ldquo;In Pascal the plethora of declarable data structures induces a specialization within functions that inhibits and penalizes casual cooperation.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Roughly speaking, I think of the Lisp philosophy as &lt;strong&gt;programming with collections&lt;/strong&gt; and the Pascal philosophy as &lt;strong&gt;programming with classes&lt;/strong&gt;.&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h4&gt;Usage&lt;/h4&gt;

&lt;p&gt;The Pascal philosophy has won out in most statically typed languages such as C++ and Java, and in languages with poor (or nonexistent) built-in collections.&lt;/p&gt;

&lt;p&gt;The Lisp philosophy is more common in dynamically typed languages that lack built-in support for classes, such as Lisp itself and JavaScript.&lt;/p&gt;

&lt;p&gt;A hybrid approach (using both philosophies) is seen in languages that are dynamically typed, have built-in collections, and have built-in classes, such as Python and Ruby.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;polymorphism&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Polymorphism&lt;/h3&gt;

&lt;p&gt;Polymorphism is where multiple abstract data types implement a common &lt;em&gt;interface&lt;/em&gt;, which is typically defined as a series of methods that can be called on all implementing types.&lt;/p&gt;

&lt;p&gt;This allows client code, when given an object known only to implement a particular interface, to invoke interface methods on the object and end up calling the correct implementation of that method depending on the runtime type of the object.&lt;/p&gt;

&lt;h4&gt;Implementation Strategies&lt;/h4&gt;

&lt;p&gt;Polymorphism can be implemented in several different ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Switch on Typecode&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Easiest to implement. Hardest to maintain.&lt;/li&gt;
&lt;li&gt;Treated as an anti-pattern in many OO languages.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Virtual Lookup Tables&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;AKA &amp;ldquo;data-directed programming&amp;rdquo; (in SICP) or v-tables (C++)&lt;/li&gt;
&lt;li&gt;Default implementation strategy for most OO languages.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Message Passing&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Most flexible.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Many languages provide a &lt;em&gt;default implementation strategy&lt;/em&gt; as a language construct. For example C++ and Java use virtual lookup tables. Smalltalk and Objective-C use message passing. C doesn&amp;rsquo;t give you anything for free, so you have to roll your own polymorphism.&lt;/p&gt;

&lt;h4&gt;Tradeoffs&lt;/h4&gt;

&lt;p&gt;These implementation strategies for polymorphism have some tradeoffs, which are worth knowing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Virtual lookup tables are restricted in that &lt;em&gt;the total set of operations on the abstract data type must be known in advance&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Message passing, on the other hand, can be made more flexible:

&lt;ul&gt;
&lt;li&gt;Implementing data types may choose to support more operations than the standard set on the interface.&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Heck, individual &lt;em&gt;instances&lt;/em&gt; can choose to support more operations than the standard set.

&lt;ul&gt;
&lt;li&gt;In such cases, you would want to interrogate (i.e. reflect on) an individual instance to determine what operations (i.e. messages) it understands/supports.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;cross-type-operations&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Cross-Type Operations&lt;/h3&gt;

&lt;p&gt;Introducing &lt;strong&gt;cross-type operations&lt;/strong&gt;, such as &lt;code&gt;add(Integer, Complex)&lt;/code&gt;, is a very tricky design issue.&lt;/p&gt;

&lt;p&gt;Having explicit functions that operate on all combinations of types is possible but highly verbose. With &lt;strong&gt;n&lt;/strong&gt; types and &lt;strong&gt;m&lt;/strong&gt; operations, you need &lt;strong&gt;n*m&lt;/strong&gt; functions to implement all combinations. Impractical.&lt;/p&gt;

&lt;p&gt;Another strategy is to use &lt;em&gt;coercion&lt;/em&gt; to convert a value from one type to another. So instead of defining &lt;code&gt;add(Integer, Complex)&lt;/code&gt;, just define &lt;code&gt;convertToComplex(Integer) : Complex&lt;/code&gt;, and use the existing &lt;code&gt;add(Complex, Complex)&lt;/code&gt;. To convert between all types requires at least &lt;strong&gt;n&lt;/strong&gt; but no more than &lt;strong&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/strong&gt; conversion functions.&lt;/p&gt;

&lt;p&gt;Many programming languages have built-in facilities to automatically coerce types. For some languages (like JavaScript or PHP) these coersion rules are quite complex (and error-prone). Other languages (like ML) ban implicit coercion entirely.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Java only has coercion for built-in types.&lt;/li&gt;
&lt;li&gt;C++ lets the datatype designer choose (via &lt;code&gt;implicit&lt;/code&gt; or explicit one-argument constructors).&lt;/li&gt;
&lt;li&gt;Scala relies on implicit coercion a lot to enable foreign methods to be introduced on types.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;One wrinkle is that these conversion functions might introduce a loss in precision. For example not every integer can be represented as double of exactly the same value.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;assignments-mutable-state-and-side-effects&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Assignments, Mutable State, and Side Effects&lt;/h2&gt;

&lt;p&gt;Introducing assignment creates lots of complications. In particular &lt;em&gt;referential transparency&lt;/em&gt; is lost. Optimizations related to reordering and coalescing expressions need to be a lot more careful. Static reasoning of various kinds is impaired.&lt;/p&gt;

&lt;p&gt;To reduce bugs it is best to minimize the use of mutation by using immutable objects whenever possible.&lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;#fn:6&quot; rel=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Haskell takes a very aggressive stance against assignments, mutable state, and other side effects: they are banned by default. However Haskell does allow side effects within the context of a &lt;strong&gt;monad&lt;/strong&gt;. This is a special construct unique to Haskell (so far as I know).&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;lazy-evaluation&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Lazy Evaluation&lt;/h3&gt;

&lt;p&gt;Normally expressions are evaluated immediately, in the order that they occur in code. &lt;strong&gt;Lazy evaluation&lt;/strong&gt; changes this behavior such that expressions are only evaluated when some primitive operation (like print or add) requires the value of the expression. Until then the unevaluated expression is passed around (as a &amp;ldquo;thunk&amp;rdquo;).&lt;/p&gt;

&lt;p&gt;Lazy evaluation enables that creation of &lt;strong&gt;lazy data structures&lt;/strong&gt;, which is a useful performance optimization in some contexts.&lt;/p&gt;

&lt;p&gt;Unrestricted mutation and lazy evaluation do not mix well in programming languages. Since unrestricted mutation is very common in mainstream programming languages, it is quite rare to be in an environment that supports lazy evaluation. Haskell is one of the few.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;declarative-languages&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Declarative Languages&lt;/h2&gt;

&lt;p&gt;Logic programming languages are at the far declarative end of the
imperative-declarative spectrum. They can be used to deduce answers
from a set of initial set of declarative statements.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/articles/2013/02/25/notes-on-prolog/&quot;&gt;Prolog&lt;/a&gt; is the best-known example of a logic programming language.&lt;/p&gt;

&lt;p&gt;Query systems for databases are a type of logic programming language.&lt;/p&gt;

&lt;p&gt;A &amp;ldquo;query&amp;rdquo; (i.e. an expression in the language) is transformed into a
&amp;ldquo;query plan&amp;rdquo; (i.e. a specific set of steps to follow) by a query planner. The implemented of these planners is quite complex.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;conclusion&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So those are a few interesting things I learned from reading SICP. Taking notes while reading made it a lot easier for me to remember the content. You might try it when reading a technical book with a lot of new concepts.&lt;/p&gt;

&lt;h3&gt;&lt;em&gt;Related Articles&lt;/em&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/articles/2013/03/01/notes-on-racket/&quot;&gt;Notes on Racket&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Describes Racket, a dialect of Lisp with batteries included.&lt;/em&gt;&lt;br/&gt;
&lt;em&gt;Useful for implementing other languages and creating cross-platform GUI programs.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/articles/2013/01/29/unique-features-of-various-programming-languages/&quot;&gt;Unique Features of Various Programming Languages&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Discusses several programming languages and their unique features.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/articles/2013/02/25/notes-on-prolog/&quot;&gt;Notes on Prolog&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Describes the Prolog language in more detail.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;For example, complex numbers can be expressed in rectangular (a + b&lt;em&gt;i&lt;/em&gt;) or polar form (r*cos(𝜽)). &amp;ndash; Some representations are better than others for different operations. Adding works better in rectangular form. Multiplying works better in polar form.&lt;a href=&quot;#fnref:1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;SICP does not mention the notion of a &lt;em&gt;module&lt;/em&gt; or an &lt;em&gt;assembly&lt;/em&gt;, however these are common higher-level units for abstracting computation in languages other than Lisp.&lt;a href=&quot;#fnref:2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:3&quot;&gt;
&lt;p&gt;Versioning assemblies effectively is a challenging topic onto itself. If done without care you get so-called &amp;ldquo;dependency hell&amp;rdquo;. Just getting a consistent version numbering scheme can be tricky. One popular versioning scheme is codified as &lt;a href=&quot;http://semver.org&quot;&gt;Semantic Versioning&lt;/a&gt;.&lt;a href=&quot;#fnref:3&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:4&quot;&gt;
&lt;p&gt;In my opinion, a language that supports neither first-class collections nor first-class classes is non-viable for large scale general purpose software development. C, Assembly, and Fortran fall into this category.&lt;a href=&quot;#fnref:4&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:5&quot;&gt;
&lt;p&gt;For example, the Linux virtual filesystem, which is implemented in message-passing style, has a common set of operations that all filesystems are expected to support (ex: &lt;code&gt;unlink&lt;/code&gt;). However individual filesystems may support additional operations: For example the HFS+ filesystem on Mac OS X additionally supports a &lt;code&gt;delete&lt;/code&gt; operation, which has slightly different semantics than the standard &lt;code&gt;unlink&lt;/code&gt; operation.&lt;a href=&quot;#fnref:5&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:6&quot;&gt;
&lt;p&gt;A common case where eliminating mutation may &lt;em&gt;not&lt;/em&gt; be practical is when defining and working with large data structures that need many small updates made to them over time. If such a structure were made immutable, there would be a large performance penalty for recopying the entire structure whenever a small change needed to be made.&lt;a href=&quot;#fnref:6&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

</description>
    </item>
    
    
    <item>
      <title>Unique Features of Various Programming Languages</title>
      <link>http://dafoster.net/articles/2013/01/29/unique-features-of-various-programming-languages/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Tue, 29 Jan 2013 00:00:00 -0800</pubDate>
      <guid>http://dafoster.net/articles/2013/01/29/unique-features-of-various-programming-languages</guid>
      <description>&lt;blockquote&gt;
  A language that doesn't affect the way you think about programming, is not worth knowing.&lt;br/&gt;
  &lt;br/&gt;
  &amp;ndash; &lt;a href=&quot;http://www-pu.informatik.uni-tuebingen.de/users/klaeren/epigrams.html&quot;&gt;Alan Perlis&lt;/a&gt;
&lt;/blockquote&gt;


&lt;p&gt;I like learning new languages to get myself to think about problems in different ways.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a list of a few well-known languages I&amp;rsquo;ve worked with and some of the more interesting features I&amp;rsquo;ve encountered:&lt;/p&gt;

&lt;div class=&quot;toc&quot;&gt;
  &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#c&quot;&gt;C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#java&quot;&gt;Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#csharp&quot;&gt;C&amp;#35;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#python&quot;&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#javascript&quot;&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#haskell&quot;&gt;Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#lisp&quot;&gt;Lisp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#other&quot;&gt;Other&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/div&gt;


&lt;p&gt;&lt;a id=&quot;c&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;C&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Undefined behavior&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The idea that a language specification would explicitly specify certain constructs as having undefined behavior is interesting. Most specifications leave things undefined by omission, not commission.&lt;/li&gt;
&lt;li&gt;Although this allows various compiler optimizations, many developers rely on their particular compiler&amp;rsquo;s implementation of undefined behavior without even realizing it.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;java&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Java&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Objects are the primary unit of composition&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;There are no standalone functions.&lt;/li&gt;
&lt;li&gt;Design Patterns can be used to describe high level object coordination patterns.&lt;/li&gt;
&lt;li&gt;However sometimes the community&amp;rsquo;s focus on objects can be a bit extreme.&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Checked exceptions&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Great when used &lt;em&gt;sparingly&lt;/em&gt;, as it forces the caller to handle expected error conditions.

&lt;ul&gt;
&lt;li&gt;I do think that it was a usability error to make &lt;code&gt;Exception&lt;/code&gt; checked and &lt;code&gt;RuntimeException&lt;/code&gt; unchecked. Rather it should be &lt;code&gt;Exception&lt;/code&gt; that is &lt;em&gt;unchecked&lt;/em&gt; and a new &lt;code&gt;CheckedException&lt;/code&gt; should be the base for all checked exceptions. This makes it clear that &lt;em&gt;unchecked&lt;/em&gt; exceptions should be the default.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Managing checked exceptions &lt;em&gt;correctly&lt;/em&gt; is quite difficult. &lt;!-- TODO: ARTICLE-IDEA --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unicode strings&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Tons of other languages use &amp;ldquo;bytestrings&amp;rdquo; as the main string type which causes all kinds of problems when working with international characters. &lt;!-- TODO: ARTICLE-IDEA --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentation focus&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Every library is expected to have JavaDoc documentation, which is generated from documentation comments in the source&lt;/li&gt;
&lt;li&gt;This is really powerful, since it makes it easy for developers to write documentation, and to do so at the same time the implementation is coded, when the desired behavior is most fresh in the mind.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compatibility focus&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;I have never seen a community so focused on maintaining backward compatibility. I can&amp;rsquo;t think of a single deprecated method in the Java library that was actually deleted.&lt;/li&gt;
&lt;li&gt;Even the Java Language Specification has an entire chapter devoted to &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se5.0/html/binaryComp.html&quot;&gt;binary compatibility&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;This focus may be partially attributable to the early mantra of &lt;a href=&quot;http://en.wikipedia.org/wiki/Write_once,_run_anywhere&quot;&gt;Write once, run anywhere&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Garbage Collection&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Being freed from the confines of manual memory management makes it a ton easier to focus on more important things.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;csharp&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;C&amp;#35;&lt;/h3&gt;

&lt;p&gt;Very similar to Java.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Assemblies&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;This is a level of encapsulation above the typical namespaces or modules in most languages. Assemblies are similar to the idea of static/dynamic libraries in C or JAR files in Java.&lt;/li&gt;
&lt;li&gt;Notably, you can mark members as &lt;code&gt;internal&lt;/code&gt;, which makes them public within the same assembly, but private to everybody outside the assembly. This is quite useful.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cross-language compatibility is first-class&lt;/strong&gt; (not just for C)

&lt;ul&gt;
&lt;li&gt;C# runs in the Common Language Runtime, which was designed from the beginning to support interoperability between languages.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Properties are first-class&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;No longer need to write explicit getter and (optional) setter methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Listeners are first-class&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Classes can declare an &lt;em&gt;event&lt;/em&gt; &lt;code&gt;Foo&lt;/code&gt; with &lt;code&gt;addFooListener&lt;/code&gt; and &lt;code&gt;removeFooListener&lt;/code&gt; functionality built in.&lt;/li&gt;
&lt;li&gt;Unfortunately the implementation has some annoyances&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Foreign Methods&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; are first-class&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;C# calls these &lt;em&gt;extension methods&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Partial Classes&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Allows a class&amp;rsquo;s members to be defined in multiple files.&lt;/li&gt;
&lt;li&gt;Useful to add functionality to a generated class (for example, from a parser generator) without those modifications getting lost when the class is next regenerated.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;python&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Python&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Indentation is significant&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Everyone notices this pretty fast.&lt;/li&gt;
&lt;li&gt;Overall I think requiring correct indentation is a Good Thing™, as it contributes directly to &lt;em&gt;readable&lt;/em&gt; code.&lt;/li&gt;
&lt;li&gt;However this makes lambda expressions much less powerful than in other languages, since you can&amp;rsquo;t easily nest statements inside a lambda expression without explicit braces (or similar delimiters).&lt;/li&gt;
&lt;li&gt;Another side effect of having significant indentation is that the choice of tabs vs. spaces really matters. If you mix them, your program probably won&amp;rsquo;t run.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interactive interpreter (REPL)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Amazingly useful for prototyping quickly, running experiments, and learning the language.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Collections are first class&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;You can type &lt;code&gt;[1,2,3]&lt;/code&gt; to get a list, &lt;code&gt;{'key': 'value'}&lt;/code&gt; to get a dictionary, and &lt;code&gt;{1,2,3}&lt;/code&gt; to get a set. So much faster than &lt;code&gt;new ArrayList&amp;lt;Integer&amp;gt;(...)&lt;/code&gt;, &lt;code&gt;new HashMap&amp;lt;Integer&amp;gt;(...)&lt;/code&gt;, or &lt;code&gt;new HashSet&amp;lt;Integer&amp;gt;(...)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Functions are first class&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;You can declare them as literals, pass them around, and create higher-order functions that take functions as parameters.&lt;/li&gt;
&lt;li&gt;Functions can also live on their own without an enclosing class, in contrast to Java. This is often the simplest approach for a given implementation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ldquo;Magic&amp;rdquo; marked explicitly&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Anything &amp;ldquo;magic&amp;rdquo; that the language treats specially has names surrounded by double underscores.&lt;/li&gt;
&lt;li&gt;For example:

&lt;ul&gt;
&lt;li&gt;An object&amp;rsquo;s constructor is called &lt;code&gt;__init__&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The method implementing an operator overload for plus is called &lt;code&gt;__add__&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A class&amp;rsquo;s metaclass is held by the &lt;code&gt;__metaclass__&lt;/code&gt; field.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generators&lt;/strong&gt; and &lt;strong&gt;Coroutines&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Generators enable straightforward &lt;em&gt;pulling&lt;/em&gt; of values from a complex data source (like a parsed data structure).&lt;/li&gt;
&lt;li&gt;Coroutines enable straightforward &lt;em&gt;pushing&lt;/em&gt; of values to a complex data sink.&lt;/li&gt;
&lt;li&gt;Python calls both constructs a &lt;em&gt;generator&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;javascript&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;JavaScript&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;No blocking I/O&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;All I/O is non-blocking and asynchronous. This results in heavy use of &lt;a href=&quot;http://en.wikipedia.org/wiki/Continuation-passing_style&quot;&gt;continuation passing style&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Successful despite huge flaws&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Ease of deployment and ubiquity (i.e. business considerations) trump ease of use. (PHP also wins for the same reason.)&lt;/li&gt;
&lt;li&gt;A few flaws:

&lt;ul&gt;
&lt;li&gt;Everything is in the one global namespace.&lt;/li&gt;
&lt;li&gt;No user-defined namespaces, modules, or importing of other files.&lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;#fn:6&quot; rel=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;No built-in facility for classes.&lt;sup id=&quot;fnref:7&quot;&gt;&lt;a href=&quot;#fn:7&quot; rel=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Bizarre loose semantics for &lt;code&gt;==&lt;/code&gt;.&lt;sup id=&quot;fnref:8&quot;&gt;&lt;a href=&quot;#fn:8&quot; rel=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Multiple illegal value sentinels: &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;.&lt;sup id=&quot;fnref:9&quot;&gt;&lt;a href=&quot;#fn:9&quot; rel=&quot;footnote&quot;&gt;9&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JSON (JavaScript Object Notation)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;A fantastically compact, readable, and portable notation for representing all kinds of data structures. Great for data interchange.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;haskell&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Haskell&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Lazy evaluation&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Expressions are only evaluated when some primitive operation (like &lt;code&gt;print&lt;/code&gt; or &lt;code&gt;add&lt;/code&gt;) requires the value of the expression.&lt;/li&gt;
&lt;li&gt;Allows you to glue programs together in new ways. In particular, execution
of multiple functions can be interleaved trivially and termination
conditions can be separated from looped computation.

&lt;ul&gt;
&lt;li&gt;This is explained in more detail in &lt;a href=&quot;http://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf&quot;&gt;Why Functional Programming (1990)&lt;/a&gt;,
§4 &amp;ldquo;Gluing Programs Together&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Allows you to extract complex expressions without fear of introducing a performance hit (since the expression will only actually be evaluated if it is needed).&lt;/li&gt;
&lt;li&gt;Allows you to define your own control flow operators.&lt;sup id=&quot;fnref:10&quot;&gt;&lt;a href=&quot;#fn:10&quot; rel=&quot;footnote&quot;&gt;10&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Side effects banned by default&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Mutation of data structures and I/O, both of which have order-sensitive side effects, are not allowed except within the confines of &lt;strong&gt;monad&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;monad&lt;/strong&gt; is a construct that explicitly controls evaluation order, in contrast to the usual unpredictable lazy evaluation behavior.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;null&lt;/code&gt; banned by default.&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Unlike many languages, there is no special &lt;code&gt;null&lt;/code&gt; value in Haskell that can be substituted anywhere.&lt;/li&gt;
&lt;li&gt;Instead if a function wants to return a value of type &lt;code&gt;T&lt;/code&gt; or null, you would declare the function as returning type &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;, which could either have the value &lt;code&gt;Some(tValue)&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt;. When declared in this way, callers are &lt;em&gt;required&lt;/em&gt; to handle both possibilies.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type inference (+ static typing)&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The benefits of static typing without the need to specify the types for everything?&lt;br/&gt;
Count me in!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;lisp&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Lisp &lt;small&gt;(Common Lisp, Scheme, Clojure)&lt;sup id=&quot;fnref:11&quot;&gt;&lt;a href=&quot;#fn:11&quot; rel=&quot;footnote&quot;&gt;11&lt;/a&gt;&lt;/sup&gt;&lt;/small&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Homoiconic&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;When you write a Lisp program, the notation you use (the &lt;em&gt;grammar&lt;/em&gt;) is equivalent to what a compiler would see (an &lt;em&gt;abstract syntax tree&lt;/em&gt; or &lt;em&gt;AST&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;Furthermore this Lisp code is represented as a nested structure of lists, symbols, and literals, all of which can be directly generated and manipulated in Lisp itself!&lt;/li&gt;
&lt;li&gt;This allows Lisp code to generate list structures which can then be run as Lisp code directly.

&lt;ul&gt;
&lt;li&gt;Generation can be done at &lt;em&gt;compile&lt;/em&gt; time with &lt;strong&gt;macros&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Generation can be done at &lt;em&gt;runtime&lt;/em&gt; as well, and then invoked with &lt;strong&gt;eval&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;However the highly uniform structure of Lisp code, devoid of operator and syntactic diversity, makes for lousy typography and thus low readability.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Macros&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;A function that transforms the AST of its operands at &lt;em&gt;compile&lt;/em&gt; time to new code.&lt;/li&gt;
&lt;li&gt;Macros can be used to generate arbitrary new statements and control structures.

&lt;ul&gt;
&lt;li&gt;Domain specific languages, in particular, are very easy to implement in Lisp thanks to macros.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Macros can also be used to perform code optimizations at compile time&lt;sup id=&quot;fnref:12&quot;&gt;&lt;a href=&quot;#fn:12&quot; rel=&quot;footnote&quot;&gt;12&lt;/a&gt;&lt;/sup&gt; (similar to  &amp;ldquo;template metaprogramming&amp;rdquo; in C++).&lt;/li&gt;
&lt;li&gt;Fluent use of macros requires the host language to be homoiconic, which is rare. Thus Lisp remains the only well-known language family that has macros.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lisp Conditions and Restarts&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Allows bidirectional communication between different parts of the call stack. More powerful than exceptions, since conditions can not only unwind the stack but also wind it back again via a restart.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Call-with-current-continuation&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Allows you to save the current execution state of the program in a variable and jump back to it later. Multiple times, even. It&amp;rsquo;s like a friggin' time machine. You can implement fairly complex control flow operators with this function.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a id=&quot;other&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Other&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Fexprs&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;A function whose operands are passed to it at runtime without being evaluated.&lt;/li&gt;
&lt;li&gt;Similar to macros and lazy evaluation in terms of power.&lt;/li&gt;
&lt;li&gt;Has fallen out of favor since the 1980s due to being difficult for compilers to optimize. Also it is hard to provide good error messages.&lt;/li&gt;
&lt;li&gt;Furthermore most fexpr functions tend to rely on &lt;em&gt;eval&lt;/em&gt; to continue evaluating its operands. The use of &lt;em&gt;eval&lt;/em&gt; has its own problems&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;!-- TODO: Add Prolog --&gt;


&lt;h3&gt;&lt;em&gt;Related Articles&lt;/em&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/articles/2013/02/20/visual-guide-to-programming-language-properties/&quot;&gt;Visual Guide to Programming Language Properties&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Shows programming language features, how they are related, and which features are present in popular languages.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Visualizes some of the features discussed in this article.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/articles/2013/03/01/notes-on-racket/&quot;&gt;Notes on Racket&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Describes Racket, a dialect of Lisp with batteries included.&lt;/em&gt;&lt;br/&gt;
&lt;em&gt;Useful for implementing other languages and creating cross-platform GUI programs.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/articles/2013/02/25/notes-on-prolog/&quot;&gt;Notes on Prolog&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Describes Prolog, a highly declarative language.&lt;/em&gt;&lt;br/&gt;
&lt;em&gt;Useful for exploring and verifying proofs.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/articles/2013/02/02/learnings-from-sicp/&quot;&gt;Learnings from SICP (and Lisp)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Discusses computer science concepts and how they manifest in various programming languages.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;For example it is undefined what happens when you add to an integer variable and the variable overflows. In most compilers adding 1 to the largest integer wraps around to result in the smallest integer, and thus a number of programs depend on this behavior. Other compilers &lt;a href=&quot;http://thiemonagel.de/2010/01/signed-integer-overflow/&quot;&gt;assume overflow is impossible&lt;/a&gt;.&lt;a href=&quot;#fnref:1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;Steve Yegge has a great rant on the over-focus on objects in the Java community: &lt;a href=&quot;http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html&quot;&gt;Execution in the Kingdom of Nouns&lt;/a&gt;&lt;a href=&quot;#fnref:2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:3&quot;&gt;
&lt;p&gt;C# is by design almost a direct copy of Java. It amazes me that Microsoft (C#&amp;rsquo;s sponsor) would spend so much effort making a copy of an existing language.&lt;a href=&quot;#fnref:3&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:4&quot;&gt;
&lt;p&gt;If you invoke an uninitialized event-property, it will throw a &lt;code&gt;NullReferenceException&lt;/code&gt; instead of ignoring your request, as you would expect. Workaround by initializing events with an empty delegate.&lt;a href=&quot;#fnref:4&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:5&quot;&gt;
&lt;p&gt;I am referring to the &lt;a href=&quot;http://www.refactoring.com/catalog/introduceForeignMethod.html&quot;&gt;Foreign Method&lt;/a&gt; design pattern here, not a native function from a &lt;a href=&quot;http://en.wikipedia.org/wiki/Foreign_function_interface&quot;&gt;foreign function interface&lt;/a&gt;.&lt;a href=&quot;#fnref:5&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:6&quot;&gt;
&lt;p&gt;Hence workarounds like &lt;a href=&quot;http://requirejs.org&quot;&gt;RequireJS&lt;/a&gt; to get includes and modules.&lt;a href=&quot;#fnref:6&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:7&quot;&gt;
&lt;p&gt;Hence reimplementions of class semantics in libraries like MooTools, Prototype, and &lt;a href=&quot;http://ejohn.org/blog/simple-javascript-inheritance/&quot;&gt;random blog posts&lt;/a&gt;. (That blog post has the best implementation, IMHO.)&lt;a href=&quot;#fnref:7&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:8&quot;&gt;
&lt;p&gt;Hence recommendations to always use &lt;code&gt;===&lt;/code&gt; instead of &lt;code&gt;==&lt;/code&gt;.&lt;a href=&quot;#fnref:8&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:9&quot;&gt;
&lt;p&gt;Hence recommendations to only depend on the &amp;ldquo;truthy&amp;rdquo; and &amp;ldquo;falsy&amp;rdquo; values of expressions instead of direct comparisons with &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.&lt;a href=&quot;#fnref:9&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:10&quot;&gt;
&lt;p&gt;Want to implement Ruby&amp;rsquo;s &lt;code&gt;until&lt;/code&gt; loop or &lt;code&gt;unless&lt;/code&gt; conditional? No problem.&lt;a href=&quot;#fnref:10&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:11&quot;&gt;
&lt;p&gt;There are more dialects of Lisp than any other language I can think of. These 3 (Common Lisp, Scheme, and Clojure) are just the most popular dialects. I&amp;rsquo;ve directly used &lt;a href=&quot;/articles/2013/03/01/notes-on-racket/&quot;&gt;Racket&lt;/a&gt; in the past, which is itself a dialect of Scheme.&lt;a href=&quot;#fnref:11&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:12&quot;&gt;
&lt;p&gt;Prismatic performs efficient &lt;a href=&quot;http://blog.getprismatic.com/blog/2013/1/22/the-magic-of-macros-lighting-fast-templating-in-clojurescript&quot;&gt;compile-time DOM templating&lt;/a&gt; in ClojureScript using macros.&lt;a href=&quot;#fnref:12&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

</description>
    </item>
    
    
    <item>
      <title>Things I Wish I Knew Before Working in Industry</title>
      <link>http://dafoster.net/articles/2013/01/15/things-i-wish-i-knew-before-working-in-industry/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Tue, 15 Jan 2013 00:00:00 -0800</pubDate>
      <guid>http://dafoster.net/articles/2013/01/15/things-i-wish-i-knew-before-working-in-industry</guid>
      <description>&lt;p&gt;In April 2008, a representative from IBM gave a presentation at Georgia
Tech about things he wished he knew before working in the the software
industry. I have found his advice to be very useful at various points during
my career. Sadly I have lost the presenter&amp;rsquo;s name.&lt;/p&gt;

&lt;p&gt;Here is my outline of his presentation. &lt;strong&gt;Emphasized&lt;/strong&gt; points are ones I&amp;rsquo;ve found
to be particularly useful.&lt;/p&gt;

&lt;h3&gt;Technology&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Future: integration&lt;/li&gt;
&lt;li&gt;Needed: ease-of-use &amp;amp; less complexity&lt;/li&gt;
&lt;li&gt;Do &lt;em&gt;not&lt;/em&gt; reinvent wheels!

&lt;ul&gt;
&lt;li&gt;you&amp;rsquo;ll never finish the project&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Technical Knowledge&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Learn to learn&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t need to take a class to learn something&lt;/li&gt;
&lt;li&gt;Learn a little about a lot of things&lt;/li&gt;
&lt;li&gt;Read news highlights from worthwhile sources&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Problem Solving&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Build a network of people. Asking for advice is quicker than learning the hard way.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;There is always more than one way to do something.&lt;br/&gt;
Weigh the pros/cons of each – then pick and choose.&lt;/li&gt;
&lt;li&gt;Innovate &lt;em&gt;before&lt;/em&gt; you execute. Think critically before you act.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Business &amp;amp; Technology&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Technology adoption is driven by &lt;em&gt;business&lt;/em&gt;. (practicality)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Business is nothing without technology.&lt;br/&gt;
Technology is nothing without business.&lt;/li&gt;
&lt;li&gt;If you build a better mousetrap, they will not come.&lt;/li&gt;
&lt;li&gt;A project, no matter how advanced, is doomed for failure without a paying customer.&lt;/li&gt;
&lt;li&gt;Think about TCO (&lt;em&gt;total&lt;/em&gt; cost of ownership) and ROI (return on investment).&lt;br/&gt;
You must always justify your returns.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Communication with &lt;em&gt;managers&lt;/em&gt; and &lt;em&gt;customers&lt;/em&gt; is vital!&lt;/strong&gt;&lt;br/&gt;
If you can&amp;rsquo;t get someone to adopt your solution, what&amp;rsquo;s the point?&lt;/li&gt;
&lt;li&gt;There is a difference between removing barriers and creating incentive (for a customer to switch to my project/product). You need both.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Promotions&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s not &lt;em&gt;what&lt;/em&gt; you know.&lt;br/&gt;
It&amp;rsquo;s not &lt;em&gt;who&lt;/em&gt; you know.&lt;br/&gt;
&lt;strong&gt;It&amp;rsquo;s &lt;em&gt;who&lt;/em&gt; knows &lt;em&gt;what&lt;/em&gt; you know.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Doing more of the same is not enough.

&lt;ul&gt;
&lt;li&gt;Need to try new things – take on more responsibility.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Doing what is asked is not enough.&lt;/li&gt;
&lt;li&gt;Ask you manager what the expectations are.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Working with Others&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Credit + gratitude are not limited resources.&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Say thank you!&lt;/li&gt;
&lt;li&gt;Give credit where due.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Be ambitious but be humble.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t make assumptions about others.

&lt;ul&gt;
&lt;li&gt;Give people the benefit of the doubt.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Your lack of planning does not mean I need to treat your request as urgent.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Do what you say you will. Keep your word.

&lt;ul&gt;
&lt;li&gt;reliable&lt;/li&gt;
&lt;li&gt;dependable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The best humor is &lt;em&gt;self-deprecating&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;There is always someone faster, smarter, and better looking.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Managers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;They don&amp;rsquo;t have a magic wand. They don&amp;rsquo;t automatically fix problems.&lt;/li&gt;
&lt;li&gt;Managers do not have a superset of the employees' (team members') knowledge.&lt;/li&gt;
&lt;li&gt;Managers can&amp;rsquo;t read minds. Don&amp;rsquo;t assume. Communicate explicitly.&lt;/li&gt;
&lt;li&gt;You are responsible for your own career. But ask for help.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;You and Your Job&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Your job is what you make of it. Don&amp;rsquo;t be confined by a job description.&lt;/li&gt;
&lt;li&gt;Work/Life balance doesn&amp;rsquo;t have good default settings. You must do &lt;em&gt;explicit&lt;/em&gt; actions.

&lt;ul&gt;
&lt;li&gt;plan&lt;/li&gt;
&lt;li&gt;schedule for success&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You are not your job. Do not define yourself like this.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Workers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;We&amp;rsquo;re employed to &lt;em&gt;add value&lt;/em&gt;, not spend money.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s easy to stay busy, but are you accomplishing anything &lt;em&gt;worthwhile&lt;/em&gt;?

&lt;ul&gt;
&lt;li&gt;don&amp;rsquo;t needlessly clutter your schedule&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If you aren&amp;rsquo;t looking at it from a &lt;em&gt;customer perspective&lt;/em&gt;, you aren&amp;rsquo;t looking at it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;You can&amp;rsquo;t do everything. Pick what you &lt;em&gt;won&amp;rsquo;t&lt;/em&gt; do.&lt;/strong&gt; (The world won&amp;rsquo;t end.)&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Employment&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t expect your first job to be your dream job. Look for a &lt;em&gt;path&lt;/em&gt;, not an &lt;em&gt;endpoint&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Be willing to stretch your comfort zone.

&lt;ul&gt;
&lt;li&gt;geographically, work type, etc.&lt;/li&gt;
&lt;li&gt;Otherwise you&amp;rsquo;ll stagnate.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Know your employer&amp;rsquo;s business model.

&lt;ul&gt;
&lt;li&gt;Examples:

&lt;ul&gt;
&lt;li&gt;HP = selling ink;&lt;/li&gt;
&lt;li&gt;Microsoft = selling Office and Windows;&lt;/li&gt;
&lt;li&gt;Apple = iPod and (to some extent) Macs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Take a look at the annual reports for your company.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Get &lt;em&gt;internships&lt;/em&gt;, even if with competitors, maybe even delaying graduation.&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;It gives experience.&lt;/li&gt;
&lt;li&gt;Increases employment opportunities.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Start looking and prepare much earlier.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Successful Employment&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;If you want to make a difference, look for chaos.&lt;br/&gt;
Stable environments offer little opportunity.&lt;/li&gt;
&lt;li&gt;Good employees &lt;em&gt;deal&lt;/em&gt; with challenges instead of pouting. &lt;em&gt;Adapt&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Stay above the commodity line (with regard to skill set and type of work done).&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Life&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Understand other people&amp;rsquo;s &lt;em&gt;motivations&lt;/em&gt;.

&lt;ul&gt;
&lt;li&gt;Makes it easier to find new ways of solving the underlying goal.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Define your values and goals.

&lt;ul&gt;
&lt;li&gt;ex: What type of job do you want?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Your &lt;em&gt;behaviors&lt;/em&gt; should support your goals.&lt;/li&gt;
&lt;li&gt;Expect your goals to change. Success is dynamic.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t let &lt;em&gt;others&lt;/em&gt; define success for you.&lt;/li&gt;
&lt;li&gt;You can get rich by getting more or &lt;em&gt;wanting less&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Life is one great balancing act.

&lt;ul&gt;
&lt;li&gt;There&amp;rsquo;s no single right way of doing things.&lt;/li&gt;
&lt;li&gt;Balancing your priorities and goals is important.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    
    
    <item>
      <title>Programming is Fun. But What Matters is Solving a Real Problem.</title>
      <link>http://dafoster.net/articles/2013/01/08/programming-is-fun-but-what-matters-is-solving-a-real-problem/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Tue, 08 Jan 2013 00:00:00 -0800</pubDate>
      <guid>http://dafoster.net/articles/2013/01/08/programming-is-fun-but-what-matters-is-solving-a-real-problem</guid>
      <description>&lt;p&gt;I love programming. It tickles me when I stumble across a new programming language that lets me express concepts in a more clear and direct fashion. I love the cleanness and order that results after a good round of refactoring&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. I enjoy the challenge of hacking away at a fiddly problem and testing all the cases to get a correct and bulletproof solution.&lt;/p&gt;

&lt;p&gt;However I have realized programming is merely an activity. It is a &lt;em&gt;means&lt;/em&gt;, not an &lt;em&gt;end&lt;/em&gt;. My work is not inherently valuable because I have created a piece of software. Rather it is because I have created software &lt;em&gt;that solves somebody&amp;rsquo;s problem&lt;/em&gt;.&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Therefore it is the &lt;em&gt;problem&lt;/em&gt; that deserves the most attention if you want to make a difference that people care about. In that vein I have been learning about the precepts of Customer Development and Customer Discovery, which deals with how to efficiently interact with customers to discover a problem that they care about.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Direct customer interaction, such as through in-person interviews of the general public, is way outside my comfort zone. However I will persevere. I think it is a very important skill for actually making a dent in the universe.&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr/&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;&lt;em&gt;Refactoring&lt;/em&gt; is a systematic method for code cleanup: improving the structure of existing code without changing its behavior. I highly recommend the book &lt;a href=&quot;http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672&quot;&gt;Refactoring&lt;/a&gt; if you want a deep-dive into the topic.&lt;a href=&quot;#fnref:1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:2&quot;&gt;
&lt;p&gt;&lt;!-- Speculation: --&gt; Business majors &amp;amp; managers recognize early on the importance of solving business problems. After all, their training is around organizing other people to solve problems they identify. (Although I feel they often focus overly on managing and not enough on problem identification.)&lt;a href=&quot;#fnref:2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:3&quot;&gt;
&lt;p&gt;For a great practical workboard around Customer Discovery (which is the first quarter of Customer Development), I highly recommend Ash Maurya&amp;rsquo;s &lt;a href=&quot;http://www.amazon.com/Running-Lean-Iterate-Works-OReilly/dp/1449305172&quot;&gt;Running Lean&lt;/a&gt;. For a full overview of Customer Development, I recommend Steve Blank&amp;rsquo;s &lt;a href=&quot;http://www.amazon.com/Four-Steps-Epiphany-Successful-Strategies/dp/0976470705&quot;&gt;The Four Steps to the Epiphany&lt;/a&gt;.&lt;a href=&quot;#fnref:3&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn:4&quot;&gt;
&lt;p&gt;Steve Jobs famously said he wanted to &amp;ldquo;put a dent in the universe&amp;rdquo;. And boy did he ever.&lt;a href=&quot;#fnref:4&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

</description>
    </item>
    
    
    <item>
      <title>This website is now powered by Jekyll</title>
      <link>http://dafoster.net/articles/2012/12/21/this-website-is-now-powered-by-jekyll/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Fri, 21 Dec 2012 00:00:00 -0800</pubDate>
      <guid>http://dafoster.net/articles/2012/12/21/this-website-is-now-powered-by-jekyll</guid>
      <description>&lt;p&gt;And this is my first post using the new system. Articles are a lot easier to
write, so I will be posting more frequently.&lt;/p&gt;

&lt;p&gt;Previously this site was powered by the &lt;a href=&quot;http://drupal.org&quot;&gt;Drupal&lt;/a&gt; engine. I found it overly
complex to maintain, especially for a single-user blog and portfolio website.
For more details see my post &lt;a href=&quot;/articles/2012/12/16/why-i-no-longer-use-drupal/&quot;&gt;Why I no longer use Drupal&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;&lt;em&gt;Related Articles&lt;/em&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/articles/2012/12/16/why-i-no-longer-use-drupal/&quot;&gt;Why I no longer use Drupal&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Details why Drupal is overly complex for a personal blog.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    
    
    <item>
      <title>Why I no longer use Drupal</title>
      <link>http://dafoster.net/articles/2012/12/16/why-i-no-longer-use-drupal/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Sun, 16 Dec 2012 00:00:00 -0800</pubDate>
      <guid>http://dafoster.net/articles/2012/12/16/why-i-no-longer-use-drupal</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;b&gt;TLDR:&lt;/b&gt; Drupal is overly complex for a personal blog. It is hard to maintain. Simple static site generators are easier to work with in the long term.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;My portfolio website was written during college using hand-coded HTML and used server-side includes to bring in common navigation.&lt;/p&gt;

&lt;p&gt;Then in January 2010 I remade my site in Drupal. It gained lots of fancy features such as first-class support for project categories and project languages. You could subscribe to almost any page as a feed. There were project specific updates that could be commented on. From a feature point of view, it rocked.&lt;/p&gt;

&lt;p&gt;But some problems became apparent over time:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Security updates were frequent and difficult to apply correctly.&lt;/li&gt;
&lt;li&gt;I didn&amp;rsquo;t like writing articles on the site because I couldn&amp;rsquo;t use simple markup formats such as Markdown.

&lt;ul&gt;
&lt;li&gt;Drupal has no good editor plugins for markup languages.&lt;/li&gt;
&lt;li&gt;And its visual HTML editor generates messy HTML.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The theme I used for the site was complex and hard to modify.

&lt;ul&gt;
&lt;li&gt;And the CSS often interfered with my article markup, necessitating me to drop into HTML when editing certain articles.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;There was no sane way to test structural changes to the site locally and then automatically deploy them to production.

&lt;ul&gt;
&lt;li&gt;Normally this would be done by keeping the site structure in the filesystem and all user content in a database. This allows the filesystem contents to be easily deployed using &lt;code&gt;git push&lt;/code&gt;, &lt;code&gt;rsync&lt;/code&gt;, or similar techniques.&lt;/li&gt;
&lt;li&gt;Drupal, by contrast, keeps its site structure in both the filesystem &lt;em&gt;and&lt;/em&gt; in the database, along with user-generated content. Updating only the parts of the database related to site structure is cumbersome and error-prone.&lt;/li&gt;
&lt;li&gt;Thus, I couldn&amp;rsquo;t really change the site structure after my initial deployment to production.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Nothing was in revision control, which made me nervous.&lt;/li&gt;
&lt;li&gt;I had to hack the Drupal core to get my contact form to work with my web hosting provider.&lt;/li&gt;
&lt;li&gt;Most of the features of the site weren&amp;rsquo;t being used by readers.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So now I am rewriting my site yet again in straight HTML (via a simple static site generator) and outsourcing all user generated content (like comments) to third party service providers.&lt;/p&gt;

&lt;p&gt;Benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simple simple simple.&lt;/li&gt;
&lt;li&gt;Automatic security. The web server just serves static files.&lt;/li&gt;
&lt;li&gt;Automatic scalability, for the same reason.&lt;/li&gt;
&lt;li&gt;Simple authoring in Markdown with powerful client-side text editors.&lt;/li&gt;
&lt;li&gt;Instant deployment with &lt;code&gt;git push&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Everything in revision control.&lt;/li&gt;
&lt;li&gt;I can use any web hosting provider. Hell, I can just use &lt;a href=&quot;http://pages.github.com&quot;&gt;GitHub Pages&lt;/a&gt; for free.&lt;/li&gt;
&lt;li&gt;Ultimate control over the site theme and CSS. I can fix problems myself.&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    
    
    <item>
      <title>Retrospect vs. Time Machine</title>
      <link>http://dafoster.net/articles/2010/11/13/retrospect-vs-time-machine/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Sat, 13 Nov 2010 00:00:00 -0800</pubDate>
      <guid>http://dafoster.net/articles/2010/11/13/retrospect-vs-time-machine</guid>
      <description>&lt;h2&gt;The old Retrospect 6.0&lt;/h2&gt;

&lt;p&gt;In the past I have used Retrospect 6.0 to backup my Macs, since it was one of
the few programs that reliably backed up everything correctly, with all the
metadata intact. But it is looking much less attractive these days&amp;hellip;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It no longer finds my laptop on the network reliably, due to some bug.
Especially when switching between wireless and wired networks.
Thus I often miss backups.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is slow.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It does not groom backups.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It stores everything inside a single monolithic file,
which is at risk of corruption.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;The new Retrospect 8.0&lt;/h2&gt;

&lt;p&gt;The latest version of Retropect (8.0) is somewhat better but has some problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It does not seem to backup all attributes correctly.
For example, volume icons do not seem to be restored correctly.
Inaccurate backups are useless.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is more complicated to use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Automatic grooming, although supported, is so slow to be practically unusable.
It takes maybe 2x as long to do one grooming operation as an incremental backup.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Time Machine&lt;/h2&gt;

&lt;p&gt;Now there is Time Machine. Since my primary systems are 10.5+, I can use it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It &lt;em&gt;should&lt;/em&gt; support reliable backup of all filesystem attributes,
since it was made by Apple, who is in a position to know about them.
Also, Apple typically makes solid products.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It has quick, automatic, incremental backups.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It also grooms automatically while it is backing up. Grooming behavior is
intelligent, keeping snapshots at sensible intervals.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The single-file restore interface is precise, intuitive, and fast.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Only wrinkle is that Time Machine is not really designed to backup to network
drives, however there are &lt;a href=&quot;http://code.stephenmorley.org/articles/time-machine-on-a-network-drive/&quot;&gt;instructions for circumventing this&lt;/a&gt;.
(Of course there is Time Machine + Time Capsule for network backups, but a
Capsule is egregiously expensive.)&lt;/p&gt;

&lt;h3&gt;2012 Update&lt;/h3&gt;

&lt;p&gt;Time Machine misses a few filesystem attributes that Retrospect 6.0 nailed back
in the day, like volume icons.&lt;/p&gt;

&lt;p&gt;I think it may also strip HFS+ extended attributes, since applications appear
to be quarantined after they are restored from a Time Machine backup.&lt;/p&gt;

&lt;p&gt;One last nitpick is that TM has very poor handling for bad media and bad blocks.
In particular if your primary hard drive develops bad blocks, which is an early
sign of imminent failure, Time Machine will choke and refuse to backup the
entire volume. And this is exactly at the time you need it your files backed up
the most, when your hard drive is likely to fail.&lt;/p&gt;
</description>
    </item>
    
    
    <item>
      <title>Impact of Anime on my Programming Experience</title>
      <link>http://dafoster.net/articles/2010/09/18/impact-anime-my-programming-experience/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Sat, 18 Sep 2010 00:00:00 -0700</pubDate>
      <guid>http://dafoster.net/articles/2010/09/18/impact-anime-my-programming-experience</guid>
      <description>&lt;p&gt;It occurs to me that anime has been an important driver for improving my programming abilities.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I did my own &lt;a href=&quot;/prism/projects/kiss/&quot;&gt;implementation of the Kisekae Set System&lt;/a&gt; (KiSS),
a digital paper doll system which often featured anime characters.

&lt;ul&gt;
&lt;li&gt;My very first exposure to anime was to the characters of Wedding Peach,
via an included doll file with the French KiSS viewer by John Stiles.&lt;/li&gt;
&lt;li&gt;Taught me how to write directly to graphics buffers, in both C and
later Java.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I initially picked up Java when I was writing &lt;strong&gt;RealMediaFixer&lt;/strong&gt;,
a repairer of RealMedia video files. CodeWarrior&amp;rsquo;s implementation of the
C++ iostream classes had a broken buffered stream implementation,
so I switched to Java to use its rock solid BufferedOutputStream
implementation.

&lt;ul&gt;
&lt;li&gt;Initial use was to repair &lt;a href=&quot;http://www.themanime.org/viewreview.php?id=396&quot;&gt;Ranma&lt;/a&gt; episodes that I downloaded over HTTP,
on dialup!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I implemented &lt;a href=&quot;/prism/projects/hotline/&quot;&gt;my own client and server for the Hotline protocol&lt;/a&gt;,
through which I got most of my anime prior to the introduction of
BitTorrent.&lt;/li&gt;
&lt;li&gt;Today I am &lt;a href=&quot;/projects/handbrake-subtitle-support/&quot;&gt;enhancing support for transcoding soft subtitles in HandBrake&lt;/a&gt;
so that I can watch new anime on the bus.&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    
    
    <item>
      <title>Comparing Writing Utensils</title>
      <link>http://dafoster.net/articles/2010/09/17/comparing-writing-utensils/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Fri, 17 Sep 2010 00:00:00 -0700</pubDate>
      <guid>http://dafoster.net/articles/2010/09/17/comparing-writing-utensils</guid>
      <description>&lt;p&gt;My experience using various kinds of writing utensils in school&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;&amp;gt; = &amp;ldquo;is better than&amp;rdquo;&lt;/i&gt;&lt;/p&gt;

&lt;h3&gt;Why Pens &gt; Pencils&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t smudge ∴ Archive well&lt;/li&gt;
&lt;li&gt;Force you to think about what you are writing

&lt;ul&gt;
&lt;li&gt;Mistakes are more costly, since you cannot simply use an eraser on pen&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Have brighter contrast ∴ Easier to read&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Why Mechanical Pencils &gt; Traditional Pencils&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t need to be sharpened ∴

&lt;ul&gt;
&lt;li&gt;No sawdust to clean up&lt;/li&gt;
&lt;li&gt;No special sharpener hardware needed&lt;/li&gt;
&lt;li&gt;Lifetime is not limited to a certain number of sharpenings

&lt;ul&gt;
&lt;li&gt;Lifetime only limited to when the m-pencil is lost&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Seem to resist smearing in the short term

&lt;ul&gt;
&lt;li&gt;(but pens still win in the long term)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Why Writing Utensils &gt; Computer Keyboards [for creative projects]&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Force you to think about what you are writing

&lt;ul&gt;
&lt;li&gt;It takes a long time (comparatively) to write individual words,
which gives you time to think about what you are writing&lt;/li&gt;
&lt;li&gt;Mistakes are more costly, since you cannot just delete words&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Force you to think about the structure of what you are writing

&lt;ul&gt;
&lt;li&gt;Mistakes are more costly, since you cannot just cut and paste sections
which are poorly laid out in the first place&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No mental overhead

&lt;ul&gt;
&lt;li&gt;Using computers always incurs at least a small bit of mental overhead
that interferes with the creative process&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Automatic revision control (in the case of pen)

&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s easier to strike through (rather than erase) rejected ideas with
pen, so these ideas are preserved for future analysis, which sometimes
comes in handy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Why Computer Keyboards &gt; Writing Utensils [for non-creative projects]&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Typing speed is much higher

&lt;ul&gt;
&lt;li&gt;Gets even better if you use typing expansion software&lt;/li&gt;
&lt;li&gt;Gets even better if you use dictation software [for prose]&lt;/li&gt;
&lt;li&gt;Gets even better if you use a stenotype machine&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hyperlinks are easy to create and maintain

&lt;ul&gt;
&lt;li&gt;This is especially powerful when writing reference documents&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    
    
    <item>
      <title>Comparing iPod Touch (2nd Gen) to iPhone 3GS</title>
      <link>http://dafoster.net/articles/2010/09/17/comparing-ipod-touch-2nd-gen-iphone-3gs/?utm_source=rss&amp;utm_medium=feed&amp;utm_campaign=feed</link>
      <pubDate>Fri, 17 Sep 2010 00:00:00 -0700</pubDate>
      <guid>http://dafoster.net/articles/2010/09/17/comparing-ipod-touch-2nd-gen-iphone-3gs</guid>
      <description>&lt;p&gt;I recently upgraded from an iPod Touch to an iPhone 3GS. I hate contracts, so I
bought the 3GS off-contract from a seller on Craigslist. (And I timed my
purchase to coincide with the release of the iPhone 4, so lots of people were
dumping their own 3GS devices.)&lt;/p&gt;

&lt;p&gt;I am routinely in WiFi hotspots: at home, enroute to work, and at work, so I
usually put the iPhone 3GS in &amp;ldquo;Airplane Mode&amp;rdquo;, where the wireless radios are
disabled, to conserve battery life. Therefore I effectively use my iPhone like
a better iPod Touch most of the time.&lt;/p&gt;

&lt;p&gt;From purely a specification point of view, the differences are:&lt;/p&gt;

&lt;table border=&quot;1&quot;&gt;
    &lt;thead style=&quot;background-color:#e0e0e0;&quot;&gt;
        &lt;tr&gt;
            &lt;th scope=&quot;col&quot;&gt;
                &amp;nbsp;&lt;/th&gt;
            &lt;th scope=&quot;col&quot;&gt;
                iPod Touch (2nd Gen)&lt;/th&gt;
            &lt;th scope=&quot;col&quot;&gt;
                iPhone 3GS (3rd Gen)&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;
                internet access&lt;/td&gt;
            &lt;td&gt;
                only in WiFi hotspots&lt;/td&gt;
            &lt;td&gt;
                universal (except subway)*&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;
                geolocation&lt;/td&gt;
            &lt;td&gt;
                WiFi triangulation only, via SkyHook&lt;/td&gt;
            &lt;td&gt;
                GPS-enabled (very accurate)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;
                external speaker quality&lt;/td&gt;
            &lt;td&gt;
                -&lt;/td&gt;
            &lt;td&gt;
                surprisingly better&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;
                CPU / responsiveness&lt;/td&gt;
            &lt;td&gt;
                -&lt;/td&gt;
            &lt;td&gt;
                much faster&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;
                battery life&lt;/td&gt;
            &lt;td&gt;
                - (approx 3 days)&lt;/td&gt;
            &lt;td&gt;
                less (approx 2 days)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;
                vibrate capability&lt;/td&gt;
            &lt;td&gt;
                no&lt;/td&gt;
            &lt;td&gt;
                yes&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;
                built-in microphone&lt;/td&gt;
            &lt;td&gt;
                no&lt;/td&gt;
            &lt;td&gt;
                yes&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;
                heft&lt;/td&gt;
            &lt;td&gt;
                lighter and thinner&lt;/td&gt;
            &lt;td&gt;
                -&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;
                headphone jack location&lt;/td&gt;
            &lt;td&gt;
                bottom-right&lt;/td&gt;
            &lt;td&gt;
                top-left&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;In practical terms, this translates to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;I never get completely lost*&lt;/b&gt;

&lt;ul&gt;
&lt;li&gt;The combination of GPS plus internet everywhere means that I always know
where I am on the map.&lt;/li&gt;
&lt;li&gt;I can also get instant directions from my current location to an
arbitrary destination. I usually take public transit, but this works with
cars as well.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The iPhone is a better boombox&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;I use both devices as portable external sound systems while I work.
The better speaker quality of the iPhone is nice to have.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The iPhone user interface is more responsive&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&amp;hellip;thanks to the better CPU.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The iPhone needs to be recharged slightly more often&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&amp;hellip;thanks to the shorter battery life.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I never miss calendar reminders anymore&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Calendar reminders (including work meeting reminders) are not only
audible on the iPhone but also produce a noticeable vibration.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I can use Shazam to identify random music I hear&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&amp;hellip;thanks to the built-in microphone.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2012 Update:&lt;/strong&gt; This actually doesn&amp;rsquo;t work very well.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I can make phone calls if I really want to&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The microphone makes it feasable. Not just for normal calls, but VoIP
internet calls as well.&lt;/li&gt;
&lt;li&gt;With a phone plan, you can make the normal calls as well.*&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;i&gt;* Requires phone plan, with associated subscription costs.&lt;/i&gt;&lt;/p&gt;

&lt;h2&gt;The uneasy marriage with AT&amp;amp;T&lt;/h2&gt;

&lt;p&gt;I hate expensive monthly fees. Here in the USA, the only officially
supported carrier is AT&amp;amp;T, which charges at least $70/month. I don&amp;rsquo;t even use
the voice plan, so I&amp;rsquo;m being overcharged rather significantly at the moment.&lt;/p&gt;

&lt;p&gt;T-Mobile is another option for those willing to unlock their iPhones. They
have less expensive plans, to the tune of $40/month, which I&amp;rsquo;m much in favor
of. I intend to unlock my iPhone when I get some spare time in the next month
or so. After all, it&amp;rsquo;s costing me $30/month to delay.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2012 Update:&lt;/strong&gt; T-Mobile is rumored to be carrying the iPhone sometime in
2013. I just hope it isn&amp;rsquo;t &amp;ldquo;too little, too late.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2012 Update:&lt;/strong&gt; I am still using the same iPhone 3GS today.&lt;/p&gt;
</description>
    </item>
    

  </channel> 
</rss>